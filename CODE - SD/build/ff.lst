ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ff.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ld_word,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	ld_word:
  24              	.LVL0:
  25              	.LFB0:
  26              		.file 1 "Src/ff.c"
   1:Src/ff.c      **** /*----------------------------------------------------------------------------/
   2:Src/ff.c      **** /  FatFs - Generic FAT Filesystem Module  R0.14b                              /
   3:Src/ff.c      **** /-----------------------------------------------------------------------------/
   4:Src/ff.c      **** /
   5:Src/ff.c      **** / Copyright (C) 2021, ChaN, all right reserved.
   6:Src/ff.c      **** /
   7:Src/ff.c      **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:Src/ff.c      **** / source and binary forms, with or without modification, are permitted provided
   9:Src/ff.c      **** / that the following condition is met:
  10:Src/ff.c      **** /
  11:Src/ff.c      **** / 1. Redistributions of source code must retain the above copyright notice,
  12:Src/ff.c      **** /    this condition and the following disclaimer.
  13:Src/ff.c      **** /
  14:Src/ff.c      **** / This software is provided by the copyright holder and contributors "AS IS"
  15:Src/ff.c      **** / and any warranties related to this software are DISCLAIMED.
  16:Src/ff.c      **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:Src/ff.c      **** / by use of this software.
  18:Src/ff.c      **** /
  19:Src/ff.c      **** /----------------------------------------------------------------------------*/
  20:Src/ff.c      **** 
  21:Src/ff.c      **** 
  22:Src/ff.c      **** #include <string.h>
  23:Src/ff.c      **** #include "ff.h"			/* Declarations of FatFs API */
  24:Src/ff.c      **** #include "diskio.h"		/* Declarations of device I/O functions */
  25:Src/ff.c      **** 
  26:Src/ff.c      **** 
  27:Src/ff.c      **** /*--------------------------------------------------------------------------
  28:Src/ff.c      **** 
  29:Src/ff.c      ****    Module Private Definitions
  30:Src/ff.c      **** 
  31:Src/ff.c      **** ---------------------------------------------------------------------------*/
  32:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 2


  33:Src/ff.c      **** #if FF_DEFINED != 86631	/* Revision ID */
  34:Src/ff.c      **** #error Wrong include file (ff.h).
  35:Src/ff.c      **** #endif
  36:Src/ff.c      **** 
  37:Src/ff.c      **** 
  38:Src/ff.c      **** /* Limits and boundaries */
  39:Src/ff.c      **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
  40:Src/ff.c      **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
  41:Src/ff.c      **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows
  42:Src/ff.c      **** #define MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but right for real DOS/Window
  43:Src/ff.c      **** #define MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
  44:Src/ff.c      **** #define MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
  45:Src/ff.c      **** 
  46:Src/ff.c      **** 
  47:Src/ff.c      **** /* Character code support macros */
  48:Src/ff.c      **** #define IsUpper(c)		((c) >= 'A' && (c) <= 'Z')
  49:Src/ff.c      **** #define IsLower(c)		((c) >= 'a' && (c) <= 'z')
  50:Src/ff.c      **** #define IsDigit(c)		((c) >= '0' && (c) <= '9')
  51:Src/ff.c      **** #define IsSeparator(c)	((c) == '/' || (c) == '\\')
  52:Src/ff.c      **** #define IsTerminator(c)	((UINT)(c) < (FF_USE_LFN ? ' ' : '!'))
  53:Src/ff.c      **** #define IsSurrogate(c)	((c) >= 0xD800 && (c) <= 0xDFFF)
  54:Src/ff.c      **** #define IsSurrogateH(c)	((c) >= 0xD800 && (c) <= 0xDBFF)
  55:Src/ff.c      **** #define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <= 0xDFFF)
  56:Src/ff.c      **** 
  57:Src/ff.c      **** 
  58:Src/ff.c      **** /* Additional file access control and file status flags for internal use */
  59:Src/ff.c      **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
  60:Src/ff.c      **** #define FA_MODIFIED	0x40	/* File has been modified */
  61:Src/ff.c      **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
  62:Src/ff.c      **** 
  63:Src/ff.c      **** 
  64:Src/ff.c      **** /* Additional file attribute bits for internal use */
  65:Src/ff.c      **** #define AM_VOL		0x08	/* Volume label */
  66:Src/ff.c      **** #define AM_LFN		0x0F	/* LFN entry */
  67:Src/ff.c      **** #define AM_MASK		0x3F	/* Mask of defined bits in FAT */
  68:Src/ff.c      **** #define AM_MASKX	0x37	/* Mask of defined bits in exFAT */
  69:Src/ff.c      **** 
  70:Src/ff.c      **** 
  71:Src/ff.c      **** /* Name status flags in fn[11] */
  72:Src/ff.c      **** #define NSFLAG		11		/* Index of the name status byte */
  73:Src/ff.c      **** #define NS_LOSS		0x01	/* Out of 8.3 format */
  74:Src/ff.c      **** #define NS_LFN		0x02	/* Force to create LFN entry */
  75:Src/ff.c      **** #define NS_LAST		0x04	/* Last segment */
  76:Src/ff.c      **** #define NS_BODY		0x08	/* Lower case flag (body) */
  77:Src/ff.c      **** #define NS_EXT		0x10	/* Lower case flag (ext) */
  78:Src/ff.c      **** #define NS_DOT		0x20	/* Dot entry */
  79:Src/ff.c      **** #define NS_NOLFN	0x40	/* Do not find LFN */
  80:Src/ff.c      **** #define NS_NONAME	0x80	/* Not followed */
  81:Src/ff.c      **** 
  82:Src/ff.c      **** 
  83:Src/ff.c      **** /* exFAT directory entry types */
  84:Src/ff.c      **** #define	ET_BITMAP	0x81	/* Allocation bitmap */
  85:Src/ff.c      **** #define	ET_UPCASE	0x82	/* Up-case table */
  86:Src/ff.c      **** #define	ET_VLABEL	0x83	/* Volume label */
  87:Src/ff.c      **** #define	ET_FILEDIR	0x85	/* File and directory */
  88:Src/ff.c      **** #define	ET_STREAM	0xC0	/* Stream extension */
  89:Src/ff.c      **** #define	ET_FILENAME	0xC1	/* Name extension */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 3


  90:Src/ff.c      **** 
  91:Src/ff.c      **** 
  92:Src/ff.c      **** /* FatFs refers the FAT structure as simple byte array instead of structure member
  93:Src/ff.c      **** / because the C structure is not binary compatible between different platforms */
  94:Src/ff.c      **** 
  95:Src/ff.c      **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
  96:Src/ff.c      **** #define BS_OEMName			3		/* OEM name (8-byte) */
  97:Src/ff.c      **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
  98:Src/ff.c      **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
  99:Src/ff.c      **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 100:Src/ff.c      **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 101:Src/ff.c      **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT [entry] (WORD) */
 102:Src/ff.c      **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 103:Src/ff.c      **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 104:Src/ff.c      **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 105:Src/ff.c      **** #define BPB_SecPerTrk		24		/* Number of sectors per track for int13h [sector] (WORD) */
 106:Src/ff.c      **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 107:Src/ff.c      **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 108:Src/ff.c      **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 109:Src/ff.c      **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 110:Src/ff.c      **** #define BS_NTres			37		/* WindowsNT error flag (BYTE) */
 111:Src/ff.c      **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 112:Src/ff.c      **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 113:Src/ff.c      **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 114:Src/ff.c      **** #define BS_FilSysType		54		/* Filesystem type string (8-byte) */
 115:Src/ff.c      **** #define BS_BootCode			62		/* Boot code (448-byte) */
 116:Src/ff.c      **** #define BS_55AA				510		/* Signature word (WORD) */
 117:Src/ff.c      **** 
 118:Src/ff.c      **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 119:Src/ff.c      **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 120:Src/ff.c      **** #define BPB_FSVer32			42		/* FAT32: Filesystem version (WORD) */
 121:Src/ff.c      **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 122:Src/ff.c      **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 123:Src/ff.c      **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 124:Src/ff.c      **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 125:Src/ff.c      **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 126:Src/ff.c      **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 127:Src/ff.c      **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 128:Src/ff.c      **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 129:Src/ff.c      **** #define BS_FilSysType32		82		/* FAT32: Filesystem type string (8-byte) */
 130:Src/ff.c      **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 131:Src/ff.c      **** 
 132:Src/ff.c      **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 133:Src/ff.c      **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 134:Src/ff.c      **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 135:Src/ff.c      **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 136:Src/ff.c      **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 137:Src/ff.c      **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 138:Src/ff.c      **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 139:Src/ff.c      **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 140:Src/ff.c      **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 141:Src/ff.c      **** #define BPB_FSVerEx			104		/* exFAT: Filesystem version (WORD) */
 142:Src/ff.c      **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (WORD) */
 143:Src/ff.c      **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 144:Src/ff.c      **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 145:Src/ff.c      **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 146:Src/ff.c      **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 4


 147:Src/ff.c      **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 148:Src/ff.c      **** #define BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 149:Src/ff.c      **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 150:Src/ff.c      **** 
 151:Src/ff.c      **** #define DIR_Name			0		/* Short file name (11-byte) */
 152:Src/ff.c      **** #define DIR_Attr			11		/* Attribute (BYTE) */
 153:Src/ff.c      **** #define DIR_NTres			12		/* Lower case flag (BYTE) */
 154:Src/ff.c      **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 155:Src/ff.c      **** #define DIR_CrtTime			14		/* Created time (DWORD) */
 156:Src/ff.c      **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 157:Src/ff.c      **** #define DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 158:Src/ff.c      **** #define DIR_ModTime			22		/* Modified time (DWORD) */
 159:Src/ff.c      **** #define DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 160:Src/ff.c      **** #define DIR_FileSize		28		/* File size (DWORD) */
 161:Src/ff.c      **** #define LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 162:Src/ff.c      **** #define LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 163:Src/ff.c      **** #define LDIR_Type			12		/* LFN: Entry type (BYTE) */
 164:Src/ff.c      **** #define LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 165:Src/ff.c      **** #define LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 166:Src/ff.c      **** #define XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 167:Src/ff.c      **** #define XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 168:Src/ff.c      **** #define XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 169:Src/ff.c      **** #define XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 170:Src/ff.c      **** #define XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 171:Src/ff.c      **** #define XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 172:Src/ff.c      **** #define XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 173:Src/ff.c      **** #define XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 174:Src/ff.c      **** #define XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 175:Src/ff.c      **** #define XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 176:Src/ff.c      **** #define XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 177:Src/ff.c      **** #define XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 178:Src/ff.c      **** #define XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 179:Src/ff.c      **** #define XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 180:Src/ff.c      **** #define XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 181:Src/ff.c      **** #define XDIR_GenFlags		33		/* exFAT: General secondary flags (BYTE) */
 182:Src/ff.c      **** #define XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 183:Src/ff.c      **** #define XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 184:Src/ff.c      **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 185:Src/ff.c      **** #define XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 186:Src/ff.c      **** #define XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 187:Src/ff.c      **** 
 188:Src/ff.c      **** #define SZDIRE				32		/* Size of a directory entry */
 189:Src/ff.c      **** #define DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 190:Src/ff.c      **** #define RDDEM				0x05	/* Replacement of the character collides with DDEM */
 191:Src/ff.c      **** #define LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 192:Src/ff.c      **** 
 193:Src/ff.c      **** #define FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 194:Src/ff.c      **** #define FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 195:Src/ff.c      **** #define FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 196:Src/ff.c      **** #define FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 197:Src/ff.c      **** 
 198:Src/ff.c      **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 199:Src/ff.c      **** #define SZ_PTE				16		/* MBR: Size of a partition table entry */
 200:Src/ff.c      **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 201:Src/ff.c      **** #define PTE_StHead			1		/* MBR PTE: Start head */
 202:Src/ff.c      **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 203:Src/ff.c      **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 5


 204:Src/ff.c      **** #define PTE_System			4		/* MBR PTE: System ID */
 205:Src/ff.c      **** #define PTE_EdHead			5		/* MBR PTE: End head */
 206:Src/ff.c      **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 207:Src/ff.c      **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 208:Src/ff.c      **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 209:Src/ff.c      **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 210:Src/ff.c      **** 
 211:Src/ff.c      **** #define GPTH_Sign			0		/* GPT: Header signature (8-byte) */
 212:Src/ff.c      **** #define GPTH_Rev			8		/* GPT: Revision (DWORD) */
 213:Src/ff.c      **** #define GPTH_Size			12		/* GPT: Header size (DWORD) */
 214:Src/ff.c      **** #define GPTH_Bcc			16		/* GPT: Header BCC (DWORD) */
 215:Src/ff.c      **** #define GPTH_CurLba			24		/* GPT: Main header LBA (QWORD) */
 216:Src/ff.c      **** #define GPTH_BakLba			32		/* GPT: Backup header LBA (QWORD) */
 217:Src/ff.c      **** #define GPTH_FstLba			40		/* GPT: First LBA for partitions (QWORD) */
 218:Src/ff.c      **** #define GPTH_LstLba			48		/* GPT: Last LBA for partitions (QWORD) */
 219:Src/ff.c      **** #define GPTH_DskGuid		56		/* GPT: Disk GUID (16-byte) */
 220:Src/ff.c      **** #define GPTH_PtOfs			72		/* GPT: Partation table LBA (QWORD) */
 221:Src/ff.c      **** #define GPTH_PtNum			80		/* GPT: Number of table entries (DWORD) */
 222:Src/ff.c      **** #define GPTH_PteSize		84		/* GPT: Size of table entry (DWORD) */
 223:Src/ff.c      **** #define GPTH_PtBcc			88		/* GPT: Partation table BCC (DWORD) */
 224:Src/ff.c      **** #define SZ_GPTE				128		/* GPT: Size of partition table entry */
 225:Src/ff.c      **** #define GPTE_PtGuid			0		/* GPT PTE: Partition type GUID (16-byte) */
 226:Src/ff.c      **** #define GPTE_UpGuid			16		/* GPT PTE: Partition unique GUID (16-byte) */
 227:Src/ff.c      **** #define GPTE_FstLba			32		/* GPT PTE: First LBA (QWORD) */
 228:Src/ff.c      **** #define GPTE_LstLba			40		/* GPT PTE: Last LBA inclusive (QWORD) */
 229:Src/ff.c      **** #define GPTE_Flags			48		/* GPT PTE: Flags (QWORD) */
 230:Src/ff.c      **** #define GPTE_Name			56		/* GPT PTE: Name */
 231:Src/ff.c      **** 
 232:Src/ff.c      **** 
 233:Src/ff.c      **** /* Post process on fatal error in the file operations */
 234:Src/ff.c      **** #define ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 235:Src/ff.c      **** 
 236:Src/ff.c      **** 
 237:Src/ff.c      **** /* Re-entrancy related */
 238:Src/ff.c      **** #if FF_FS_REENTRANT
 239:Src/ff.c      **** #if FF_USE_LFN == 1
 240:Src/ff.c      **** #error Static LFN work area cannot be used in thread-safe configuration
 241:Src/ff.c      **** #endif
 242:Src/ff.c      **** #define LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 243:Src/ff.c      **** #else
 244:Src/ff.c      **** #define LEAVE_FF(fs, res)	return res
 245:Src/ff.c      **** #endif
 246:Src/ff.c      **** 
 247:Src/ff.c      **** 
 248:Src/ff.c      **** /* Definitions of logical drive - physical location conversion */
 249:Src/ff.c      **** #if FF_MULTI_PARTITION
 250:Src/ff.c      **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 251:Src/ff.c      **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition number (0:auto search, 1..:forced partition n
 252:Src/ff.c      **** #else
 253:Src/ff.c      **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is associated with the same physical drive num
 254:Src/ff.c      **** #define LD2PT(vol) 0			/* Auto partition search */
 255:Src/ff.c      **** #endif
 256:Src/ff.c      **** 
 257:Src/ff.c      **** 
 258:Src/ff.c      **** /* Definitions of sector size */
 259:Src/ff.c      **** #if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MA
 260:Src/ff.c      **** #error Wrong sector size configuration
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 6


 261:Src/ff.c      **** #endif
 262:Src/ff.c      **** #if FF_MAX_SS == FF_MIN_SS
 263:Src/ff.c      **** #define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
 264:Src/ff.c      **** #else
 265:Src/ff.c      **** #define SS(fs)	((fs)->ssize)	/* Variable sector size */
 266:Src/ff.c      **** #endif
 267:Src/ff.c      **** 
 268:Src/ff.c      **** 
 269:Src/ff.c      **** /* Timestamp */
 270:Src/ff.c      **** #if FF_FS_NORTC == 1
 271:Src/ff.c      **** #if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NOR
 272:Src/ff.c      **** #error Invalid FF_FS_NORTC settings
 273:Src/ff.c      **** #endif
 274:Src/ff.c      **** #define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_
 275:Src/ff.c      **** #else
 276:Src/ff.c      **** #define GET_FATTIME()	get_fattime()
 277:Src/ff.c      **** #endif
 278:Src/ff.c      **** 
 279:Src/ff.c      **** 
 280:Src/ff.c      **** /* File lock controls */
 281:Src/ff.c      **** #if FF_FS_LOCK != 0
 282:Src/ff.c      **** #if FF_FS_READONLY
 283:Src/ff.c      **** #error FF_FS_LOCK must be 0 at read-only configuration
 284:Src/ff.c      **** #endif
 285:Src/ff.c      **** typedef struct {
 286:Src/ff.c      **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 287:Src/ff.c      **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 288:Src/ff.c      **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 289:Src/ff.c      **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 290:Src/ff.c      **** } FILESEM;
 291:Src/ff.c      **** #endif
 292:Src/ff.c      **** 
 293:Src/ff.c      **** 
 294:Src/ff.c      **** /* SBCS up-case tables (\x80-\xFF) */
 295:Src/ff.c      **** #define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 296:Src/ff.c      **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 297:Src/ff.c      **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 298:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 299:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 300:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 301:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 302:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 303:Src/ff.c      **** #define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 304:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 305:Src/ff.c      **** 					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 306:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 307:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 308:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 309:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 310:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 311:Src/ff.c      **** #define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 312:Src/ff.c      **** 					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 313:Src/ff.c      **** 					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 314:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 315:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 316:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 317:Src/ff.c      **** 					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 7


 318:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 319:Src/ff.c      **** #define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 320:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 321:Src/ff.c      **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 322:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 323:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 324:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 325:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 326:Src/ff.c      **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 327:Src/ff.c      **** #define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F
 328:Src/ff.c      **** 					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 329:Src/ff.c      **** 					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 330:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 331:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 332:Src/ff.c      **** 					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 333:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 334:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 335:Src/ff.c      **** #define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41
 336:Src/ff.c      **** 					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 337:Src/ff.c      **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 338:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 339:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 340:Src/ff.c      **** 					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 341:Src/ff.c      **** 					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 342:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 343:Src/ff.c      **** #define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F
 344:Src/ff.c      **** 					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 345:Src/ff.c      **** 					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 346:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 347:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 348:Src/ff.c      **** 					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 349:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 350:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 351:Src/ff.c      **** #define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F
 352:Src/ff.c      **** 					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 353:Src/ff.c      **** 					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 354:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 355:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 356:Src/ff.c      **** 					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 357:Src/ff.c      **** 					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 358:Src/ff.c      **** 					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 359:Src/ff.c      **** #define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F
 360:Src/ff.c      **** 					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 361:Src/ff.c      **** 					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 362:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 363:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 364:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 365:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 366:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 367:Src/ff.c      **** #define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F
 368:Src/ff.c      **** 					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 369:Src/ff.c      **** 					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 370:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 371:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 372:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 373:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 374:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 8


 375:Src/ff.c      **** #define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F
 376:Src/ff.c      **** 					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 377:Src/ff.c      **** 					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 378:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 379:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 380:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 381:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 382:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 383:Src/ff.c      **** #define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 384:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 385:Src/ff.c      **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 386:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 387:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 388:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 389:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 390:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 391:Src/ff.c      **** #define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F
 392:Src/ff.c      **** 					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 393:Src/ff.c      **** 					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 394:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 395:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 396:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 397:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 398:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 399:Src/ff.c      **** #define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 400:Src/ff.c      **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 401:Src/ff.c      **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 402:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 403:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 404:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 405:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 406:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 407:Src/ff.c      **** #define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 408:Src/ff.c      **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 409:Src/ff.c      **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 410:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 411:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 412:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 413:Src/ff.c      **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 414:Src/ff.c      **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 415:Src/ff.c      **** #define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 416:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 417:Src/ff.c      **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 418:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 419:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 420:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 421:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 422:Src/ff.c      **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 423:Src/ff.c      **** #define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 424:Src/ff.c      **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 425:Src/ff.c      **** 					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 426:Src/ff.c      **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 427:Src/ff.c      **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 428:Src/ff.c      **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 429:Src/ff.c      **** 					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 430:Src/ff.c      **** 					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 431:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 9


 432:Src/ff.c      **** 
 433:Src/ff.c      **** /* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
 434:Src/ff.c      **** /*                  <------>    <------>    <------>    <------>    <------>  */
 435:Src/ff.c      **** #define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
 436:Src/ff.c      **** #define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
 437:Src/ff.c      **** #define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
 438:Src/ff.c      **** #define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}
 439:Src/ff.c      **** 
 440:Src/ff.c      **** 
 441:Src/ff.c      **** /* Macros for table definitions */
 442:Src/ff.c      **** #define MERGE_2STR(a, b) a ## b
 443:Src/ff.c      **** #define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
 444:Src/ff.c      **** 
 445:Src/ff.c      **** 
 446:Src/ff.c      **** 
 447:Src/ff.c      **** 
 448:Src/ff.c      **** /*--------------------------------------------------------------------------
 449:Src/ff.c      **** 
 450:Src/ff.c      ****    Module Private Work Area
 451:Src/ff.c      **** 
 452:Src/ff.c      **** ---------------------------------------------------------------------------*/
 453:Src/ff.c      **** /* Remark: Variables defined here without initial value shall be guaranteed
 454:Src/ff.c      **** /  zero/null at start-up. If not, the linker option or start-up routine is
 455:Src/ff.c      **** /  not compliance with C standard. */
 456:Src/ff.c      **** 
 457:Src/ff.c      **** /*--------------------------------*/
 458:Src/ff.c      **** /* File/Volume controls           */
 459:Src/ff.c      **** /*--------------------------------*/
 460:Src/ff.c      **** 
 461:Src/ff.c      **** #if FF_VOLUMES < 1 || FF_VOLUMES > 10
 462:Src/ff.c      **** #error Wrong FF_VOLUMES setting
 463:Src/ff.c      **** #endif
 464:Src/ff.c      **** static FATFS* FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
 465:Src/ff.c      **** static WORD Fsid;					/* Filesystem mount ID */
 466:Src/ff.c      **** 
 467:Src/ff.c      **** #if FF_FS_RPATH != 0
 468:Src/ff.c      **** static BYTE CurrVol;				/* Current drive */
 469:Src/ff.c      **** #endif
 470:Src/ff.c      **** 
 471:Src/ff.c      **** #if FF_FS_LOCK != 0
 472:Src/ff.c      **** static FILESEM Files[FF_FS_LOCK];	/* Open object lock semaphores */
 473:Src/ff.c      **** #endif
 474:Src/ff.c      **** 
 475:Src/ff.c      **** #if FF_STR_VOLUME_ID
 476:Src/ff.c      **** #ifdef FF_VOLUME_STRS
 477:Src/ff.c      **** static const char* const VolumeStr[FF_VOLUMES] = {FF_VOLUME_STRS};	/* Pre-defined volume ID */
 478:Src/ff.c      **** #endif
 479:Src/ff.c      **** #endif
 480:Src/ff.c      **** 
 481:Src/ff.c      **** #if FF_LBA64
 482:Src/ff.c      **** #if FF_MIN_GPT > 0x100000000
 483:Src/ff.c      **** #error Wrong FF_MIN_GPT setting
 484:Src/ff.c      **** #endif
 485:Src/ff.c      **** static const BYTE GUID_MS_Basic[16] = {0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,0x87,0xC0,0x68,0xB6,
 486:Src/ff.c      **** #endif
 487:Src/ff.c      **** 
 488:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 10


 489:Src/ff.c      **** 
 490:Src/ff.c      **** /*--------------------------------*/
 491:Src/ff.c      **** /* LFN/Directory working buffer   */
 492:Src/ff.c      **** /*--------------------------------*/
 493:Src/ff.c      **** 
 494:Src/ff.c      **** #if FF_USE_LFN == 0		/* Non-LFN configuration */
 495:Src/ff.c      **** #if FF_FS_EXFAT
 496:Src/ff.c      **** #error LFN must be enabled when enable exFAT
 497:Src/ff.c      **** #endif
 498:Src/ff.c      **** #define DEF_NAMBUF
 499:Src/ff.c      **** #define INIT_NAMBUF(fs)
 500:Src/ff.c      **** #define FREE_NAMBUF()
 501:Src/ff.c      **** #define LEAVE_MKFS(res)	return res
 502:Src/ff.c      **** 
 503:Src/ff.c      **** #else					/* LFN configurations */
 504:Src/ff.c      **** #if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
 505:Src/ff.c      **** #error Wrong setting of FF_MAX_LFN
 506:Src/ff.c      **** #endif
 507:Src/ff.c      **** #if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
 508:Src/ff.c      **** #error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
 509:Src/ff.c      **** #endif
 510:Src/ff.c      **** #if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
 511:Src/ff.c      **** #error Wrong setting of FF_LFN_UNICODE
 512:Src/ff.c      **** #endif
 513:Src/ff.c      **** static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* FAT: Offset of LFN characters 
 514:Src/ff.c      **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)	/* exFAT: Size of directory entry block scratchpad b
 515:Src/ff.c      **** 
 516:Src/ff.c      **** #if FF_USE_LFN == 1		/* LFN enabled with static working buffer */
 517:Src/ff.c      **** #if FF_FS_EXFAT
 518:Src/ff.c      **** static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 519:Src/ff.c      **** #endif
 520:Src/ff.c      **** static WCHAR LfnBuf[FF_MAX_LFN + 1];		/* LFN working buffer */
 521:Src/ff.c      **** #define DEF_NAMBUF
 522:Src/ff.c      **** #define INIT_NAMBUF(fs)
 523:Src/ff.c      **** #define FREE_NAMBUF()
 524:Src/ff.c      **** #define LEAVE_MKFS(res)	return res
 525:Src/ff.c      **** 
 526:Src/ff.c      **** #elif FF_USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 527:Src/ff.c      **** #if FF_FS_EXFAT
 528:Src/ff.c      **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working buffer
 529:Src/ff.c      **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 530:Src/ff.c      **** #define FREE_NAMBUF()
 531:Src/ff.c      **** #else
 532:Src/ff.c      **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1];	/* LFN working buffer */
 533:Src/ff.c      **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 534:Src/ff.c      **** #define FREE_NAMBUF()
 535:Src/ff.c      **** #endif
 536:Src/ff.c      **** #define LEAVE_MKFS(res)	return res
 537:Src/ff.c      **** 
 538:Src/ff.c      **** #elif FF_USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 539:Src/ff.c      **** #if FF_FS_EXFAT
 540:Src/ff.c      **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer and directory entry block scratchp
 541:Src/ff.c      **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAV
 542:Src/ff.c      **** #define FREE_NAMBUF()	ff_memfree(lfn)
 543:Src/ff.c      **** #else
 544:Src/ff.c      **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer */
 545:Src/ff.c      **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 11


 546:Src/ff.c      **** #define FREE_NAMBUF()	ff_memfree(lfn)
 547:Src/ff.c      **** #endif
 548:Src/ff.c      **** #define LEAVE_MKFS(res)	{ if (!work) ff_memfree(buf); return res; }
 549:Src/ff.c      **** #define MAX_MALLOC	0x8000	/* Must be >=FF_MAX_SS */
 550:Src/ff.c      **** 
 551:Src/ff.c      **** #else
 552:Src/ff.c      **** #error Wrong setting of FF_USE_LFN
 553:Src/ff.c      **** 
 554:Src/ff.c      **** #endif	/* FF_USE_LFN == 1 */
 555:Src/ff.c      **** #endif	/* FF_USE_LFN == 0 */
 556:Src/ff.c      **** 
 557:Src/ff.c      **** 
 558:Src/ff.c      **** 
 559:Src/ff.c      **** /*--------------------------------*/
 560:Src/ff.c      **** /* Code conversion tables         */
 561:Src/ff.c      **** /*--------------------------------*/
 562:Src/ff.c      **** 
 563:Src/ff.c      **** #if FF_CODE_PAGE == 0	/* Run-time code page configuration */
 564:Src/ff.c      **** #define CODEPAGE CodePage
 565:Src/ff.c      **** static WORD CodePage;	/* Current code page */
 566:Src/ff.c      **** static const BYTE *ExCvt, *DbcTbl;	/* Pointer to current SBCS up-case table and DBCS code range tab
 567:Src/ff.c      **** 
 568:Src/ff.c      **** static const BYTE Ct437[] = TBL_CT437;
 569:Src/ff.c      **** static const BYTE Ct720[] = TBL_CT720;
 570:Src/ff.c      **** static const BYTE Ct737[] = TBL_CT737;
 571:Src/ff.c      **** static const BYTE Ct771[] = TBL_CT771;
 572:Src/ff.c      **** static const BYTE Ct775[] = TBL_CT775;
 573:Src/ff.c      **** static const BYTE Ct850[] = TBL_CT850;
 574:Src/ff.c      **** static const BYTE Ct852[] = TBL_CT852;
 575:Src/ff.c      **** static const BYTE Ct855[] = TBL_CT855;
 576:Src/ff.c      **** static const BYTE Ct857[] = TBL_CT857;
 577:Src/ff.c      **** static const BYTE Ct860[] = TBL_CT860;
 578:Src/ff.c      **** static const BYTE Ct861[] = TBL_CT861;
 579:Src/ff.c      **** static const BYTE Ct862[] = TBL_CT862;
 580:Src/ff.c      **** static const BYTE Ct863[] = TBL_CT863;
 581:Src/ff.c      **** static const BYTE Ct864[] = TBL_CT864;
 582:Src/ff.c      **** static const BYTE Ct865[] = TBL_CT865;
 583:Src/ff.c      **** static const BYTE Ct866[] = TBL_CT866;
 584:Src/ff.c      **** static const BYTE Ct869[] = TBL_CT869;
 585:Src/ff.c      **** static const BYTE Dc932[] = TBL_DC932;
 586:Src/ff.c      **** static const BYTE Dc936[] = TBL_DC936;
 587:Src/ff.c      **** static const BYTE Dc949[] = TBL_DC949;
 588:Src/ff.c      **** static const BYTE Dc950[] = TBL_DC950;
 589:Src/ff.c      **** 
 590:Src/ff.c      **** #elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
 591:Src/ff.c      **** #define CODEPAGE FF_CODE_PAGE
 592:Src/ff.c      **** static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
 593:Src/ff.c      **** 
 594:Src/ff.c      **** #else					/* Static code page configuration (DBCS) */
 595:Src/ff.c      **** #define CODEPAGE FF_CODE_PAGE
 596:Src/ff.c      **** static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);
 597:Src/ff.c      **** 
 598:Src/ff.c      **** #endif
 599:Src/ff.c      **** 
 600:Src/ff.c      **** 
 601:Src/ff.c      **** 
 602:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 12


 603:Src/ff.c      **** /*--------------------------------------------------------------------------
 604:Src/ff.c      **** 
 605:Src/ff.c      ****    Module Private Functions
 606:Src/ff.c      **** 
 607:Src/ff.c      **** ---------------------------------------------------------------------------*/
 608:Src/ff.c      **** 
 609:Src/ff.c      **** 
 610:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 611:Src/ff.c      **** /* Load/Store multi-byte word in the FAT structure                       */
 612:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 613:Src/ff.c      **** 
 614:Src/ff.c      **** static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 615:Src/ff.c      **** {
  27              		.loc 1 615 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 616:Src/ff.c      **** 	WORD rv;
  32              		.loc 1 616 2 view .LVU1
 617:Src/ff.c      **** 
 618:Src/ff.c      **** 	rv = ptr[1];
  33              		.loc 1 618 2 view .LVU2
  34              		.loc 1 618 10 is_stmt 0 view .LVU3
  35 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  36              	.LVL1:
 619:Src/ff.c      **** 	rv = rv << 8 | ptr[0];
  37              		.loc 1 619 2 is_stmt 1 view .LVU4
  38              		.loc 1 619 20 is_stmt 0 view .LVU5
  39 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  40              	.LVL2:
 620:Src/ff.c      **** 	return rv;
  41              		.loc 1 620 2 is_stmt 1 view .LVU6
 621:Src/ff.c      **** }
  42              		.loc 1 621 1 is_stmt 0 view .LVU7
  43 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  44              	.LVL3:
  45              		.loc 1 621 1 view .LVU8
  46 0008 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.ld_dword,"ax",%progbits
  51              		.align	1
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu softvfp
  57              	ld_dword:
  58              	.LVL4:
  59              	.LFB1:
 622:Src/ff.c      **** 
 623:Src/ff.c      **** static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 624:Src/ff.c      **** {
  60              		.loc 1 624 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 13


  64              		@ link register save eliminated.
 625:Src/ff.c      **** 	DWORD rv;
  65              		.loc 1 625 2 view .LVU10
 626:Src/ff.c      **** 
 627:Src/ff.c      **** 	rv = ptr[3];
  66              		.loc 1 627 2 view .LVU11
  67              		.loc 1 627 10 is_stmt 0 view .LVU12
  68 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  69              	.LVL5:
 628:Src/ff.c      **** 	rv = rv << 8 | ptr[2];
  70              		.loc 1 628 2 is_stmt 1 view .LVU13
  71              		.loc 1 628 20 is_stmt 0 view .LVU14
  72 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  73              		.loc 1 628 5 view .LVU15
  74 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  75              	.LVL6:
 629:Src/ff.c      **** 	rv = rv << 8 | ptr[1];
  76              		.loc 1 629 2 is_stmt 1 view .LVU16
  77              		.loc 1 629 20 is_stmt 0 view .LVU17
  78 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  79              		.loc 1 629 5 view .LVU18
  80 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  81              	.LVL7:
 630:Src/ff.c      **** 	rv = rv << 8 | ptr[0];
  82              		.loc 1 630 2 is_stmt 1 view .LVU19
  83              		.loc 1 630 20 is_stmt 0 view .LVU20
  84 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  85              	.LVL8:
 631:Src/ff.c      **** 	return rv;
  86              		.loc 1 631 2 is_stmt 1 view .LVU21
 632:Src/ff.c      **** }
  87              		.loc 1 632 1 is_stmt 0 view .LVU22
  88 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  89              	.LVL9:
  90              		.loc 1 632 1 view .LVU23
  91 0014 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE1:
  95              		.section	.text.st_word,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu softvfp
 102              	st_word:
 103              	.LVL10:
 104              	.LFB2:
 633:Src/ff.c      **** 
 634:Src/ff.c      **** #if FF_FS_EXFAT
 635:Src/ff.c      **** static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 636:Src/ff.c      **** {
 637:Src/ff.c      **** 	QWORD rv;
 638:Src/ff.c      **** 
 639:Src/ff.c      **** 	rv = ptr[7];
 640:Src/ff.c      **** 	rv = rv << 8 | ptr[6];
 641:Src/ff.c      **** 	rv = rv << 8 | ptr[5];
 642:Src/ff.c      **** 	rv = rv << 8 | ptr[4];
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 14


 643:Src/ff.c      **** 	rv = rv << 8 | ptr[3];
 644:Src/ff.c      **** 	rv = rv << 8 | ptr[2];
 645:Src/ff.c      **** 	rv = rv << 8 | ptr[1];
 646:Src/ff.c      **** 	rv = rv << 8 | ptr[0];
 647:Src/ff.c      **** 	return rv;
 648:Src/ff.c      **** }
 649:Src/ff.c      **** #endif
 650:Src/ff.c      **** 
 651:Src/ff.c      **** #if !FF_FS_READONLY
 652:Src/ff.c      **** static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 653:Src/ff.c      **** {
 105              		.loc 1 653 1 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 654:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 110              		.loc 1 654 2 view .LVU25
 111              		.loc 1 654 9 is_stmt 0 view .LVU26
 112 0000 0170     		strb	r1, [r0]
 113              		.loc 1 654 22 is_stmt 1 view .LVU27
 114              	.LVL11:
 655:Src/ff.c      **** 	*ptr++ = (BYTE)val;
 115              		.loc 1 655 2 view .LVU28
 116              		.loc 1 655 11 is_stmt 0 view .LVU29
 117 0002 090A     		lsrs	r1, r1, #8
 118              	.LVL12:
 119              		.loc 1 655 9 view .LVU30
 120 0004 4170     		strb	r1, [r0, #1]
 656:Src/ff.c      **** }
 121              		.loc 1 656 1 view .LVU31
 122 0006 7047     		bx	lr
 123              		.cfi_endproc
 124              	.LFE2:
 126              		.section	.text.st_dword,"ax",%progbits
 127              		.align	1
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu softvfp
 133              	st_dword:
 134              	.LVL13:
 135              	.LFB3:
 657:Src/ff.c      **** 
 658:Src/ff.c      **** static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 659:Src/ff.c      **** {
 136              		.loc 1 659 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 660:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 141              		.loc 1 660 2 view .LVU33
 142              		.loc 1 660 9 is_stmt 0 view .LVU34
 143 0000 0170     		strb	r1, [r0]
 144              		.loc 1 660 22 is_stmt 1 view .LVU35
 145              	.LVL14:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 15


 661:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 146              		.loc 1 661 2 view .LVU36
 147              		.loc 1 661 11 is_stmt 0 view .LVU37
 148 0002 C1F30723 		ubfx	r3, r1, #8, #8
 149              		.loc 1 661 9 view .LVU38
 150 0006 4370     		strb	r3, [r0, #1]
 151              		.loc 1 661 22 is_stmt 1 view .LVU39
 152              	.LVL15:
 662:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 153              		.loc 1 662 2 view .LVU40
 154              		.loc 1 662 11 is_stmt 0 view .LVU41
 155 0008 C1F30743 		ubfx	r3, r1, #16, #8
 156              		.loc 1 662 9 view .LVU42
 157 000c 8370     		strb	r3, [r0, #2]
 158              		.loc 1 662 22 is_stmt 1 view .LVU43
 159              	.LVL16:
 663:Src/ff.c      **** 	*ptr++ = (BYTE)val;
 160              		.loc 1 663 2 view .LVU44
 161              		.loc 1 663 11 is_stmt 0 view .LVU45
 162 000e 090E     		lsrs	r1, r1, #24
 163              	.LVL17:
 164              		.loc 1 663 9 view .LVU46
 165 0010 C170     		strb	r1, [r0, #3]
 664:Src/ff.c      **** }
 166              		.loc 1 664 1 view .LVU47
 167 0012 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE3:
 171              		.section	.text.dbc_1st,"ax",%progbits
 172              		.align	1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu softvfp
 178              	dbc_1st:
 179              	.LVL18:
 180              	.LFB4:
 665:Src/ff.c      **** 
 666:Src/ff.c      **** #if FF_FS_EXFAT
 667:Src/ff.c      **** static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 668:Src/ff.c      **** {
 669:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 670:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 671:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 672:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 673:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 674:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 675:Src/ff.c      **** 	*ptr++ = (BYTE)val; val >>= 8;
 676:Src/ff.c      **** 	*ptr++ = (BYTE)val;
 677:Src/ff.c      **** }
 678:Src/ff.c      **** #endif
 679:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
 680:Src/ff.c      **** 
 681:Src/ff.c      **** 
 682:Src/ff.c      **** 
 683:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 684:Src/ff.c      **** /* String functions                                                      */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 16


 685:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 686:Src/ff.c      **** 
 687:Src/ff.c      **** /* Test if the byte is DBC 1st byte */
 688:Src/ff.c      **** static int dbc_1st (BYTE c)
 689:Src/ff.c      **** {
 181              		.loc 1 689 1 is_stmt 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 690:Src/ff.c      **** #if FF_CODE_PAGE == 0		/* Variable code page */
 691:Src/ff.c      **** 	if (DbcTbl && c >= DbcTbl[0]) {
 692:Src/ff.c      **** 		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 693:Src/ff.c      **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 694:Src/ff.c      **** 	}
 695:Src/ff.c      **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 696:Src/ff.c      **** 	if (c >= DbcTbl[0]) {
 186              		.loc 1 696 2 view .LVU49
 187              		.loc 1 696 5 is_stmt 0 view .LVU50
 188 0000 8028     		cmp	r0, #128
 189 0002 07D9     		bls	.L7
 697:Src/ff.c      **** 		if (c <= DbcTbl[1]) return 1;
 190              		.loc 1 697 3 is_stmt 1 view .LVU51
 191              		.loc 1 697 6 is_stmt 0 view .LVU52
 192 0004 9F28     		cmp	r0, #159
 193 0006 07D9     		bls	.L8
 698:Src/ff.c      **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 194              		.loc 1 698 3 is_stmt 1 view .LVU53
 195              		.loc 1 698 6 is_stmt 0 view .LVU54
 196 0008 DF28     		cmp	r0, #223
 197 000a 07D9     		bls	.L9
 198              		.loc 1 698 22 discriminator 1 view .LVU55
 199 000c FC28     		cmp	r0, #252
 200 000e 07D9     		bls	.L10
 699:Src/ff.c      **** 	}
 700:Src/ff.c      **** #else						/* SBCS fixed code page */
 701:Src/ff.c      **** 	if (c != 0) return 0;	/* Always false */
 702:Src/ff.c      **** #endif
 703:Src/ff.c      **** 	return 0;
 201              		.loc 1 703 9 view .LVU56
 202 0010 0020     		movs	r0, #0
 203              	.LVL19:
 204              		.loc 1 703 9 view .LVU57
 205 0012 7047     		bx	lr
 206              	.LVL20:
 207              	.L7:
 208              		.loc 1 703 9 view .LVU58
 209 0014 0020     		movs	r0, #0
 210              	.LVL21:
 211              		.loc 1 703 9 view .LVU59
 212 0016 7047     		bx	lr
 213              	.LVL22:
 214              	.L8:
 697:Src/ff.c      **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 215              		.loc 1 697 30 view .LVU60
 216 0018 0120     		movs	r0, #1
 217              	.LVL23:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 17


 697:Src/ff.c      **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 218              		.loc 1 697 30 view .LVU61
 219 001a 7047     		bx	lr
 220              	.LVL24:
 221              	.L9:
 222              		.loc 1 703 9 view .LVU62
 223 001c 0020     		movs	r0, #0
 224              	.LVL25:
 225              		.loc 1 703 9 view .LVU63
 226 001e 7047     		bx	lr
 227              	.LVL26:
 228              	.L10:
 698:Src/ff.c      **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 229              		.loc 1 698 48 view .LVU64
 230 0020 0120     		movs	r0, #1
 231              	.LVL27:
 704:Src/ff.c      **** }
 232              		.loc 1 704 1 view .LVU65
 233 0022 7047     		bx	lr
 234              		.cfi_endproc
 235              	.LFE4:
 237              		.section	.text.dbc_2nd,"ax",%progbits
 238              		.align	1
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	dbc_2nd:
 245              	.LVL28:
 246              	.LFB5:
 705:Src/ff.c      **** 
 706:Src/ff.c      **** 
 707:Src/ff.c      **** /* Test if the byte is DBC 2nd byte */
 708:Src/ff.c      **** static int dbc_2nd (BYTE c)
 709:Src/ff.c      **** {
 247              		.loc 1 709 1 is_stmt 1 view -0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 710:Src/ff.c      **** #if FF_CODE_PAGE == 0		/* Variable code page */
 711:Src/ff.c      **** 	if (DbcTbl && c >= DbcTbl[4]) {
 712:Src/ff.c      **** 		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 713:Src/ff.c      **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 714:Src/ff.c      **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 715:Src/ff.c      **** 	}
 716:Src/ff.c      **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 717:Src/ff.c      **** 	if (c >= DbcTbl[4]) {
 252              		.loc 1 717 2 view .LVU67
 253              		.loc 1 717 5 is_stmt 0 view .LVU68
 254 0000 3F28     		cmp	r0, #63
 255 0002 0BD9     		bls	.L14
 718:Src/ff.c      **** 		if (c <= DbcTbl[5]) return 1;
 256              		.loc 1 718 3 is_stmt 1 view .LVU69
 257              		.loc 1 718 6 is_stmt 0 view .LVU70
 258 0004 7E28     		cmp	r0, #126
 259 0006 0BD9     		bls	.L15
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 18


 719:Src/ff.c      **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 260              		.loc 1 719 3 is_stmt 1 view .LVU71
 261              		.loc 1 719 6 is_stmt 0 view .LVU72
 262 0008 10F0800F 		tst	r0, #128
 263 000c 02D1     		bne	.L18
 264              	.L13:
 720:Src/ff.c      **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 265              		.loc 1 720 3 is_stmt 1 discriminator 1 view .LVU73
 266              		.loc 1 720 22 is_stmt 0 discriminator 1 view .LVU74
 267 000e 48B1     		cbz	r0, .L17
 721:Src/ff.c      **** 	}
 722:Src/ff.c      **** #else						/* SBCS fixed code page */
 723:Src/ff.c      **** 	if (c != 0) return 0;	/* Always false */
 724:Src/ff.c      **** #endif
 725:Src/ff.c      **** 	return 0;
 268              		.loc 1 725 9 view .LVU75
 269 0010 0020     		movs	r0, #0
 270              	.LVL29:
 271              		.loc 1 725 9 view .LVU76
 272 0012 7047     		bx	lr
 273              	.LVL30:
 274              	.L18:
 719:Src/ff.c      **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 275              		.loc 1 719 22 discriminator 1 view .LVU77
 276 0014 FC28     		cmp	r0, #252
 277 0016 FAD8     		bhi	.L13
 719:Src/ff.c      **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 278              		.loc 1 719 48 view .LVU78
 279 0018 0120     		movs	r0, #1
 280              	.LVL31:
 719:Src/ff.c      **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 281              		.loc 1 719 48 view .LVU79
 282 001a 7047     		bx	lr
 283              	.LVL32:
 284              	.L14:
 285              		.loc 1 725 9 view .LVU80
 286 001c 0020     		movs	r0, #0
 287              	.LVL33:
 288              		.loc 1 725 9 view .LVU81
 289 001e 7047     		bx	lr
 290              	.LVL34:
 291              	.L15:
 718:Src/ff.c      **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 292              		.loc 1 718 30 view .LVU82
 293 0020 0120     		movs	r0, #1
 294              	.LVL35:
 718:Src/ff.c      **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 295              		.loc 1 718 30 view .LVU83
 296 0022 7047     		bx	lr
 297              	.LVL36:
 298              	.L17:
 720:Src/ff.c      **** 	}
 299              		.loc 1 720 48 view .LVU84
 300 0024 0120     		movs	r0, #1
 301              	.LVL37:
 726:Src/ff.c      **** }
 302              		.loc 1 726 1 view .LVU85
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 19


 303 0026 7047     		bx	lr
 304              		.cfi_endproc
 305              	.LFE5:
 307              		.section	.text.clst2sect,"ax",%progbits
 308              		.align	1
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu softvfp
 314              	clst2sect:
 315              	.LVL38:
 316              	.LFB11:
 727:Src/ff.c      **** 
 728:Src/ff.c      **** 
 729:Src/ff.c      **** #if FF_USE_LFN
 730:Src/ff.c      **** 
 731:Src/ff.c      **** /* Get a Unicode code point from the TCHAR string in defined API encodeing */
 732:Src/ff.c      **** static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0x
 733:Src/ff.c      **** 	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
 734:Src/ff.c      **** )
 735:Src/ff.c      **** {
 736:Src/ff.c      **** 	DWORD uc;
 737:Src/ff.c      **** 	const TCHAR *p = *str;
 738:Src/ff.c      **** 
 739:Src/ff.c      **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
 740:Src/ff.c      **** 	WCHAR wc;
 741:Src/ff.c      **** 
 742:Src/ff.c      **** 	uc = *p++;	/* Get a unit */
 743:Src/ff.c      **** 	if (IsSurrogate(uc)) {	/* Surrogate? */
 744:Src/ff.c      **** 		wc = *p++;		/* Get low surrogate */
 745:Src/ff.c      **** 		if (!IsSurrogateH(uc) || !IsSurrogateL(wc)) return 0xFFFFFFFF;	/* Wrong surrogate? */
 746:Src/ff.c      **** 		uc = uc << 16 | wc;
 747:Src/ff.c      **** 	}
 748:Src/ff.c      **** 
 749:Src/ff.c      **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
 750:Src/ff.c      **** 	BYTE b;
 751:Src/ff.c      **** 	int nf;
 752:Src/ff.c      **** 
 753:Src/ff.c      **** 	uc = (BYTE)*p++;	/* Get an encoding unit */
 754:Src/ff.c      **** 	if (uc & 0x80) {	/* Multiple byte code? */
 755:Src/ff.c      **** 		if        ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 756:Src/ff.c      **** 			uc &= 0x1F; nf = 1;
 757:Src/ff.c      **** 		} else if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 758:Src/ff.c      **** 			uc &= 0x0F; nf = 2;
 759:Src/ff.c      **** 		} else if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 760:Src/ff.c      **** 			uc &= 0x07; nf = 3;
 761:Src/ff.c      **** 		} else {							/* Wrong sequence */
 762:Src/ff.c      **** 			return 0xFFFFFFFF;
 763:Src/ff.c      **** 		}
 764:Src/ff.c      **** 		do {	/* Get trailing bytes */
 765:Src/ff.c      **** 			b = (BYTE)*p++;
 766:Src/ff.c      **** 			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 767:Src/ff.c      **** 			uc = uc << 6 | (b & 0x3F);
 768:Src/ff.c      **** 		} while (--nf != 0);
 769:Src/ff.c      **** 		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 770:Src/ff.c      **** 		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a
 771:Src/ff.c      **** 	}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 20


 772:Src/ff.c      **** 
 773:Src/ff.c      **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
 774:Src/ff.c      **** 	uc = (TCHAR)*p++;	/* Get a unit */
 775:Src/ff.c      **** 	if (uc >= 0x110000 || IsSurrogate(uc)) return 0xFFFFFFFF;	/* Wrong code? */
 776:Src/ff.c      **** 	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a 
 777:Src/ff.c      **** 
 778:Src/ff.c      **** #else		/* ANSI/OEM input */
 779:Src/ff.c      **** 	BYTE b;
 780:Src/ff.c      **** 	WCHAR wc;
 781:Src/ff.c      **** 
 782:Src/ff.c      **** 	wc = (BYTE)*p++;			/* Get a byte */
 783:Src/ff.c      **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 784:Src/ff.c      **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 785:Src/ff.c      **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 786:Src/ff.c      **** 		wc = (wc << 8) + b;		/* Make a DBC */
 787:Src/ff.c      **** 	}
 788:Src/ff.c      **** 	if (wc != 0) {
 789:Src/ff.c      **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 790:Src/ff.c      **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 791:Src/ff.c      **** 	}
 792:Src/ff.c      **** 	uc = wc;
 793:Src/ff.c      **** 
 794:Src/ff.c      **** #endif
 795:Src/ff.c      **** 	*str = p;	/* Next read pointer */
 796:Src/ff.c      **** 	return uc;
 797:Src/ff.c      **** }
 798:Src/ff.c      **** 
 799:Src/ff.c      **** 
 800:Src/ff.c      **** /* Store a Unicode char in defined API encoding */
 801:Src/ff.c      **** static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encod
 802:Src/ff.c      **** 	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
 803:Src/ff.c      **** 	TCHAR* buf,	/* Output buffer */
 804:Src/ff.c      **** 	UINT szb	/* Size of the buffer */
 805:Src/ff.c      **** )
 806:Src/ff.c      **** {
 807:Src/ff.c      **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 808:Src/ff.c      **** 	WCHAR hs, wc;
 809:Src/ff.c      **** 
 810:Src/ff.c      **** 	hs = (WCHAR)(chr >> 16);
 811:Src/ff.c      **** 	wc = (WCHAR)chr;
 812:Src/ff.c      **** 	if (hs == 0) {	/* Single encoding unit? */
 813:Src/ff.c      **** 		if (szb < 1 || IsSurrogate(wc)) return 0;	/* Buffer overflow or wrong code? */
 814:Src/ff.c      **** 		*buf = wc;
 815:Src/ff.c      **** 		return 1;
 816:Src/ff.c      **** 	}
 817:Src/ff.c      **** 	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogateL(wc)) return 0;	/* Buffer overflow or wrong surro
 818:Src/ff.c      **** 	*buf++ = hs;
 819:Src/ff.c      **** 	*buf++ = wc;
 820:Src/ff.c      **** 	return 2;
 821:Src/ff.c      **** 
 822:Src/ff.c      **** #elif FF_LFN_UNICODE == 2	/* UTF-8 output */
 823:Src/ff.c      **** 	DWORD hc;
 824:Src/ff.c      **** 
 825:Src/ff.c      **** 	if (chr < 0x80) {	/* Single byte code? */
 826:Src/ff.c      **** 		if (szb < 1) return 0;	/* Buffer overflow? */
 827:Src/ff.c      **** 		*buf = (TCHAR)chr;
 828:Src/ff.c      **** 		return 1;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 21


 829:Src/ff.c      **** 	}
 830:Src/ff.c      **** 	if (chr < 0x800) {	/* 2-byte sequence? */
 831:Src/ff.c      **** 		if (szb < 2) return 0;	/* Buffer overflow? */
 832:Src/ff.c      **** 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 833:Src/ff.c      **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 834:Src/ff.c      **** 		return 2;
 835:Src/ff.c      **** 	}
 836:Src/ff.c      **** 	if (chr < 0x10000) {	/* 3-byte sequence? */
 837:Src/ff.c      **** 		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 838:Src/ff.c      **** 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 839:Src/ff.c      **** 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 840:Src/ff.c      **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 841:Src/ff.c      **** 		return 3;
 842:Src/ff.c      **** 	}
 843:Src/ff.c      **** 	/* 4-byte sequence */
 844:Src/ff.c      **** 	if (szb < 4) return 0;	/* Buffer overflow? */
 845:Src/ff.c      **** 	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 846:Src/ff.c      **** 	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 847:Src/ff.c      **** 	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 848:Src/ff.c      **** 	chr = (hc | chr) + 0x10000;
 849:Src/ff.c      **** 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 850:Src/ff.c      **** 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 851:Src/ff.c      **** 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 852:Src/ff.c      **** 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 853:Src/ff.c      **** 	return 4;
 854:Src/ff.c      **** 
 855:Src/ff.c      **** #elif FF_LFN_UNICODE == 3	/* UTF-32 output */
 856:Src/ff.c      **** 	DWORD hc;
 857:Src/ff.c      **** 
 858:Src/ff.c      **** 	if (szb < 1) return 0;	/* Buffer overflow? */
 859:Src/ff.c      **** 	if (chr >= 0x10000) {	/* Out of BMP? */
 860:Src/ff.c      **** 		hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 861:Src/ff.c      **** 		chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 862:Src/ff.c      **** 		if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 863:Src/ff.c      **** 		chr = (hc | chr) + 0x10000;
 864:Src/ff.c      **** 	}
 865:Src/ff.c      **** 	*buf++ = (TCHAR)chr;
 866:Src/ff.c      **** 	return 1;
 867:Src/ff.c      **** 
 868:Src/ff.c      **** #else						/* ANSI/OEM output */
 869:Src/ff.c      **** 	WCHAR wc;
 870:Src/ff.c      **** 
 871:Src/ff.c      **** 	wc = ff_uni2oem(chr, CODEPAGE);
 872:Src/ff.c      **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 873:Src/ff.c      **** 		if (szb < 2) return 0;
 874:Src/ff.c      **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 875:Src/ff.c      **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 876:Src/ff.c      **** 		return 2;
 877:Src/ff.c      **** 	}
 878:Src/ff.c      **** 	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 879:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 880:Src/ff.c      **** 	return 1;
 881:Src/ff.c      **** #endif
 882:Src/ff.c      **** }
 883:Src/ff.c      **** #endif	/* FF_USE_LFN */
 884:Src/ff.c      **** 
 885:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 22


 886:Src/ff.c      **** #if FF_FS_REENTRANT
 887:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 888:Src/ff.c      **** /* Request/Release grant to access the volume                            */
 889:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 890:Src/ff.c      **** static int lock_fs (		/* 1:Ok, 0:timeout */
 891:Src/ff.c      **** 	FATFS* fs		/* Filesystem object */
 892:Src/ff.c      **** )
 893:Src/ff.c      **** {
 894:Src/ff.c      **** 	return ff_req_grant(fs->sobj);
 895:Src/ff.c      **** }
 896:Src/ff.c      **** 
 897:Src/ff.c      **** 
 898:Src/ff.c      **** static void unlock_fs (
 899:Src/ff.c      **** 	FATFS* fs,		/* Filesystem object */
 900:Src/ff.c      **** 	FRESULT res		/* Result code to be returned */
 901:Src/ff.c      **** )
 902:Src/ff.c      **** {
 903:Src/ff.c      **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 904:Src/ff.c      **** 		ff_rel_grant(fs->sobj);
 905:Src/ff.c      **** 	}
 906:Src/ff.c      **** }
 907:Src/ff.c      **** 
 908:Src/ff.c      **** #endif
 909:Src/ff.c      **** 
 910:Src/ff.c      **** 
 911:Src/ff.c      **** 
 912:Src/ff.c      **** #if FF_FS_LOCK != 0
 913:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 914:Src/ff.c      **** /* File lock control functions                                           */
 915:Src/ff.c      **** /*-----------------------------------------------------------------------*/
 916:Src/ff.c      **** 
 917:Src/ff.c      **** static FRESULT chk_lock (	/* Check if the file can be accessed */
 918:Src/ff.c      **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 919:Src/ff.c      **** 	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
 920:Src/ff.c      **** )
 921:Src/ff.c      **** {
 922:Src/ff.c      **** 	UINT i, be;
 923:Src/ff.c      **** 
 924:Src/ff.c      **** 	/* Search open object table for the object */
 925:Src/ff.c      **** 	be = 0;
 926:Src/ff.c      **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 927:Src/ff.c      **** 		if (Files[i].fs) {	/* Existing entry */
 928:Src/ff.c      **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 929:Src/ff.c      **** 				Files[i].clu == dp->obj.sclust &&
 930:Src/ff.c      **** 				Files[i].ofs == dp->dptr) break;
 931:Src/ff.c      **** 		} else {			/* Blank entry */
 932:Src/ff.c      **** 			be = 1;
 933:Src/ff.c      **** 		}
 934:Src/ff.c      **** 	}
 935:Src/ff.c      **** 	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 936:Src/ff.c      **** 		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new obje
 937:Src/ff.c      **** 	}
 938:Src/ff.c      **** 
 939:Src/ff.c      **** 	/* The object was opened. Reject any open against writing file and all write mode open */
 940:Src/ff.c      **** 	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 941:Src/ff.c      **** }
 942:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 23


 943:Src/ff.c      **** 
 944:Src/ff.c      **** static int enq_lock (void)	/* Check if an entry is available for a new object */
 945:Src/ff.c      **** {
 946:Src/ff.c      **** 	UINT i;
 947:Src/ff.c      **** 
 948:Src/ff.c      **** 	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 949:Src/ff.c      **** 	return (i == FF_FS_LOCK) ? 0 : 1;
 950:Src/ff.c      **** }
 951:Src/ff.c      **** 
 952:Src/ff.c      **** 
 953:Src/ff.c      **** static UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 954:Src/ff.c      **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 955:Src/ff.c      **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 956:Src/ff.c      **** )
 957:Src/ff.c      **** {
 958:Src/ff.c      **** 	UINT i;
 959:Src/ff.c      **** 
 960:Src/ff.c      **** 
 961:Src/ff.c      **** 	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 962:Src/ff.c      **** 		if (Files[i].fs == dp->obj.fs
 963:Src/ff.c      **** 		 && Files[i].clu == dp->obj.sclust
 964:Src/ff.c      **** 		 && Files[i].ofs == dp->dptr) break;
 965:Src/ff.c      **** 	}
 966:Src/ff.c      **** 
 967:Src/ff.c      **** 	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 968:Src/ff.c      **** 		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 969:Src/ff.c      **** 		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 970:Src/ff.c      **** 		Files[i].fs = dp->obj.fs;
 971:Src/ff.c      **** 		Files[i].clu = dp->obj.sclust;
 972:Src/ff.c      **** 		Files[i].ofs = dp->dptr;
 973:Src/ff.c      **** 		Files[i].ctr = 0;
 974:Src/ff.c      **** 	}
 975:Src/ff.c      **** 
 976:Src/ff.c      **** 	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 977:Src/ff.c      **** 
 978:Src/ff.c      **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 979:Src/ff.c      **** 
 980:Src/ff.c      **** 	return i + 1;	/* Index number origin from 1 */
 981:Src/ff.c      **** }
 982:Src/ff.c      **** 
 983:Src/ff.c      **** 
 984:Src/ff.c      **** static FRESULT dec_lock (	/* Decrement object open counter */
 985:Src/ff.c      **** 	UINT i			/* Semaphore index (1..) */
 986:Src/ff.c      **** )
 987:Src/ff.c      **** {
 988:Src/ff.c      **** 	WORD n;
 989:Src/ff.c      **** 	FRESULT res;
 990:Src/ff.c      **** 
 991:Src/ff.c      **** 
 992:Src/ff.c      **** 	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 993:Src/ff.c      **** 		n = Files[i].ctr;
 994:Src/ff.c      **** 		if (n == 0x100) n = 0;	/* If write mode open, delete the entry */
 995:Src/ff.c      **** 		if (n > 0) n--;			/* Decrement read mode open count */
 996:Src/ff.c      **** 		Files[i].ctr = n;
 997:Src/ff.c      **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 998:Src/ff.c      **** 		res = FR_OK;
 999:Src/ff.c      **** 	} else {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 24


1000:Src/ff.c      **** 		res = FR_INT_ERR;		/* Invalid index nunber */
1001:Src/ff.c      **** 	}
1002:Src/ff.c      **** 	return res;
1003:Src/ff.c      **** }
1004:Src/ff.c      **** 
1005:Src/ff.c      **** 
1006:Src/ff.c      **** static void clear_lock (	/* Clear lock entries of the volume */
1007:Src/ff.c      **** 	FATFS *fs
1008:Src/ff.c      **** )
1009:Src/ff.c      **** {
1010:Src/ff.c      **** 	UINT i;
1011:Src/ff.c      **** 
1012:Src/ff.c      **** 	for (i = 0; i < FF_FS_LOCK; i++) {
1013:Src/ff.c      **** 		if (Files[i].fs == fs) Files[i].fs = 0;
1014:Src/ff.c      **** 	}
1015:Src/ff.c      **** }
1016:Src/ff.c      **** 
1017:Src/ff.c      **** #endif	/* FF_FS_LOCK != 0 */
1018:Src/ff.c      **** 
1019:Src/ff.c      **** 
1020:Src/ff.c      **** 
1021:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1022:Src/ff.c      **** /* Move/Flush disk access window in the filesystem object                */
1023:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1024:Src/ff.c      **** #if !FF_FS_READONLY
1025:Src/ff.c      **** static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
1026:Src/ff.c      **** 	FATFS* fs			/* Filesystem object */
1027:Src/ff.c      **** )
1028:Src/ff.c      **** {
1029:Src/ff.c      **** 	FRESULT res = FR_OK;
1030:Src/ff.c      **** 
1031:Src/ff.c      **** 
1032:Src/ff.c      **** 	if (fs->wflag) {	/* Is the disk access window dirty? */
1033:Src/ff.c      **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
1034:Src/ff.c      **** 			fs->wflag = 0;	/* Clear window dirty flag */
1035:Src/ff.c      **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1036:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
1037:Src/ff.c      **** 			}
1038:Src/ff.c      **** 		} else {
1039:Src/ff.c      **** 			res = FR_DISK_ERR;
1040:Src/ff.c      **** 		}
1041:Src/ff.c      **** 	}
1042:Src/ff.c      **** 	return res;
1043:Src/ff.c      **** }
1044:Src/ff.c      **** #endif
1045:Src/ff.c      **** 
1046:Src/ff.c      **** 
1047:Src/ff.c      **** static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
1048:Src/ff.c      **** 	FATFS* fs,		/* Filesystem object */
1049:Src/ff.c      **** 	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
1050:Src/ff.c      **** )
1051:Src/ff.c      **** {
1052:Src/ff.c      **** 	FRESULT res = FR_OK;
1053:Src/ff.c      **** 
1054:Src/ff.c      **** 
1055:Src/ff.c      **** 	if (sect != fs->winsect) {	/* Window offset changed? */
1056:Src/ff.c      **** #if !FF_FS_READONLY
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 25


1057:Src/ff.c      **** 		res = sync_window(fs);		/* Flush the window */
1058:Src/ff.c      **** #endif
1059:Src/ff.c      **** 		if (res == FR_OK) {			/* Fill sector window with new data */
1060:Src/ff.c      **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
1061:Src/ff.c      **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
1062:Src/ff.c      **** 				res = FR_DISK_ERR;
1063:Src/ff.c      **** 			}
1064:Src/ff.c      **** 			fs->winsect = sect;
1065:Src/ff.c      **** 		}
1066:Src/ff.c      **** 	}
1067:Src/ff.c      **** 	return res;
1068:Src/ff.c      **** }
1069:Src/ff.c      **** 
1070:Src/ff.c      **** 
1071:Src/ff.c      **** 
1072:Src/ff.c      **** 
1073:Src/ff.c      **** #if !FF_FS_READONLY
1074:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1075:Src/ff.c      **** /* Synchronize filesystem and data on the storage                        */
1076:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1077:Src/ff.c      **** 
1078:Src/ff.c      **** static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
1079:Src/ff.c      **** 	FATFS* fs		/* Filesystem object */
1080:Src/ff.c      **** )
1081:Src/ff.c      **** {
1082:Src/ff.c      **** 	FRESULT res;
1083:Src/ff.c      **** 
1084:Src/ff.c      **** 
1085:Src/ff.c      **** 	res = sync_window(fs);
1086:Src/ff.c      **** 	if (res == FR_OK) {
1087:Src/ff.c      **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1088:Src/ff.c      **** 			/* Create FSInfo structure */
1089:Src/ff.c      **** 			memset(fs->win, 0, sizeof fs->win);
1090:Src/ff.c      **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
1091:Src/ff.c      **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
1092:Src/ff.c      **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
1093:Src/ff.c      **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
1094:Src/ff.c      **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
1095:Src/ff.c      **** 			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
1096:Src/ff.c      **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1097:Src/ff.c      **** 			fs->fsi_flag = 0;
1098:Src/ff.c      **** 		}
1099:Src/ff.c      **** 		/* Make sure that no pending write process in the lower layer */
1100:Src/ff.c      **** 		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1101:Src/ff.c      **** 	}
1102:Src/ff.c      **** 
1103:Src/ff.c      **** 	return res;
1104:Src/ff.c      **** }
1105:Src/ff.c      **** 
1106:Src/ff.c      **** #endif
1107:Src/ff.c      **** 
1108:Src/ff.c      **** 
1109:Src/ff.c      **** 
1110:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1111:Src/ff.c      **** /* Get physical sector number from cluster number                        */
1112:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1113:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 26


1114:Src/ff.c      **** static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
1115:Src/ff.c      **** 	FATFS* fs,		/* Filesystem object */
1116:Src/ff.c      **** 	DWORD clst		/* Cluster# to be converted */
1117:Src/ff.c      **** )
1118:Src/ff.c      **** {
 317              		.loc 1 1118 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              		@ link register save eliminated.
1119:Src/ff.c      **** 	clst -= 2;		/* Cluster number is origin from 2 */
 322              		.loc 1 1119 2 view .LVU87
 323              		.loc 1 1119 7 is_stmt 0 view .LVU88
 324 0000 0239     		subs	r1, r1, #2
 325              	.LVL39:
1120:Src/ff.c      **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 326              		.loc 1 1120 2 is_stmt 1 view .LVU89
 327              		.loc 1 1120 16 is_stmt 0 view .LVU90
 328 0002 8369     		ldr	r3, [r0, #24]
 329              		.loc 1 1120 27 view .LVU91
 330 0004 023B     		subs	r3, r3, #2
 331              		.loc 1 1120 5 view .LVU92
 332 0006 8B42     		cmp	r3, r1
 333 0008 04D9     		bls	.L21
1121:Src/ff.c      **** 	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 334              		.loc 1 1121 2 is_stmt 1 view .LVU93
 335              		.loc 1 1121 11 is_stmt 0 view .LVU94
 336 000a C36A     		ldr	r3, [r0, #44]
 337              		.loc 1 1121 33 view .LVU95
 338 000c 4089     		ldrh	r0, [r0, #10]
 339              	.LVL40:
 340              		.loc 1 1121 22 view .LVU96
 341 000e 01FB0030 		mla	r0, r1, r0, r3
 342 0012 7047     		bx	lr
 343              	.LVL41:
 344              	.L21:
1120:Src/ff.c      **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 345              		.loc 1 1120 39 view .LVU97
 346 0014 0020     		movs	r0, #0
 347              	.LVL42:
1122:Src/ff.c      **** }
 348              		.loc 1 1122 1 view .LVU98
 349 0016 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE11:
 353              		.section	.text.ld_clust,"ax",%progbits
 354              		.align	1
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu softvfp
 360              	ld_clust:
 361              	.LVL43:
 362              	.LFB20:
1123:Src/ff.c      **** 
1124:Src/ff.c      **** 
1125:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 27


1126:Src/ff.c      **** 
1127:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1128:Src/ff.c      **** /* FAT access - Read value of an FAT entry                               */
1129:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1130:Src/ff.c      **** 
1131:Src/ff.c      **** static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1132:Src/ff.c      **** 	FFOBJID* obj,	/* Corresponding object */
1133:Src/ff.c      **** 	DWORD clst		/* Cluster number to get the value */
1134:Src/ff.c      **** )
1135:Src/ff.c      **** {
1136:Src/ff.c      **** 	UINT wc, bc;
1137:Src/ff.c      **** 	DWORD val;
1138:Src/ff.c      **** 	FATFS *fs = obj->fs;
1139:Src/ff.c      **** 
1140:Src/ff.c      **** 
1141:Src/ff.c      **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1142:Src/ff.c      **** 		val = 1;	/* Internal error */
1143:Src/ff.c      **** 
1144:Src/ff.c      **** 	} else {
1145:Src/ff.c      **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1146:Src/ff.c      **** 
1147:Src/ff.c      **** 		switch (fs->fs_type) {
1148:Src/ff.c      **** 		case FS_FAT12 :
1149:Src/ff.c      **** 			bc = (UINT)clst; bc += bc / 2;
1150:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1151:Src/ff.c      **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1152:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1153:Src/ff.c      **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1154:Src/ff.c      **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1155:Src/ff.c      **** 			break;
1156:Src/ff.c      **** 
1157:Src/ff.c      **** 		case FS_FAT16 :
1158:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1159:Src/ff.c      **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1160:Src/ff.c      **** 			break;
1161:Src/ff.c      **** 
1162:Src/ff.c      **** 		case FS_FAT32 :
1163:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1164:Src/ff.c      **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
1165:Src/ff.c      **** 			break;
1166:Src/ff.c      **** #if FF_FS_EXFAT
1167:Src/ff.c      **** 		case FS_EXFAT :
1168:Src/ff.c      **** 			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must 
1169:Src/ff.c      **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1170:Src/ff.c      **** 				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters -
1171:Src/ff.c      **** 
1172:Src/ff.c      **** 				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1173:Src/ff.c      **** 					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1174:Src/ff.c      **** 					break;
1175:Src/ff.c      **** 				}
1176:Src/ff.c      **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1177:Src/ff.c      **** 					val = clst + 1; 	/* Generate the value */
1178:Src/ff.c      **** 					break;
1179:Src/ff.c      **** 				}
1180:Src/ff.c      **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1181:Src/ff.c      **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1182:Src/ff.c      **** 						val = 0x7FFFFFFF;	/* Generate EOC */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 28


1183:Src/ff.c      **** 					} else {
1184:Src/ff.c      **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1185:Src/ff.c      **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1186:Src/ff.c      **** 					}
1187:Src/ff.c      **** 					break;
1188:Src/ff.c      **** 				}
1189:Src/ff.c      **** 			}
1190:Src/ff.c      **** 			val = 1;	/* Internal error */
1191:Src/ff.c      **** 			break;
1192:Src/ff.c      **** #endif
1193:Src/ff.c      **** 		default:
1194:Src/ff.c      **** 			val = 1;	/* Internal error */
1195:Src/ff.c      **** 		}
1196:Src/ff.c      **** 	}
1197:Src/ff.c      **** 
1198:Src/ff.c      **** 	return val;
1199:Src/ff.c      **** }
1200:Src/ff.c      **** 
1201:Src/ff.c      **** 
1202:Src/ff.c      **** 
1203:Src/ff.c      **** 
1204:Src/ff.c      **** #if !FF_FS_READONLY
1205:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1206:Src/ff.c      **** /* FAT access - Change value of an FAT entry                             */
1207:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1208:Src/ff.c      **** 
1209:Src/ff.c      **** static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1210:Src/ff.c      **** 	FATFS* fs,		/* Corresponding filesystem object */
1211:Src/ff.c      **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1212:Src/ff.c      **** 	DWORD val		/* New value to be set to the entry */
1213:Src/ff.c      **** )
1214:Src/ff.c      **** {
1215:Src/ff.c      **** 	UINT bc;
1216:Src/ff.c      **** 	BYTE *p;
1217:Src/ff.c      **** 	FRESULT res = FR_INT_ERR;
1218:Src/ff.c      **** 
1219:Src/ff.c      **** 
1220:Src/ff.c      **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1221:Src/ff.c      **** 		switch (fs->fs_type) {
1222:Src/ff.c      **** 		case FS_FAT12:
1223:Src/ff.c      **** 			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1224:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1225:Src/ff.c      **** 			if (res != FR_OK) break;
1226:Src/ff.c      **** 			p = fs->win + bc++ % SS(fs);
1227:Src/ff.c      **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
1228:Src/ff.c      **** 			fs->wflag = 1;
1229:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1230:Src/ff.c      **** 			if (res != FR_OK) break;
1231:Src/ff.c      **** 			p = fs->win + bc % SS(fs);
1232:Src/ff.c      **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
1233:Src/ff.c      **** 			fs->wflag = 1;
1234:Src/ff.c      **** 			break;
1235:Src/ff.c      **** 
1236:Src/ff.c      **** 		case FS_FAT16:
1237:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1238:Src/ff.c      **** 			if (res != FR_OK) break;
1239:Src/ff.c      **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 29


1240:Src/ff.c      **** 			fs->wflag = 1;
1241:Src/ff.c      **** 			break;
1242:Src/ff.c      **** 
1243:Src/ff.c      **** 		case FS_FAT32:
1244:Src/ff.c      **** #if FF_FS_EXFAT
1245:Src/ff.c      **** 		case FS_EXFAT:
1246:Src/ff.c      **** #endif
1247:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1248:Src/ff.c      **** 			if (res != FR_OK) break;
1249:Src/ff.c      **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1250:Src/ff.c      **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1251:Src/ff.c      **** 			}
1252:Src/ff.c      **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1253:Src/ff.c      **** 			fs->wflag = 1;
1254:Src/ff.c      **** 			break;
1255:Src/ff.c      **** 		}
1256:Src/ff.c      **** 	}
1257:Src/ff.c      **** 	return res;
1258:Src/ff.c      **** }
1259:Src/ff.c      **** 
1260:Src/ff.c      **** #endif /* !FF_FS_READONLY */
1261:Src/ff.c      **** 
1262:Src/ff.c      **** 
1263:Src/ff.c      **** 
1264:Src/ff.c      **** 
1265:Src/ff.c      **** #if FF_FS_EXFAT && !FF_FS_READONLY
1266:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1267:Src/ff.c      **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1268:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1269:Src/ff.c      **** 
1270:Src/ff.c      **** /*--------------------------------------*/
1271:Src/ff.c      **** /* Find a contiguous free cluster block */
1272:Src/ff.c      **** /*--------------------------------------*/
1273:Src/ff.c      **** 
1274:Src/ff.c      **** static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1275:Src/ff.c      **** 	FATFS* fs,	/* Filesystem object */
1276:Src/ff.c      **** 	DWORD clst,	/* Cluster number to scan from */
1277:Src/ff.c      **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1278:Src/ff.c      **** )
1279:Src/ff.c      **** {
1280:Src/ff.c      **** 	BYTE bm, bv;
1281:Src/ff.c      **** 	UINT i;
1282:Src/ff.c      **** 	DWORD val, scl, ctr;
1283:Src/ff.c      **** 
1284:Src/ff.c      **** 
1285:Src/ff.c      **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1286:Src/ff.c      **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1287:Src/ff.c      **** 	scl = val = clst; ctr = 0;
1288:Src/ff.c      **** 	for (;;) {
1289:Src/ff.c      **** 		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
1290:Src/ff.c      **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1291:Src/ff.c      **** 		do {
1292:Src/ff.c      **** 			do {
1293:Src/ff.c      **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1294:Src/ff.c      **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1295:Src/ff.c      **** 					val = 0; bm = 0; i = SS(fs);
1296:Src/ff.c      **** 				}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 30


1297:Src/ff.c      **** 				if (bv == 0) {	/* Is it a free cluster? */
1298:Src/ff.c      **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1299:Src/ff.c      **** 				} else {
1300:Src/ff.c      **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1301:Src/ff.c      **** 				}
1302:Src/ff.c      **** 				if (val == clst) return 0;	/* All cluster scanned? */
1303:Src/ff.c      **** 			} while (bm != 0);
1304:Src/ff.c      **** 			bm = 1;
1305:Src/ff.c      **** 		} while (++i < SS(fs));
1306:Src/ff.c      **** 	}
1307:Src/ff.c      **** }
1308:Src/ff.c      **** 
1309:Src/ff.c      **** 
1310:Src/ff.c      **** /*----------------------------------------*/
1311:Src/ff.c      **** /* Set/Clear a block of allocation bitmap */
1312:Src/ff.c      **** /*----------------------------------------*/
1313:Src/ff.c      **** 
1314:Src/ff.c      **** static FRESULT change_bitmap (
1315:Src/ff.c      **** 	FATFS* fs,	/* Filesystem object */
1316:Src/ff.c      **** 	DWORD clst,	/* Cluster number to change from */
1317:Src/ff.c      **** 	DWORD ncl,	/* Number of clusters to be changed */
1318:Src/ff.c      **** 	int bv		/* bit value to be set (0 or 1) */
1319:Src/ff.c      **** )
1320:Src/ff.c      **** {
1321:Src/ff.c      **** 	BYTE bm;
1322:Src/ff.c      **** 	UINT i;
1323:Src/ff.c      **** 	LBA_t sect;
1324:Src/ff.c      **** 
1325:Src/ff.c      **** 
1326:Src/ff.c      **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1327:Src/ff.c      **** 	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
1328:Src/ff.c      **** 	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
1329:Src/ff.c      **** 	bm = 1 << (clst % 8);					/* Bit mask in the byte */
1330:Src/ff.c      **** 	for (;;) {
1331:Src/ff.c      **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1332:Src/ff.c      **** 		do {
1333:Src/ff.c      **** 			do {
1334:Src/ff.c      **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1335:Src/ff.c      **** 				fs->win[i] ^= bm;	/* Flip the bit */
1336:Src/ff.c      **** 				fs->wflag = 1;
1337:Src/ff.c      **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1338:Src/ff.c      **** 			} while (bm <<= 1);		/* Next bit */
1339:Src/ff.c      **** 			bm = 1;
1340:Src/ff.c      **** 		} while (++i < SS(fs));		/* Next byte */
1341:Src/ff.c      **** 		i = 0;
1342:Src/ff.c      **** 	}
1343:Src/ff.c      **** }
1344:Src/ff.c      **** 
1345:Src/ff.c      **** 
1346:Src/ff.c      **** /*---------------------------------------------*/
1347:Src/ff.c      **** /* Fill the first fragment of the FAT chain    */
1348:Src/ff.c      **** /*---------------------------------------------*/
1349:Src/ff.c      **** 
1350:Src/ff.c      **** static FRESULT fill_first_frag (
1351:Src/ff.c      **** 	FFOBJID* obj	/* Pointer to the corresponding object */
1352:Src/ff.c      **** )
1353:Src/ff.c      **** {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 31


1354:Src/ff.c      **** 	FRESULT res;
1355:Src/ff.c      **** 	DWORD cl, n;
1356:Src/ff.c      **** 
1357:Src/ff.c      **** 
1358:Src/ff.c      **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1359:Src/ff.c      **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1360:Src/ff.c      **** 			res = put_fat(obj->fs, cl, cl + 1);
1361:Src/ff.c      **** 			if (res != FR_OK) return res;
1362:Src/ff.c      **** 		}
1363:Src/ff.c      **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1364:Src/ff.c      **** 	}
1365:Src/ff.c      **** 	return FR_OK;
1366:Src/ff.c      **** }
1367:Src/ff.c      **** 
1368:Src/ff.c      **** 
1369:Src/ff.c      **** /*---------------------------------------------*/
1370:Src/ff.c      **** /* Fill the last fragment of the FAT chain     */
1371:Src/ff.c      **** /*---------------------------------------------*/
1372:Src/ff.c      **** 
1373:Src/ff.c      **** static FRESULT fill_last_frag (
1374:Src/ff.c      **** 	FFOBJID* obj,	/* Pointer to the corresponding object */
1375:Src/ff.c      **** 	DWORD lcl,		/* Last cluster of the fragment */
1376:Src/ff.c      **** 	DWORD term		/* Value to set the last FAT entry */
1377:Src/ff.c      **** )
1378:Src/ff.c      **** {
1379:Src/ff.c      **** 	FRESULT res;
1380:Src/ff.c      **** 
1381:Src/ff.c      **** 
1382:Src/ff.c      **** 	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1383:Src/ff.c      **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1384:Src/ff.c      **** 		if (res != FR_OK) return res;
1385:Src/ff.c      **** 		obj->n_frag--;
1386:Src/ff.c      **** 	}
1387:Src/ff.c      **** 	return FR_OK;
1388:Src/ff.c      **** }
1389:Src/ff.c      **** 
1390:Src/ff.c      **** #endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
1391:Src/ff.c      **** 
1392:Src/ff.c      **** 
1393:Src/ff.c      **** 
1394:Src/ff.c      **** #if !FF_FS_READONLY
1395:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1396:Src/ff.c      **** /* FAT handling - Remove a cluster chain                                 */
1397:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1398:Src/ff.c      **** 
1399:Src/ff.c      **** static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1400:Src/ff.c      **** 	FFOBJID* obj,		/* Corresponding object */
1401:Src/ff.c      **** 	DWORD clst,			/* Cluster to remove a chain from */
1402:Src/ff.c      **** 	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
1403:Src/ff.c      **** )
1404:Src/ff.c      **** {
1405:Src/ff.c      **** 	FRESULT res = FR_OK;
1406:Src/ff.c      **** 	DWORD nxt;
1407:Src/ff.c      **** 	FATFS *fs = obj->fs;
1408:Src/ff.c      **** #if FF_FS_EXFAT || FF_USE_TRIM
1409:Src/ff.c      **** 	DWORD scl = clst, ecl = clst;
1410:Src/ff.c      **** #endif
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 32


1411:Src/ff.c      **** #if FF_USE_TRIM
1412:Src/ff.c      **** 	LBA_t rt[2];
1413:Src/ff.c      **** #endif
1414:Src/ff.c      **** 
1415:Src/ff.c      **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1416:Src/ff.c      **** 
1417:Src/ff.c      **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1418:Src/ff.c      **** 	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1419:Src/ff.c      **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1420:Src/ff.c      **** 		if (res != FR_OK) return res;
1421:Src/ff.c      **** 	}
1422:Src/ff.c      **** 
1423:Src/ff.c      **** 	/* Remove the chain */
1424:Src/ff.c      **** 	do {
1425:Src/ff.c      **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1426:Src/ff.c      **** 		if (nxt == 0) break;				/* Empty cluster? */
1427:Src/ff.c      **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1428:Src/ff.c      **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1429:Src/ff.c      **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1430:Src/ff.c      **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1431:Src/ff.c      **** 			if (res != FR_OK) return res;
1432:Src/ff.c      **** 		}
1433:Src/ff.c      **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1434:Src/ff.c      **** 			fs->free_clst++;
1435:Src/ff.c      **** 			fs->fsi_flag |= 1;
1436:Src/ff.c      **** 		}
1437:Src/ff.c      **** #if FF_FS_EXFAT || FF_USE_TRIM
1438:Src/ff.c      **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1439:Src/ff.c      **** 			ecl = nxt;
1440:Src/ff.c      **** 		} else {				/* End of contiguous cluster block */
1441:Src/ff.c      **** #if FF_FS_EXFAT
1442:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {
1443:Src/ff.c      **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1444:Src/ff.c      **** 				if (res != FR_OK) return res;
1445:Src/ff.c      **** 			}
1446:Src/ff.c      **** #endif
1447:Src/ff.c      **** #if FF_USE_TRIM
1448:Src/ff.c      **** 			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
1449:Src/ff.c      **** 			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
1450:Src/ff.c      **** 			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be
1451:Src/ff.c      **** #endif
1452:Src/ff.c      **** 			scl = ecl = nxt;
1453:Src/ff.c      **** 		}
1454:Src/ff.c      **** #endif
1455:Src/ff.c      **** 		clst = nxt;					/* Next cluster */
1456:Src/ff.c      **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1457:Src/ff.c      **** 
1458:Src/ff.c      **** #if FF_FS_EXFAT
1459:Src/ff.c      **** 	/* Some post processes for chain status */
1460:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT) {
1461:Src/ff.c      **** 		if (pclst == 0) {	/* Has the entire chain been removed? */
1462:Src/ff.c      **** 			obj->stat = 0;		/* Change the chain status 'initial' */
1463:Src/ff.c      **** 		} else {
1464:Src/ff.c      **** 			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1465:Src/ff.c      **** 				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1466:Src/ff.c      **** 				while (clst != pclst) {
1467:Src/ff.c      **** 					nxt = get_fat(obj, clst);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 33


1468:Src/ff.c      **** 					if (nxt < 2) return FR_INT_ERR;
1469:Src/ff.c      **** 					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1470:Src/ff.c      **** 					if (nxt != clst + 1) break;	/* Not contiguous? */
1471:Src/ff.c      **** 					clst++;
1472:Src/ff.c      **** 				}
1473:Src/ff.c      **** 				if (clst == pclst) {	/* Has the chain got contiguous again? */
1474:Src/ff.c      **** 					obj->stat = 2;		/* Change the chain status 'contiguous' */
1475:Src/ff.c      **** 				}
1476:Src/ff.c      **** 			} else {
1477:Src/ff.c      **** 				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the 
1478:Src/ff.c      **** 					obj->stat = 2;	/* Change the chain status 'contiguous' */
1479:Src/ff.c      **** 				}
1480:Src/ff.c      **** 			}
1481:Src/ff.c      **** 		}
1482:Src/ff.c      **** 	}
1483:Src/ff.c      **** #endif
1484:Src/ff.c      **** 	return FR_OK;
1485:Src/ff.c      **** }
1486:Src/ff.c      **** 
1487:Src/ff.c      **** 
1488:Src/ff.c      **** 
1489:Src/ff.c      **** 
1490:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1491:Src/ff.c      **** /* FAT handling - Stretch a chain or Create a new chain                  */
1492:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1493:Src/ff.c      **** 
1494:Src/ff.c      **** static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New 
1495:Src/ff.c      **** 	FFOBJID* obj,		/* Corresponding object */
1496:Src/ff.c      **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1497:Src/ff.c      **** )
1498:Src/ff.c      **** {
1499:Src/ff.c      **** 	DWORD cs, ncl, scl;
1500:Src/ff.c      **** 	FRESULT res;
1501:Src/ff.c      **** 	FATFS *fs = obj->fs;
1502:Src/ff.c      **** 
1503:Src/ff.c      **** 
1504:Src/ff.c      **** 	if (clst == 0) {	/* Create a new chain */
1505:Src/ff.c      **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
1506:Src/ff.c      **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1507:Src/ff.c      **** 	}
1508:Src/ff.c      **** 	else {				/* Stretch a chain */
1509:Src/ff.c      **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1510:Src/ff.c      **** 		if (cs < 2) return 1;				/* Test for insanity */
1511:Src/ff.c      **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1512:Src/ff.c      **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1513:Src/ff.c      **** 		scl = clst;							/* Cluster to start to find */
1514:Src/ff.c      **** 	}
1515:Src/ff.c      **** 	if (fs->free_clst == 0) return 0;		/* No free cluster */
1516:Src/ff.c      **** 
1517:Src/ff.c      **** #if FF_FS_EXFAT
1518:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1519:Src/ff.c      **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1520:Src/ff.c      **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1521:Src/ff.c      **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1522:Src/ff.c      **** 		if (res == FR_INT_ERR) return 1;
1523:Src/ff.c      **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1524:Src/ff.c      **** 		if (clst == 0) {							/* Is it a new chain? */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 34


1525:Src/ff.c      **** 			obj->stat = 2;							/* Set status 'contiguous' */
1526:Src/ff.c      **** 		} else {									/* It is a stretched chain */
1527:Src/ff.c      **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1528:Src/ff.c      **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1529:Src/ff.c      **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1530:Src/ff.c      **** 			}
1531:Src/ff.c      **** 		}
1532:Src/ff.c      **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1533:Src/ff.c      **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1534:Src/ff.c      **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1535:Src/ff.c      **** 			} else {				/* New fragment */
1536:Src/ff.c      **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1537:Src/ff.c      **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1538:Src/ff.c      **** 				if (res == FR_OK) obj->n_frag = 1;
1539:Src/ff.c      **** 			}
1540:Src/ff.c      **** 		}
1541:Src/ff.c      **** 	} else
1542:Src/ff.c      **** #endif
1543:Src/ff.c      **** 	{	/* On the FAT/FAT32 volume */
1544:Src/ff.c      **** 		ncl = 0;
1545:Src/ff.c      **** 		if (scl == clst) {						/* Stretching an existing chain? */
1546:Src/ff.c      **** 			ncl = scl + 1;						/* Test if next cluster is free */
1547:Src/ff.c      **** 			if (ncl >= fs->n_fatent) ncl = 2;
1548:Src/ff.c      **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
1549:Src/ff.c      **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1550:Src/ff.c      **** 			if (cs != 0) {						/* Not free? */
1551:Src/ff.c      **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1552:Src/ff.c      **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1553:Src/ff.c      **** 				ncl = 0;
1554:Src/ff.c      **** 			}
1555:Src/ff.c      **** 		}
1556:Src/ff.c      **** 		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1557:Src/ff.c      **** 			ncl = scl;	/* Start cluster */
1558:Src/ff.c      **** 			for (;;) {
1559:Src/ff.c      **** 				ncl++;							/* Next cluster */
1560:Src/ff.c      **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1561:Src/ff.c      **** 					ncl = 2;
1562:Src/ff.c      **** 					if (ncl > scl) return 0;	/* No free cluster found? */
1563:Src/ff.c      **** 				}
1564:Src/ff.c      **** 				cs = get_fat(obj, ncl);			/* Get the cluster status */
1565:Src/ff.c      **** 				if (cs == 0) break;				/* Found a free cluster? */
1566:Src/ff.c      **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1567:Src/ff.c      **** 				if (ncl == scl) return 0;		/* No free cluster found? */
1568:Src/ff.c      **** 			}
1569:Src/ff.c      **** 		}
1570:Src/ff.c      **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1571:Src/ff.c      **** 		if (res == FR_OK && clst != 0) {
1572:Src/ff.c      **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1573:Src/ff.c      **** 		}
1574:Src/ff.c      **** 	}
1575:Src/ff.c      **** 
1576:Src/ff.c      **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1577:Src/ff.c      **** 		fs->last_clst = ncl;
1578:Src/ff.c      **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1579:Src/ff.c      **** 		fs->fsi_flag |= 1;
1580:Src/ff.c      **** 	} else {
1581:Src/ff.c      **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 35


1582:Src/ff.c      **** 	}
1583:Src/ff.c      **** 
1584:Src/ff.c      **** 	return ncl;		/* Return new cluster number or error status */
1585:Src/ff.c      **** }
1586:Src/ff.c      **** 
1587:Src/ff.c      **** #endif /* !FF_FS_READONLY */
1588:Src/ff.c      **** 
1589:Src/ff.c      **** 
1590:Src/ff.c      **** 
1591:Src/ff.c      **** 
1592:Src/ff.c      **** #if FF_USE_FASTSEEK
1593:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1594:Src/ff.c      **** /* FAT handling - Convert offset into cluster with link map table        */
1595:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1596:Src/ff.c      **** 
1597:Src/ff.c      **** static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1598:Src/ff.c      **** 	FIL* fp,		/* Pointer to the file object */
1599:Src/ff.c      **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1600:Src/ff.c      **** )
1601:Src/ff.c      **** {
1602:Src/ff.c      **** 	DWORD cl, ncl, *tbl;
1603:Src/ff.c      **** 	FATFS *fs = fp->obj.fs;
1604:Src/ff.c      **** 
1605:Src/ff.c      **** 
1606:Src/ff.c      **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1607:Src/ff.c      **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1608:Src/ff.c      **** 	for (;;) {
1609:Src/ff.c      **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1610:Src/ff.c      **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1611:Src/ff.c      **** 		if (cl < ncl) break;	/* In this fragment? */
1612:Src/ff.c      **** 		cl -= ncl; tbl++;		/* Next fragment */
1613:Src/ff.c      **** 	}
1614:Src/ff.c      **** 	return cl + *tbl;	/* Return the cluster number */
1615:Src/ff.c      **** }
1616:Src/ff.c      **** 
1617:Src/ff.c      **** #endif	/* FF_USE_FASTSEEK */
1618:Src/ff.c      **** 
1619:Src/ff.c      **** 
1620:Src/ff.c      **** 
1621:Src/ff.c      **** 
1622:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1623:Src/ff.c      **** /* Directory handling - Fill a cluster with zeros                        */
1624:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1625:Src/ff.c      **** 
1626:Src/ff.c      **** #if !FF_FS_READONLY
1627:Src/ff.c      **** static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
1628:Src/ff.c      **** 	FATFS *fs,		/* Filesystem object */
1629:Src/ff.c      **** 	DWORD clst		/* Directory table to clear */
1630:Src/ff.c      **** )
1631:Src/ff.c      **** {
1632:Src/ff.c      **** 	LBA_t sect;
1633:Src/ff.c      **** 	UINT n, szb;
1634:Src/ff.c      **** 	BYTE *ibuf;
1635:Src/ff.c      **** 
1636:Src/ff.c      **** 
1637:Src/ff.c      **** 	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1638:Src/ff.c      **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 36


1639:Src/ff.c      **** 	fs->winsect = sect;				/* Set window to top of the cluster */
1640:Src/ff.c      **** 	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
1641:Src/ff.c      **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
1642:Src/ff.c      **** 	/* Allocate a temporary buffer */
1643:Src/ff.c      **** 	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; 
1644:Src/ff.c      **** 	if (szb > SS(fs)) {		/* Buffer allocated? */
1645:Src/ff.c      **** 		memset(ibuf, 0, szb);
1646:Src/ff.c      **** 		szb /= SS(fs);		/* Bytes -> Sectors */
1647:Src/ff.c      **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1648:Src/ff.c      **** 		ff_memfree(ibuf);
1649:Src/ff.c      **** 	} else
1650:Src/ff.c      **** #endif
1651:Src/ff.c      **** 	{
1652:Src/ff.c      **** 		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
1653:Src/ff.c      **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1654:Src/ff.c      **** 	}
1655:Src/ff.c      **** 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1656:Src/ff.c      **** }
1657:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
1658:Src/ff.c      **** 
1659:Src/ff.c      **** 
1660:Src/ff.c      **** 
1661:Src/ff.c      **** 
1662:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1663:Src/ff.c      **** /* Directory handling - Set directory index                              */
1664:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1665:Src/ff.c      **** 
1666:Src/ff.c      **** static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1667:Src/ff.c      **** 	DIR* dp,		/* Pointer to directory object */
1668:Src/ff.c      **** 	DWORD ofs		/* Offset of directory table */
1669:Src/ff.c      **** )
1670:Src/ff.c      **** {
1671:Src/ff.c      **** 	DWORD csz, clst;
1672:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
1673:Src/ff.c      **** 
1674:Src/ff.c      **** 
1675:Src/ff.c      **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIR
1676:Src/ff.c      **** 		return FR_INT_ERR;
1677:Src/ff.c      **** 	}
1678:Src/ff.c      **** 	dp->dptr = ofs;				/* Set current offset */
1679:Src/ff.c      **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1680:Src/ff.c      **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1681:Src/ff.c      **** 		clst = (DWORD)fs->dirbase;
1682:Src/ff.c      **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1683:Src/ff.c      **** 	}
1684:Src/ff.c      **** 
1685:Src/ff.c      **** 	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1686:Src/ff.c      **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1687:Src/ff.c      **** 		dp->sect = fs->dirbase;
1688:Src/ff.c      **** 
1689:Src/ff.c      **** 	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
1690:Src/ff.c      **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1691:Src/ff.c      **** 		while (ofs >= csz) {				/* Follow cluster chain */
1692:Src/ff.c      **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1693:Src/ff.c      **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1694:Src/ff.c      **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1695:Src/ff.c      **** 			ofs -= csz;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 37


1696:Src/ff.c      **** 		}
1697:Src/ff.c      **** 		dp->sect = clst2sect(fs, clst);
1698:Src/ff.c      **** 	}
1699:Src/ff.c      **** 	dp->clust = clst;					/* Current cluster# */
1700:Src/ff.c      **** 	if (dp->sect == 0) return FR_INT_ERR;
1701:Src/ff.c      **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1702:Src/ff.c      **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1703:Src/ff.c      **** 
1704:Src/ff.c      **** 	return FR_OK;
1705:Src/ff.c      **** }
1706:Src/ff.c      **** 
1707:Src/ff.c      **** 
1708:Src/ff.c      **** 
1709:Src/ff.c      **** 
1710:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1711:Src/ff.c      **** /* Directory handling - Move directory table index next                  */
1712:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1713:Src/ff.c      **** 
1714:Src/ff.c      **** static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stret
1715:Src/ff.c      **** 	DIR* dp,				/* Pointer to the directory object */
1716:Src/ff.c      **** 	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
1717:Src/ff.c      **** )
1718:Src/ff.c      **** {
1719:Src/ff.c      **** 	DWORD ofs, clst;
1720:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
1721:Src/ff.c      **** 
1722:Src/ff.c      **** 
1723:Src/ff.c      **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1724:Src/ff.c      **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
1725:Src/ff.c      **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
1726:Src/ff.c      **** 
1727:Src/ff.c      **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1728:Src/ff.c      **** 		dp->sect++;				/* Next sector */
1729:Src/ff.c      **** 
1730:Src/ff.c      **** 		if (dp->clust == 0) {	/* Static table */
1731:Src/ff.c      **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1732:Src/ff.c      **** 				dp->sect = 0; return FR_NO_FILE;
1733:Src/ff.c      **** 			}
1734:Src/ff.c      **** 		}
1735:Src/ff.c      **** 		else {					/* Dynamic table */
1736:Src/ff.c      **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1737:Src/ff.c      **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1738:Src/ff.c      **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1739:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1740:Src/ff.c      **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1741:Src/ff.c      **** #if !FF_FS_READONLY
1742:Src/ff.c      **** 					if (!stretch) {								/* If no stretch, report EOT */
1743:Src/ff.c      **** 						dp->sect = 0; return FR_NO_FILE;
1744:Src/ff.c      **** 					}
1745:Src/ff.c      **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1746:Src/ff.c      **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1747:Src/ff.c      **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1748:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1749:Src/ff.c      **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1750:Src/ff.c      **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1751:Src/ff.c      **** #else
1752:Src/ff.c      **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 38


1753:Src/ff.c      **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1754:Src/ff.c      **** #endif
1755:Src/ff.c      **** 				}
1756:Src/ff.c      **** 				dp->clust = clst;		/* Initialize data for new cluster */
1757:Src/ff.c      **** 				dp->sect = clst2sect(fs, clst);
1758:Src/ff.c      **** 			}
1759:Src/ff.c      **** 		}
1760:Src/ff.c      **** 	}
1761:Src/ff.c      **** 	dp->dptr = ofs;						/* Current entry */
1762:Src/ff.c      **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1763:Src/ff.c      **** 
1764:Src/ff.c      **** 	return FR_OK;
1765:Src/ff.c      **** }
1766:Src/ff.c      **** 
1767:Src/ff.c      **** 
1768:Src/ff.c      **** 
1769:Src/ff.c      **** 
1770:Src/ff.c      **** #if !FF_FS_READONLY
1771:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1772:Src/ff.c      **** /* Directory handling - Reserve a block of directory entries             */
1773:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1774:Src/ff.c      **** 
1775:Src/ff.c      **** static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1776:Src/ff.c      **** 	DIR* dp,				/* Pointer to the directory object */
1777:Src/ff.c      **** 	UINT n_ent				/* Number of contiguous entries to allocate */
1778:Src/ff.c      **** )
1779:Src/ff.c      **** {
1780:Src/ff.c      **** 	FRESULT res;
1781:Src/ff.c      **** 	UINT n;
1782:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
1783:Src/ff.c      **** 
1784:Src/ff.c      **** 
1785:Src/ff.c      **** 	res = dir_sdi(dp, 0);
1786:Src/ff.c      **** 	if (res == FR_OK) {
1787:Src/ff.c      **** 		n = 0;
1788:Src/ff.c      **** 		do {
1789:Src/ff.c      **** 			res = move_window(fs, dp->sect);
1790:Src/ff.c      **** 			if (res != FR_OK) break;
1791:Src/ff.c      **** #if FF_FS_EXFAT
1792:Src/ff.c      **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1793:Src/ff.c      **** #else
1794:Src/ff.c      **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
1795:Src/ff.c      **** #endif
1796:Src/ff.c      **** 				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
1797:Src/ff.c      **** 			} else {
1798:Src/ff.c      **** 				n = 0;				/* Not a free entry, restart to search */
1799:Src/ff.c      **** 			}
1800:Src/ff.c      **** 			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
1801:Src/ff.c      **** 		} while (res == FR_OK);
1802:Src/ff.c      **** 	}
1803:Src/ff.c      **** 
1804:Src/ff.c      **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1805:Src/ff.c      **** 	return res;
1806:Src/ff.c      **** }
1807:Src/ff.c      **** 
1808:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
1809:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 39


1810:Src/ff.c      **** 
1811:Src/ff.c      **** 
1812:Src/ff.c      **** 
1813:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1814:Src/ff.c      **** /* FAT: Directory handling - Load/Store start cluster number             */
1815:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1816:Src/ff.c      **** 
1817:Src/ff.c      **** static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1818:Src/ff.c      **** 	FATFS* fs,			/* Pointer to the fs object */
1819:Src/ff.c      **** 	const BYTE* dir		/* Pointer to the key entry */
1820:Src/ff.c      **** )
1821:Src/ff.c      **** {
 363              		.loc 1 1821 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              		.loc 1 1821 1 is_stmt 0 view .LVU100
 368 0000 70B5     		push	{r4, r5, r6, lr}
 369              	.LCFI0:
 370              		.cfi_def_cfa_offset 16
 371              		.cfi_offset 4, -16
 372              		.cfi_offset 5, -12
 373              		.cfi_offset 6, -8
 374              		.cfi_offset 14, -4
 375 0002 0646     		mov	r6, r0
 376 0004 0D46     		mov	r5, r1
1822:Src/ff.c      **** 	DWORD cl;
 377              		.loc 1 1822 2 is_stmt 1 view .LVU101
1823:Src/ff.c      **** 
1824:Src/ff.c      **** 	cl = ld_word(dir + DIR_FstClusLO);
 378              		.loc 1 1824 2 view .LVU102
 379              		.loc 1 1824 7 is_stmt 0 view .LVU103
 380 0006 01F11A00 		add	r0, r1, #26
 381              	.LVL44:
 382              		.loc 1 1824 7 view .LVU104
 383 000a FFF7FEFF 		bl	ld_word
 384              	.LVL45:
1825:Src/ff.c      **** 	if (fs->fs_type == FS_FAT32) {
 385              		.loc 1 1825 2 is_stmt 1 view .LVU105
 386              		.loc 1 1825 8 is_stmt 0 view .LVU106
 387 000e 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 388              		.loc 1 1825 5 view .LVU107
 389 0010 032B     		cmp	r3, #3
 390 0012 00D0     		beq	.L25
 391              	.LVL46:
 392              	.L22:
1826:Src/ff.c      **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1827:Src/ff.c      **** 	}
1828:Src/ff.c      **** 
1829:Src/ff.c      **** 	return cl;
1830:Src/ff.c      **** }
 393              		.loc 1 1830 1 view .LVU108
 394 0014 70BD     		pop	{r4, r5, r6, pc}
 395              	.LVL47:
 396              	.L25:
 397              		.loc 1 1830 1 view .LVU109
 398 0016 0446     		mov	r4, r0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 40


1826:Src/ff.c      **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 399              		.loc 1 1826 3 is_stmt 1 view .LVU110
1826:Src/ff.c      **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 400              		.loc 1 1826 16 is_stmt 0 view .LVU111
 401 0018 05F11400 		add	r0, r5, #20
 402              	.LVL48:
1826:Src/ff.c      **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 403              		.loc 1 1826 16 view .LVU112
 404 001c FFF7FEFF 		bl	ld_word
 405              	.LVL49:
1826:Src/ff.c      **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 406              		.loc 1 1826 6 view .LVU113
 407 0020 44EA0040 		orr	r0, r4, r0, lsl #16
 408              	.LVL50:
1829:Src/ff.c      **** }
 409              		.loc 1 1829 2 is_stmt 1 view .LVU114
1829:Src/ff.c      **** }
 410              		.loc 1 1829 9 is_stmt 0 view .LVU115
 411 0024 F6E7     		b	.L22
 412              		.cfi_endproc
 413              	.LFE20:
 415              		.section	.text.st_clust,"ax",%progbits
 416              		.align	1
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu softvfp
 422              	st_clust:
 423              	.LVL51:
 424              	.LFB21:
1831:Src/ff.c      **** 
1832:Src/ff.c      **** 
1833:Src/ff.c      **** #if !FF_FS_READONLY
1834:Src/ff.c      **** static void st_clust (
1835:Src/ff.c      **** 	FATFS* fs,	/* Pointer to the fs object */
1836:Src/ff.c      **** 	BYTE* dir,	/* Pointer to the key entry */
1837:Src/ff.c      **** 	DWORD cl	/* Value to be set */
1838:Src/ff.c      **** )
1839:Src/ff.c      **** {
 425              		.loc 1 1839 1 is_stmt 1 view -0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		.loc 1 1839 1 is_stmt 0 view .LVU117
 430 0000 70B5     		push	{r4, r5, r6, lr}
 431              	.LCFI1:
 432              		.cfi_def_cfa_offset 16
 433              		.cfi_offset 4, -16
 434              		.cfi_offset 5, -12
 435              		.cfi_offset 6, -8
 436              		.cfi_offset 14, -4
 437 0002 0646     		mov	r6, r0
 438 0004 0C46     		mov	r4, r1
 439 0006 1546     		mov	r5, r2
1840:Src/ff.c      **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 440              		.loc 1 1840 2 is_stmt 1 view .LVU118
 441 0008 91B2     		uxth	r1, r2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 41


 442              	.LVL52:
 443              		.loc 1 1840 2 is_stmt 0 view .LVU119
 444 000a 04F11A00 		add	r0, r4, #26
 445              	.LVL53:
 446              		.loc 1 1840 2 view .LVU120
 447 000e FFF7FEFF 		bl	st_word
 448              	.LVL54:
1841:Src/ff.c      **** 	if (fs->fs_type == FS_FAT32) {
 449              		.loc 1 1841 2 is_stmt 1 view .LVU121
 450              		.loc 1 1841 8 is_stmt 0 view .LVU122
 451 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 452              		.loc 1 1841 5 view .LVU123
 453 0014 032B     		cmp	r3, #3
 454 0016 00D0     		beq	.L29
 455              	.L26:
1842:Src/ff.c      **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1843:Src/ff.c      **** 	}
1844:Src/ff.c      **** }
 456              		.loc 1 1844 1 view .LVU124
 457 0018 70BD     		pop	{r4, r5, r6, pc}
 458              	.LVL55:
 459              	.L29:
1842:Src/ff.c      **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 460              		.loc 1 1842 3 is_stmt 1 view .LVU125
 461 001a 290C     		lsrs	r1, r5, #16
 462 001c 04F11400 		add	r0, r4, #20
 463 0020 FFF7FEFF 		bl	st_word
 464              	.LVL56:
 465              		.loc 1 1844 1 is_stmt 0 view .LVU126
 466 0024 F8E7     		b	.L26
 467              		.cfi_endproc
 468              	.LFE21:
 470              		.section	.text.pick_lfn,"ax",%progbits
 471              		.align	1
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu softvfp
 477              	pick_lfn:
 478              	.LVL57:
 479              	.LFB23:
1845:Src/ff.c      **** #endif
1846:Src/ff.c      **** 
1847:Src/ff.c      **** 
1848:Src/ff.c      **** 
1849:Src/ff.c      **** #if FF_USE_LFN
1850:Src/ff.c      **** /*--------------------------------------------------------*/
1851:Src/ff.c      **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1852:Src/ff.c      **** /*--------------------------------------------------------*/
1853:Src/ff.c      **** 
1854:Src/ff.c      **** static int cmp_lfn (		/* 1:matched, 0:not matched */
1855:Src/ff.c      **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1856:Src/ff.c      **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1857:Src/ff.c      **** )
1858:Src/ff.c      **** {
1859:Src/ff.c      **** 	UINT i, s;
1860:Src/ff.c      **** 	WCHAR wc, uc;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 42


1861:Src/ff.c      **** 
1862:Src/ff.c      **** 
1863:Src/ff.c      **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1864:Src/ff.c      **** 
1865:Src/ff.c      **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1866:Src/ff.c      **** 
1867:Src/ff.c      **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1868:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1869:Src/ff.c      **** 		if (wc != 0) {
1870:Src/ff.c      **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1871:Src/ff.c      **** 				return 0;					/* Not matched */
1872:Src/ff.c      **** 			}
1873:Src/ff.c      **** 			wc = uc;
1874:Src/ff.c      **** 		} else {
1875:Src/ff.c      **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1876:Src/ff.c      **** 		}
1877:Src/ff.c      **** 	}
1878:Src/ff.c      **** 
1879:Src/ff.c      **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1880:Src/ff.c      **** 
1881:Src/ff.c      **** 	return 1;		/* The part of LFN matched */
1882:Src/ff.c      **** }
1883:Src/ff.c      **** 
1884:Src/ff.c      **** 
1885:Src/ff.c      **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
1886:Src/ff.c      **** /*-----------------------------------------------------*/
1887:Src/ff.c      **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1888:Src/ff.c      **** /*-----------------------------------------------------*/
1889:Src/ff.c      **** 
1890:Src/ff.c      **** static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1891:Src/ff.c      **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1892:Src/ff.c      **** 	BYTE* dir			/* Pointer to the LFN entry */
1893:Src/ff.c      **** )
1894:Src/ff.c      **** {
 480              		.loc 1 1894 1 is_stmt 1 view -0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		.loc 1 1894 1 is_stmt 0 view .LVU128
 485 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 486              	.LCFI2:
 487              		.cfi_def_cfa_offset 24
 488              		.cfi_offset 4, -24
 489              		.cfi_offset 5, -20
 490              		.cfi_offset 6, -16
 491              		.cfi_offset 7, -12
 492              		.cfi_offset 8, -8
 493              		.cfi_offset 14, -4
 494 0004 8046     		mov	r8, r0
 495 0006 0E46     		mov	r6, r1
1895:Src/ff.c      **** 	UINT i, s;
 496              		.loc 1 1895 2 is_stmt 1 view .LVU129
1896:Src/ff.c      **** 	WCHAR wc, uc;
 497              		.loc 1 1896 2 view .LVU130
1897:Src/ff.c      **** 
1898:Src/ff.c      **** 
1899:Src/ff.c      **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 43


 498              		.loc 1 1899 2 view .LVU131
 499              		.loc 1 1899 6 is_stmt 0 view .LVU132
 500 0008 01F11A00 		add	r0, r1, #26
 501              	.LVL58:
 502              		.loc 1 1899 6 view .LVU133
 503 000c FFF7FEFF 		bl	ld_word
 504              	.LVL59:
 505              		.loc 1 1899 5 view .LVU134
 506 0010 58BB     		cbnz	r0, .L36
1900:Src/ff.c      **** 
1901:Src/ff.c      **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 507              		.loc 1 1901 2 is_stmt 1 view .LVU135
 508              		.loc 1 1901 11 is_stmt 0 view .LVU136
 509 0012 3578     		ldrb	r5, [r6]	@ zero_extendqisi2
 510              		.loc 1 1901 22 view .LVU137
 511 0014 25F04005 		bic	r5, r5, #64
 512              		.loc 1 1901 31 view .LVU138
 513 0018 013D     		subs	r5, r5, #1
 514              		.loc 1 1901 36 view .LVU139
 515 001a 05EB4503 		add	r3, r5, r5, lsl #1
 516              		.loc 1 1901 4 view .LVU140
 517 001e 05EB8305 		add	r5, r5, r3, lsl #2
 518              	.LVL60:
1902:Src/ff.c      **** 
1903:Src/ff.c      **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 519              		.loc 1 1903 2 is_stmt 1 view .LVU141
 520              		.loc 1 1903 10 is_stmt 0 view .LVU142
 521 0022 0127     		movs	r7, #1
 522              		.loc 1 1903 17 view .LVU143
 523 0024 0024     		movs	r4, #0
 524              		.loc 1 1903 2 view .LVU144
 525 0026 04E0     		b	.L32
 526              	.LVL61:
 527              	.L33:
1904:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1905:Src/ff.c      **** 		if (wc != 0) {
1906:Src/ff.c      **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1907:Src/ff.c      **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1908:Src/ff.c      **** 		} else {
1909:Src/ff.c      **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 528              		.loc 1 1909 4 is_stmt 1 view .LVU145
 529              		.loc 1 1909 7 is_stmt 0 view .LVU146
 530 0028 4FF6FF73 		movw	r3, #65535
 531 002c 9842     		cmp	r0, r3
 532 002e 21D1     		bne	.L38
 533              	.LVL62:
 534              	.L34:
1903:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 535              		.loc 1 1903 30 is_stmt 1 discriminator 2 view .LVU147
1903:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 536              		.loc 1 1903 31 is_stmt 0 discriminator 2 view .LVU148
 537 0030 0134     		adds	r4, r4, #1
 538              	.LVL63:
 539              	.L32:
1903:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 540              		.loc 1 1903 22 is_stmt 1 discriminator 1 view .LVU149
1903:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 44


 541              		.loc 1 1903 2 is_stmt 0 discriminator 1 view .LVU150
 542 0032 0C2C     		cmp	r4, #12
 543 0034 0DD8     		bhi	.L43
1904:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 544              		.loc 1 1904 3 is_stmt 1 view .LVU151
1904:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 545              		.loc 1 1904 28 is_stmt 0 view .LVU152
 546 0036 134B     		ldr	r3, .L44
 547 0038 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
1904:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 548              		.loc 1 1904 8 view .LVU153
 549 003a 3044     		add	r0, r0, r6
 550 003c FFF7FEFF 		bl	ld_word
 551              	.LVL64:
1905:Src/ff.c      **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 552              		.loc 1 1905 3 is_stmt 1 view .LVU154
1905:Src/ff.c      **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 553              		.loc 1 1905 6 is_stmt 0 view .LVU155
 554 0040 002F     		cmp	r7, #0
 555 0042 F1D0     		beq	.L33
1906:Src/ff.c      **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 556              		.loc 1 1906 4 is_stmt 1 view .LVU156
1906:Src/ff.c      **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 557              		.loc 1 1906 7 is_stmt 0 view .LVU157
 558 0044 802D     		cmp	r5, #128
 559 0046 13D8     		bhi	.L37
1907:Src/ff.c      **** 		} else {
 560              		.loc 1 1907 4 is_stmt 1 view .LVU158
 561              	.LVL65:
1907:Src/ff.c      **** 		} else {
 562              		.loc 1 1907 16 is_stmt 0 view .LVU159
 563 0048 28F81500 		strh	r0, [r8, r5, lsl #1]	@ movhi
1907:Src/ff.c      **** 		} else {
 564              		.loc 1 1907 21 view .LVU160
 565 004c 0746     		mov	r7, r0
1907:Src/ff.c      **** 		} else {
 566              		.loc 1 1907 12 view .LVU161
 567 004e 0135     		adds	r5, r5, #1
 568              	.LVL66:
1907:Src/ff.c      **** 		} else {
 569              		.loc 1 1907 12 view .LVU162
 570 0050 EEE7     		b	.L34
 571              	.LVL67:
 572              	.L43:
1910:Src/ff.c      **** 		}
1911:Src/ff.c      **** 	}
1912:Src/ff.c      **** 
1913:Src/ff.c      **** 	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not termin
 573              		.loc 1 1913 2 is_stmt 1 view .LVU163
 574              		.loc 1 1913 9 is_stmt 0 view .LVU164
 575 0052 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 576              		.loc 1 1913 5 view .LVU165
 577 0054 13F0400F 		tst	r3, #64
 578 0058 0ED0     		beq	.L39
 579              		.loc 1 1913 27 discriminator 1 view .LVU166
 580 005a 7FB1     		cbz	r7, .L40
1914:Src/ff.c      **** 		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 45


 581              		.loc 1 1914 3 is_stmt 1 view .LVU167
 582              		.loc 1 1914 6 is_stmt 0 view .LVU168
 583 005c 802D     		cmp	r5, #128
 584 005e 0FD8     		bhi	.L41
1915:Src/ff.c      **** 		lfnbuf[i] = 0;
 585              		.loc 1 1915 3 is_stmt 1 view .LVU169
 586              		.loc 1 1915 13 is_stmt 0 view .LVU170
 587 0060 0023     		movs	r3, #0
 588 0062 28F81530 		strh	r3, [r8, r5, lsl #1]	@ movhi
1916:Src/ff.c      **** 	}
1917:Src/ff.c      **** 
1918:Src/ff.c      **** 	return 1;		/* The part of LFN is valid */
 589              		.loc 1 1918 9 view .LVU171
 590 0066 0120     		movs	r0, #1
 591 0068 00E0     		b	.L30
 592              	.LVL68:
 593              	.L36:
1899:Src/ff.c      **** 
 594              		.loc 1 1899 49 view .LVU172
 595 006a 0020     		movs	r0, #0
 596              	.L30:
1919:Src/ff.c      **** }
 597              		.loc 1 1919 1 view .LVU173
 598 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 599              	.LVL69:
 600              	.L37:
1906:Src/ff.c      **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 601              		.loc 1 1906 36 view .LVU174
 602 0070 0020     		movs	r0, #0
 603              	.LVL70:
1906:Src/ff.c      **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 604              		.loc 1 1906 36 view .LVU175
 605 0072 FBE7     		b	.L30
 606              	.LVL71:
 607              	.L38:
1909:Src/ff.c      **** 		}
 608              		.loc 1 1909 29 view .LVU176
 609 0074 0020     		movs	r0, #0
 610              	.LVL72:
1909:Src/ff.c      **** 		}
 611              		.loc 1 1909 29 view .LVU177
 612 0076 F9E7     		b	.L30
 613              	.L39:
1918:Src/ff.c      **** }
 614              		.loc 1 1918 9 view .LVU178
 615 0078 0120     		movs	r0, #1
 616 007a F7E7     		b	.L30
 617              	.L40:
 618 007c 0120     		movs	r0, #1
 619 007e F5E7     		b	.L30
 620              	.L41:
1914:Src/ff.c      **** 		lfnbuf[i] = 0;
 621              		.loc 1 1914 35 view .LVU179
 622 0080 0020     		movs	r0, #0
 623 0082 F3E7     		b	.L30
 624              	.L45:
 625              		.align	2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 46


 626              	.L44:
 627 0084 00000000 		.word	.LANCHOR0
 628              		.cfi_endproc
 629              	.LFE23:
 631              		.section	.text.put_lfn,"ax",%progbits
 632              		.align	1
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu softvfp
 638              	put_lfn:
 639              	.LVL73:
 640              	.LFB24:
1920:Src/ff.c      **** #endif
1921:Src/ff.c      **** 
1922:Src/ff.c      **** 
1923:Src/ff.c      **** #if !FF_FS_READONLY
1924:Src/ff.c      **** /*-----------------------------------------*/
1925:Src/ff.c      **** /* FAT-LFN: Create an entry of LFN entries */
1926:Src/ff.c      **** /*-----------------------------------------*/
1927:Src/ff.c      **** 
1928:Src/ff.c      **** static void put_lfn (
1929:Src/ff.c      **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1930:Src/ff.c      **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1931:Src/ff.c      **** 	BYTE ord,			/* LFN order (1-20) */
1932:Src/ff.c      **** 	BYTE sum			/* Checksum of the corresponding SFN */
1933:Src/ff.c      **** )
1934:Src/ff.c      **** {
 641              		.loc 1 1934 1 is_stmt 1 view -0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		.loc 1 1934 1 is_stmt 0 view .LVU181
 646 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 647              	.LCFI3:
 648              		.cfi_def_cfa_offset 32
 649              		.cfi_offset 3, -32
 650              		.cfi_offset 4, -28
 651              		.cfi_offset 5, -24
 652              		.cfi_offset 6, -20
 653              		.cfi_offset 7, -16
 654              		.cfi_offset 8, -12
 655              		.cfi_offset 9, -8
 656              		.cfi_offset 14, -4
 657 0004 8046     		mov	r8, r0
 658 0006 0F46     		mov	r7, r1
 659 0008 9146     		mov	r9, r2
1935:Src/ff.c      **** 	UINT i, s;
 660              		.loc 1 1935 2 is_stmt 1 view .LVU182
1936:Src/ff.c      **** 	WCHAR wc;
 661              		.loc 1 1936 2 view .LVU183
1937:Src/ff.c      **** 
1938:Src/ff.c      **** 
1939:Src/ff.c      **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
 662              		.loc 1 1939 2 view .LVU184
 663              		.loc 1 1939 19 is_stmt 0 view .LVU185
 664 000a 4B73     		strb	r3, [r1, #13]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 47


1940:Src/ff.c      **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 665              		.loc 1 1940 2 is_stmt 1 view .LVU186
 666              		.loc 1 1940 17 is_stmt 0 view .LVU187
 667 000c 0F23     		movs	r3, #15
 668              	.LVL74:
 669              		.loc 1 1940 17 view .LVU188
 670 000e CB72     		strb	r3, [r1, #11]
1941:Src/ff.c      **** 	dir[LDIR_Type] = 0;
 671              		.loc 1 1941 2 is_stmt 1 view .LVU189
 672              		.loc 1 1941 17 is_stmt 0 view .LVU190
 673 0010 0024     		movs	r4, #0
 674 0012 0C73     		strb	r4, [r1, #12]
1942:Src/ff.c      **** 	st_word(dir + LDIR_FstClusLO, 0);
 675              		.loc 1 1942 2 is_stmt 1 view .LVU191
 676 0014 2146     		mov	r1, r4
 677              	.LVL75:
 678              		.loc 1 1942 2 is_stmt 0 view .LVU192
 679 0016 07F11A00 		add	r0, r7, #26
 680              	.LVL76:
 681              		.loc 1 1942 2 view .LVU193
 682 001a FFF7FEFF 		bl	st_word
 683              	.LVL77:
1943:Src/ff.c      **** 
1944:Src/ff.c      **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 684              		.loc 1 1944 2 is_stmt 1 view .LVU194
 685              		.loc 1 1944 11 is_stmt 0 view .LVU195
 686 001e 09F1FF36 		add	r6, r9, #-1
 687              		.loc 1 1944 16 view .LVU196
 688 0022 06EB4603 		add	r3, r6, r6, lsl #1
 689              		.loc 1 1944 4 view .LVU197
 690 0026 06EB8306 		add	r6, r6, r3, lsl #2
 691              	.LVL78:
1945:Src/ff.c      **** 	s = wc = 0;
 692              		.loc 1 1945 2 is_stmt 1 view .LVU198
 693              		.loc 1 1945 9 is_stmt 0 view .LVU199
 694 002a 2546     		mov	r5, r4
 695 002c 02E0     		b	.L49
 696              	.LVL79:
 697              	.L48:
1946:Src/ff.c      **** 	do {
1947:Src/ff.c      **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1948:Src/ff.c      **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1949:Src/ff.c      **** 		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
1950:Src/ff.c      **** 	} while (++s < 13);
 698              		.loc 1 1950 10 is_stmt 1 view .LVU200
 699              		.loc 1 1950 2 is_stmt 0 view .LVU201
 700 002e 0134     		adds	r4, r4, #1
 701              	.LVL80:
 702              		.loc 1 1950 2 view .LVU202
 703 0030 0C2C     		cmp	r4, #12
 704 0032 11D8     		bhi	.L54
 705              	.LVL81:
 706              	.L49:
1946:Src/ff.c      **** 	do {
 707              		.loc 1 1946 2 is_stmt 1 view .LVU203
1947:Src/ff.c      **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 708              		.loc 1 1947 3 view .LVU204
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 48


1947:Src/ff.c      **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 709              		.loc 1 1947 6 is_stmt 0 view .LVU205
 710 0034 4FF6FF73 		movw	r3, #65535
 711 0038 9D42     		cmp	r5, r3
 712 003a 02D0     		beq	.L47
1947:Src/ff.c      **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 713              		.loc 1 1947 21 is_stmt 1 discriminator 1 view .LVU206
 714              	.LVL82:
1947:Src/ff.c      **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 715              		.loc 1 1947 24 is_stmt 0 discriminator 1 view .LVU207
 716 003c 38F81650 		ldrh	r5, [r8, r6, lsl #1]
 717              	.LVL83:
1947:Src/ff.c      **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 718              		.loc 1 1947 31 discriminator 1 view .LVU208
 719 0040 0136     		adds	r6, r6, #1
 720              	.LVL84:
 721              	.L47:
1948:Src/ff.c      **** 		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 722              		.loc 1 1948 3 is_stmt 1 view .LVU209
1948:Src/ff.c      **** 		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 723              		.loc 1 1948 23 is_stmt 0 view .LVU210
 724 0042 0C4B     		ldr	r3, .L55
 725 0044 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
1948:Src/ff.c      **** 		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 726              		.loc 1 1948 3 view .LVU211
 727 0046 2946     		mov	r1, r5
 728 0048 3844     		add	r0, r0, r7
 729 004a FFF7FEFF 		bl	st_word
 730              	.LVL85:
1949:Src/ff.c      **** 	} while (++s < 13);
 731              		.loc 1 1949 3 is_stmt 1 view .LVU212
1949:Src/ff.c      **** 	} while (++s < 13);
 732              		.loc 1 1949 6 is_stmt 0 view .LVU213
 733 004e 002D     		cmp	r5, #0
 734 0050 EDD1     		bne	.L48
1949:Src/ff.c      **** 	} while (++s < 13);
 735              		.loc 1 1949 19 view .LVU214
 736 0052 4FF6FF75 		movw	r5, #65535
 737              	.LVL86:
1949:Src/ff.c      **** 	} while (++s < 13);
 738              		.loc 1 1949 19 view .LVU215
 739 0056 EAE7     		b	.L48
 740              	.LVL87:
 741              	.L54:
1951:Src/ff.c      **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 742              		.loc 1 1951 2 is_stmt 1 view .LVU216
 743              		.loc 1 1951 5 is_stmt 0 view .LVU217
 744 0058 4FF6FF73 		movw	r3, #65535
 745 005c 9D42     		cmp	r5, r3
 746 005e 02D0     		beq	.L50
 747              		.loc 1 1951 26 discriminator 2 view .LVU218
 748 0060 38F81630 		ldrh	r3, [r8, r6, lsl #1]
 749              		.loc 1 1951 19 discriminator 2 view .LVU219
 750 0064 0BB9     		cbnz	r3, .L51
 751              	.L50:
 752              		.loc 1 1951 31 is_stmt 1 discriminator 3 view .LVU220
 753              		.loc 1 1951 35 is_stmt 0 discriminator 3 view .LVU221
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 49


 754 0066 49F04009 		orr	r9, r9, #64
 755              	.LVL88:
 756              	.L51:
1952:Src/ff.c      **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 757              		.loc 1 1952 2 is_stmt 1 view .LVU222
 758              		.loc 1 1952 16 is_stmt 0 view .LVU223
 759 006a 87F80090 		strb	r9, [r7]
1953:Src/ff.c      **** }
 760              		.loc 1 1953 1 view .LVU224
 761 006e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 762              	.LVL89:
 763              	.L56:
 764              		.loc 1 1953 1 view .LVU225
 765 0072 00BF     		.align	2
 766              	.L55:
 767 0074 00000000 		.word	.LANCHOR0
 768              		.cfi_endproc
 769              	.LFE24:
 771              		.section	.text.sum_sfn,"ax",%progbits
 772              		.align	1
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 776              		.fpu softvfp
 778              	sum_sfn:
 779              	.LVL90:
 780              	.LFB26:
1954:Src/ff.c      **** 
1955:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
1956:Src/ff.c      **** #endif	/* FF_USE_LFN */
1957:Src/ff.c      **** 
1958:Src/ff.c      **** 
1959:Src/ff.c      **** 
1960:Src/ff.c      **** #if FF_USE_LFN && !FF_FS_READONLY
1961:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1962:Src/ff.c      **** /* FAT-LFN: Create a Numbered SFN                                        */
1963:Src/ff.c      **** /*-----------------------------------------------------------------------*/
1964:Src/ff.c      **** 
1965:Src/ff.c      **** static void gen_numname (
1966:Src/ff.c      **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1967:Src/ff.c      **** 	const BYTE* src,	/* Pointer to SFN in directory form */
1968:Src/ff.c      **** 	const WCHAR* lfn,	/* Pointer to LFN */
1969:Src/ff.c      **** 	UINT seq			/* Sequence number */
1970:Src/ff.c      **** )
1971:Src/ff.c      **** {
1972:Src/ff.c      **** 	BYTE ns[8], c;
1973:Src/ff.c      **** 	UINT i, j;
1974:Src/ff.c      **** 	WCHAR wc;
1975:Src/ff.c      **** 	DWORD sreg;
1976:Src/ff.c      **** 
1977:Src/ff.c      **** 
1978:Src/ff.c      **** 	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
1979:Src/ff.c      **** 
1980:Src/ff.c      **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1981:Src/ff.c      **** 		sreg = seq;
1982:Src/ff.c      **** 		while (*lfn) {	/* Create a CRC as hash value */
1983:Src/ff.c      **** 			wc = *lfn++;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 50


1984:Src/ff.c      **** 			for (i = 0; i < 16; i++) {
1985:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
1986:Src/ff.c      **** 				wc >>= 1;
1987:Src/ff.c      **** 				if (sreg & 0x10000) sreg ^= 0x11021;
1988:Src/ff.c      **** 			}
1989:Src/ff.c      **** 		}
1990:Src/ff.c      **** 		seq = (UINT)sreg;
1991:Src/ff.c      **** 	}
1992:Src/ff.c      **** 
1993:Src/ff.c      **** 	/* Make suffix (~ + hexdecimal) */
1994:Src/ff.c      **** 	i = 7;
1995:Src/ff.c      **** 	do {
1996:Src/ff.c      **** 		c = (BYTE)((seq % 16) + '0'); seq /= 16;
1997:Src/ff.c      **** 		if (c > '9') c += 7;
1998:Src/ff.c      **** 		ns[i--] = c;
1999:Src/ff.c      **** 	} while (i && seq);
2000:Src/ff.c      **** 	ns[i] = '~';
2001:Src/ff.c      **** 
2002:Src/ff.c      **** 	/* Append the suffix to the SFN body */
2003:Src/ff.c      **** 	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
2004:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
2005:Src/ff.c      **** 			if (j == i - 1) break;
2006:Src/ff.c      **** 			j++;
2007:Src/ff.c      **** 		}
2008:Src/ff.c      **** 	}
2009:Src/ff.c      **** 	do {	/* Append the suffix */
2010:Src/ff.c      **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
2011:Src/ff.c      **** 	} while (j < 8);
2012:Src/ff.c      **** }
2013:Src/ff.c      **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
2014:Src/ff.c      **** 
2015:Src/ff.c      **** 
2016:Src/ff.c      **** 
2017:Src/ff.c      **** #if FF_USE_LFN
2018:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2019:Src/ff.c      **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
2020:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2021:Src/ff.c      **** 
2022:Src/ff.c      **** static BYTE sum_sfn (
2023:Src/ff.c      **** 	const BYTE* dir		/* Pointer to the SFN entry */
2024:Src/ff.c      **** )
2025:Src/ff.c      **** {
 781              		.loc 1 2025 1 is_stmt 1 view -0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786              		.loc 1 2025 1 is_stmt 0 view .LVU227
 787 0000 0246     		mov	r2, r0
2026:Src/ff.c      **** 	BYTE sum = 0;
 788              		.loc 1 2026 2 is_stmt 1 view .LVU228
 789              	.LVL91:
2027:Src/ff.c      **** 	UINT n = 11;
 790              		.loc 1 2027 2 view .LVU229
 791              		.loc 1 2027 7 is_stmt 0 view .LVU230
 792 0002 0B21     		movs	r1, #11
2026:Src/ff.c      **** 	BYTE sum = 0;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 51


 793              		.loc 1 2026 7 view .LVU231
 794 0004 0020     		movs	r0, #0
 795              	.LVL92:
 796              	.L58:
2028:Src/ff.c      **** 
2029:Src/ff.c      **** 	do {
 797              		.loc 1 2029 2 is_stmt 1 discriminator 1 view .LVU232
2030:Src/ff.c      **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
 798              		.loc 1 2030 3 discriminator 1 view .LVU233
 799              		.loc 1 2030 20 is_stmt 0 discriminator 1 view .LVU234
 800 0006 C301     		lsls	r3, r0, #7
 801 0008 43EA5000 		orr	r0, r3, r0, lsr #1
 802              	.LVL93:
 803              		.loc 1 2030 20 discriminator 1 view .LVU235
 804 000c C0B2     		uxtb	r0, r0
 805              		.loc 1 2030 35 discriminator 1 view .LVU236
 806 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 807 0010 0132     		adds	r2, r2, #1
 808              	.LVL94:
 809              		.loc 1 2030 7 discriminator 1 view .LVU237
 810 0012 1844     		add	r0, r0, r3
 811 0014 C0B2     		uxtb	r0, r0
 812              	.LVL95:
2031:Src/ff.c      **** 	} while (--n);
 813              		.loc 1 2031 10 is_stmt 1 discriminator 1 view .LVU238
 814              		.loc 1 2031 2 is_stmt 0 discriminator 1 view .LVU239
 815 0016 0139     		subs	r1, r1, #1
 816              	.LVL96:
 817              		.loc 1 2031 2 discriminator 1 view .LVU240
 818 0018 F5D1     		bne	.L58
2032:Src/ff.c      **** 	return sum;
 819              		.loc 1 2032 2 is_stmt 1 view .LVU241
2033:Src/ff.c      **** }
 820              		.loc 1 2033 1 is_stmt 0 view .LVU242
 821 001a 7047     		bx	lr
 822              		.cfi_endproc
 823              	.LFE26:
 825              		.section	.text.get_ldnumber,"ax",%progbits
 826              		.align	1
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu softvfp
 832              	get_ldnumber:
 833              	.LVL97:
 834              	.LFB34:
2034:Src/ff.c      **** 
2035:Src/ff.c      **** #endif	/* FF_USE_LFN */
2036:Src/ff.c      **** 
2037:Src/ff.c      **** 
2038:Src/ff.c      **** 
2039:Src/ff.c      **** #if FF_FS_EXFAT
2040:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2041:Src/ff.c      **** /* exFAT: Checksum                                                       */
2042:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2043:Src/ff.c      **** 
2044:Src/ff.c      **** static WORD xdir_sum (	/* Get checksum of the directoly entry block */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 52


2045:Src/ff.c      **** 	const BYTE* dir		/* Directory entry block to be calculated */
2046:Src/ff.c      **** )
2047:Src/ff.c      **** {
2048:Src/ff.c      **** 	UINT i, szblk;
2049:Src/ff.c      **** 	WORD sum;
2050:Src/ff.c      **** 
2051:Src/ff.c      **** 
2052:Src/ff.c      **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
2053:Src/ff.c      **** 	for (i = sum = 0; i < szblk; i++) {
2054:Src/ff.c      **** 		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
2055:Src/ff.c      **** 			i++;
2056:Src/ff.c      **** 		} else {
2057:Src/ff.c      **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
2058:Src/ff.c      **** 		}
2059:Src/ff.c      **** 	}
2060:Src/ff.c      **** 	return sum;
2061:Src/ff.c      **** }
2062:Src/ff.c      **** 
2063:Src/ff.c      **** 
2064:Src/ff.c      **** 
2065:Src/ff.c      **** static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
2066:Src/ff.c      **** 	const WCHAR* name	/* File name to be calculated */
2067:Src/ff.c      **** )
2068:Src/ff.c      **** {
2069:Src/ff.c      **** 	WCHAR chr;
2070:Src/ff.c      **** 	WORD sum = 0;
2071:Src/ff.c      **** 
2072:Src/ff.c      **** 
2073:Src/ff.c      **** 	while ((chr = *name++) != 0) {
2074:Src/ff.c      **** 		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
2075:Src/ff.c      **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
2076:Src/ff.c      **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
2077:Src/ff.c      **** 	}
2078:Src/ff.c      **** 	return sum;
2079:Src/ff.c      **** }
2080:Src/ff.c      **** 
2081:Src/ff.c      **** 
2082:Src/ff.c      **** #if !FF_FS_READONLY && FF_USE_MKFS
2083:Src/ff.c      **** static DWORD xsum32 (	/* Returns 32-bit checksum */
2084:Src/ff.c      **** 	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
2085:Src/ff.c      **** 	DWORD sum			/* Previous sum value */
2086:Src/ff.c      **** )
2087:Src/ff.c      **** {
2088:Src/ff.c      **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
2089:Src/ff.c      **** 	return sum;
2090:Src/ff.c      **** }
2091:Src/ff.c      **** #endif
2092:Src/ff.c      **** 
2093:Src/ff.c      **** 
2094:Src/ff.c      **** 
2095:Src/ff.c      **** /*-----------------------------------*/
2096:Src/ff.c      **** /* exFAT: Get a directry entry block */
2097:Src/ff.c      **** /*-----------------------------------*/
2098:Src/ff.c      **** 
2099:Src/ff.c      **** static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
2100:Src/ff.c      **** 	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
2101:Src/ff.c      **** )
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 53


2102:Src/ff.c      **** {
2103:Src/ff.c      **** 	FRESULT res;
2104:Src/ff.c      **** 	UINT i, sz_ent;
2105:Src/ff.c      **** 	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
2106:Src/ff.c      **** 
2107:Src/ff.c      **** 
2108:Src/ff.c      **** 	/* Load file directory entry */
2109:Src/ff.c      **** 	res = move_window(dp->obj.fs, dp->sect);
2110:Src/ff.c      **** 	if (res != FR_OK) return res;
2111:Src/ff.c      **** 	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
2112:Src/ff.c      **** 	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
2113:Src/ff.c      **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
2114:Src/ff.c      **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
2115:Src/ff.c      **** 
2116:Src/ff.c      **** 	/* Load stream extension entry */
2117:Src/ff.c      **** 	res = dir_next(dp, 0);
2118:Src/ff.c      **** 	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2119:Src/ff.c      **** 	if (res != FR_OK) return res;
2120:Src/ff.c      **** 	res = move_window(dp->obj.fs, dp->sect);
2121:Src/ff.c      **** 	if (res != FR_OK) return res;
2122:Src/ff.c      **** 	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
2123:Src/ff.c      **** 	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
2124:Src/ff.c      **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2125:Src/ff.c      **** 
2126:Src/ff.c      **** 	/* Load file name entries */
2127:Src/ff.c      **** 	i = 2 * SZDIRE;	/* Name offset to load */
2128:Src/ff.c      **** 	do {
2129:Src/ff.c      **** 		res = dir_next(dp, 0);
2130:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2131:Src/ff.c      **** 		if (res != FR_OK) return res;
2132:Src/ff.c      **** 		res = move_window(dp->obj.fs, dp->sect);
2133:Src/ff.c      **** 		if (res != FR_OK) return res;
2134:Src/ff.c      **** 		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
2135:Src/ff.c      **** 		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
2136:Src/ff.c      **** 	} while ((i += SZDIRE) < sz_ent);
2137:Src/ff.c      **** 
2138:Src/ff.c      **** 	/* Sanity check (do it for only accessible object) */
2139:Src/ff.c      **** 	if (i <= MAXDIRB(FF_MAX_LFN)) {
2140:Src/ff.c      **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2141:Src/ff.c      **** 	}
2142:Src/ff.c      **** 	return FR_OK;
2143:Src/ff.c      **** }
2144:Src/ff.c      **** 
2145:Src/ff.c      **** 
2146:Src/ff.c      **** /*------------------------------------------------------------------*/
2147:Src/ff.c      **** /* exFAT: Initialize object allocation info with loaded entry block */
2148:Src/ff.c      **** /*------------------------------------------------------------------*/
2149:Src/ff.c      **** 
2150:Src/ff.c      **** static void init_alloc_info (
2151:Src/ff.c      **** 	FATFS* fs,		/* Filesystem object */
2152:Src/ff.c      **** 	FFOBJID* obj	/* Object allocation information to be initialized */
2153:Src/ff.c      **** )
2154:Src/ff.c      **** {
2155:Src/ff.c      **** 	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
2156:Src/ff.c      **** 	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2157:Src/ff.c      **** 	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
2158:Src/ff.c      **** 	obj->n_frag = 0;										/* No last fragment info */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 54


2159:Src/ff.c      **** }
2160:Src/ff.c      **** 
2161:Src/ff.c      **** 
2162:Src/ff.c      **** 
2163:Src/ff.c      **** #if !FF_FS_READONLY || FF_FS_RPATH != 0
2164:Src/ff.c      **** /*------------------------------------------------*/
2165:Src/ff.c      **** /* exFAT: Load the object's directory entry block */
2166:Src/ff.c      **** /*------------------------------------------------*/
2167:Src/ff.c      **** 
2168:Src/ff.c      **** static FRESULT load_obj_xdir (
2169:Src/ff.c      **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2170:Src/ff.c      **** 	const FFOBJID* obj	/* Object with its containing directory information */
2171:Src/ff.c      **** )
2172:Src/ff.c      **** {
2173:Src/ff.c      **** 	FRESULT res;
2174:Src/ff.c      **** 
2175:Src/ff.c      **** 	/* Open object containing directory */
2176:Src/ff.c      **** 	dp->obj.fs = obj->fs;
2177:Src/ff.c      **** 	dp->obj.sclust = obj->c_scl;
2178:Src/ff.c      **** 	dp->obj.stat = (BYTE)obj->c_size;
2179:Src/ff.c      **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2180:Src/ff.c      **** 	dp->obj.n_frag = 0;
2181:Src/ff.c      **** 	dp->blk_ofs = obj->c_ofs;
2182:Src/ff.c      **** 
2183:Src/ff.c      **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2184:Src/ff.c      **** 	if (res == FR_OK) {
2185:Src/ff.c      **** 		res = load_xdir(dp);		/* Load the object's entry block */
2186:Src/ff.c      **** 	}
2187:Src/ff.c      **** 	return res;
2188:Src/ff.c      **** }
2189:Src/ff.c      **** #endif
2190:Src/ff.c      **** 
2191:Src/ff.c      **** 
2192:Src/ff.c      **** #if !FF_FS_READONLY
2193:Src/ff.c      **** /*----------------------------------------*/
2194:Src/ff.c      **** /* exFAT: Store the directory entry block */
2195:Src/ff.c      **** /*----------------------------------------*/
2196:Src/ff.c      **** 
2197:Src/ff.c      **** static FRESULT store_xdir (
2198:Src/ff.c      **** 	DIR* dp				/* Pointer to the direcotry object */
2199:Src/ff.c      **** )
2200:Src/ff.c      **** {
2201:Src/ff.c      **** 	FRESULT res;
2202:Src/ff.c      **** 	UINT nent;
2203:Src/ff.c      **** 	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2204:Src/ff.c      **** 
2205:Src/ff.c      **** 	/* Create set sum */
2206:Src/ff.c      **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2207:Src/ff.c      **** 	nent = dirb[XDIR_NumSec] + 1;
2208:Src/ff.c      **** 
2209:Src/ff.c      **** 	/* Store the direcotry entry block to the directory */
2210:Src/ff.c      **** 	res = dir_sdi(dp, dp->blk_ofs);
2211:Src/ff.c      **** 	while (res == FR_OK) {
2212:Src/ff.c      **** 		res = move_window(dp->obj.fs, dp->sect);
2213:Src/ff.c      **** 		if (res != FR_OK) break;
2214:Src/ff.c      **** 		memcpy(dp->dir, dirb, SZDIRE);
2215:Src/ff.c      **** 		dp->obj.fs->wflag = 1;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 55


2216:Src/ff.c      **** 		if (--nent == 0) break;
2217:Src/ff.c      **** 		dirb += SZDIRE;
2218:Src/ff.c      **** 		res = dir_next(dp, 0);
2219:Src/ff.c      **** 	}
2220:Src/ff.c      **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2221:Src/ff.c      **** }
2222:Src/ff.c      **** 
2223:Src/ff.c      **** 
2224:Src/ff.c      **** 
2225:Src/ff.c      **** /*-------------------------------------------*/
2226:Src/ff.c      **** /* exFAT: Create a new directory enrty block */
2227:Src/ff.c      **** /*-------------------------------------------*/
2228:Src/ff.c      **** 
2229:Src/ff.c      **** static void create_xdir (
2230:Src/ff.c      **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2231:Src/ff.c      **** 	const WCHAR* lfn	/* Pointer to the object name */
2232:Src/ff.c      **** )
2233:Src/ff.c      **** {
2234:Src/ff.c      **** 	UINT i;
2235:Src/ff.c      **** 	BYTE nc1, nlen;
2236:Src/ff.c      **** 	WCHAR wc;
2237:Src/ff.c      **** 
2238:Src/ff.c      **** 
2239:Src/ff.c      **** 	/* Create file-directory and stream-extension entry */
2240:Src/ff.c      **** 	memset(dirb, 0, 2 * SZDIRE);
2241:Src/ff.c      **** 	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
2242:Src/ff.c      **** 	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
2243:Src/ff.c      **** 
2244:Src/ff.c      **** 	/* Create file-name entries */
2245:Src/ff.c      **** 	i = SZDIRE * 2;	/* Top of file_name entries */
2246:Src/ff.c      **** 	nlen = nc1 = 0; wc = 1;
2247:Src/ff.c      **** 	do {
2248:Src/ff.c      **** 		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
2249:Src/ff.c      **** 		do {	/* Fill name field */
2250:Src/ff.c      **** 			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
2251:Src/ff.c      **** 			st_word(dirb + i, wc); 	/* Store it */
2252:Src/ff.c      **** 			i += 2;
2253:Src/ff.c      **** 		} while (i % SZDIRE != 0);
2254:Src/ff.c      **** 		nc1++;
2255:Src/ff.c      **** 	} while (lfn[nlen]);	/* Fill next entry if any char follows */
2256:Src/ff.c      **** 
2257:Src/ff.c      **** 	dirb[XDIR_NumName] = nlen;		/* Set name length */
2258:Src/ff.c      **** 	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
2259:Src/ff.c      **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2260:Src/ff.c      **** }
2261:Src/ff.c      **** 
2262:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
2263:Src/ff.c      **** #endif	/* FF_FS_EXFAT */
2264:Src/ff.c      **** 
2265:Src/ff.c      **** 
2266:Src/ff.c      **** 
2267:Src/ff.c      **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
2268:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2269:Src/ff.c      **** /* Read an object from the directory                                     */
2270:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2271:Src/ff.c      **** 
2272:Src/ff.c      **** #define DIR_READ_FILE(dp) dir_read(dp, 0)
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 56


2273:Src/ff.c      **** #define DIR_READ_LABEL(dp) dir_read(dp, 1)
2274:Src/ff.c      **** 
2275:Src/ff.c      **** static FRESULT dir_read (
2276:Src/ff.c      **** 	DIR* dp,		/* Pointer to the directory object */
2277:Src/ff.c      **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2278:Src/ff.c      **** )
2279:Src/ff.c      **** {
2280:Src/ff.c      **** 	FRESULT res = FR_NO_FILE;
2281:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
2282:Src/ff.c      **** 	BYTE attr, b;
2283:Src/ff.c      **** #if FF_USE_LFN
2284:Src/ff.c      **** 	BYTE ord = 0xFF, sum = 0xFF;
2285:Src/ff.c      **** #endif
2286:Src/ff.c      **** 
2287:Src/ff.c      **** 	while (dp->sect) {
2288:Src/ff.c      **** 		res = move_window(fs, dp->sect);
2289:Src/ff.c      **** 		if (res != FR_OK) break;
2290:Src/ff.c      **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
2291:Src/ff.c      **** 		if (b == 0) {
2292:Src/ff.c      **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
2293:Src/ff.c      **** 		}
2294:Src/ff.c      **** #if FF_FS_EXFAT
2295:Src/ff.c      **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2296:Src/ff.c      **** 			if (FF_USE_LABEL && vol) {
2297:Src/ff.c      **** 				if (b == ET_VLABEL) break;	/* Volume label entry? */
2298:Src/ff.c      **** 			} else {
2299:Src/ff.c      **** 				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
2300:Src/ff.c      **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2301:Src/ff.c      **** 					res = load_xdir(dp);	/* Load the entry block */
2302:Src/ff.c      **** 					if (res == FR_OK) {
2303:Src/ff.c      **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2304:Src/ff.c      **** 					}
2305:Src/ff.c      **** 					break;
2306:Src/ff.c      **** 				}
2307:Src/ff.c      **** 			}
2308:Src/ff.c      **** 		} else
2309:Src/ff.c      **** #endif
2310:Src/ff.c      **** 		{	/* On the FAT/FAT32 volume */
2311:Src/ff.c      **** 			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2312:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
2313:Src/ff.c      **** 			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without val
2314:Src/ff.c      **** 				ord = 0xFF;
2315:Src/ff.c      **** 			} else {
2316:Src/ff.c      **** 				if (attr == AM_LFN) {	/* An LFN entry is found */
2317:Src/ff.c      **** 					if (b & LLEF) {		/* Is it start of an LFN sequence? */
2318:Src/ff.c      **** 						sum = dp->dir[LDIR_Chksum];
2319:Src/ff.c      **** 						b &= (BYTE)~LLEF; ord = b;
2320:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;
2321:Src/ff.c      **** 					}
2322:Src/ff.c      **** 					/* Check LFN validity and capture it */
2323:Src/ff.c      **** 					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2324:Src/ff.c      **** 				} else {				/* An SFN entry is found */
2325:Src/ff.c      **** 					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2326:Src/ff.c      **** 						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
2327:Src/ff.c      **** 					}
2328:Src/ff.c      **** 					break;
2329:Src/ff.c      **** 				}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 57


2330:Src/ff.c      **** 			}
2331:Src/ff.c      **** #else		/* Non LFN configuration */
2332:Src/ff.c      **** 			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is
2333:Src/ff.c      **** 				break;
2334:Src/ff.c      **** 			}
2335:Src/ff.c      **** #endif
2336:Src/ff.c      **** 		}
2337:Src/ff.c      **** 		res = dir_next(dp, 0);		/* Next entry */
2338:Src/ff.c      **** 		if (res != FR_OK) break;
2339:Src/ff.c      **** 	}
2340:Src/ff.c      **** 
2341:Src/ff.c      **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2342:Src/ff.c      **** 	return res;
2343:Src/ff.c      **** }
2344:Src/ff.c      **** 
2345:Src/ff.c      **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL || FF_FS_RPATH >= 2 */
2346:Src/ff.c      **** 
2347:Src/ff.c      **** 
2348:Src/ff.c      **** 
2349:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2350:Src/ff.c      **** /* Directory handling - Find an object in the directory                  */
2351:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2352:Src/ff.c      **** 
2353:Src/ff.c      **** static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2354:Src/ff.c      **** 	DIR* dp					/* Pointer to the directory object with the file name */
2355:Src/ff.c      **** )
2356:Src/ff.c      **** {
2357:Src/ff.c      **** 	FRESULT res;
2358:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
2359:Src/ff.c      **** 	BYTE c;
2360:Src/ff.c      **** #if FF_USE_LFN
2361:Src/ff.c      **** 	BYTE a, ord, sum;
2362:Src/ff.c      **** #endif
2363:Src/ff.c      **** 
2364:Src/ff.c      **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2365:Src/ff.c      **** 	if (res != FR_OK) return res;
2366:Src/ff.c      **** #if FF_FS_EXFAT
2367:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2368:Src/ff.c      **** 		BYTE nc;
2369:Src/ff.c      **** 		UINT di, ni;
2370:Src/ff.c      **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2371:Src/ff.c      **** 
2372:Src/ff.c      **** 		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
2373:Src/ff.c      **** #if FF_MAX_LFN < 255
2374:Src/ff.c      **** 			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object 
2375:Src/ff.c      **** #endif
2376:Src/ff.c      **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2377:Src/ff.c      **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2378:Src/ff.c      **** 				if ((di % SZDIRE) == 0) di += 2;
2379:Src/ff.c      **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2380:Src/ff.c      **** 			}
2381:Src/ff.c      **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2382:Src/ff.c      **** 		}
2383:Src/ff.c      **** 		return res;
2384:Src/ff.c      **** 	}
2385:Src/ff.c      **** #endif
2386:Src/ff.c      **** 	/* On the FAT/FAT32 volume */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 58


2387:Src/ff.c      **** #if FF_USE_LFN
2388:Src/ff.c      **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2389:Src/ff.c      **** #endif
2390:Src/ff.c      **** 	do {
2391:Src/ff.c      **** 		res = move_window(fs, dp->sect);
2392:Src/ff.c      **** 		if (res != FR_OK) break;
2393:Src/ff.c      **** 		c = dp->dir[DIR_Name];
2394:Src/ff.c      **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2395:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
2396:Src/ff.c      **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2397:Src/ff.c      **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2398:Src/ff.c      **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2399:Src/ff.c      **** 		} else {
2400:Src/ff.c      **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2401:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2402:Src/ff.c      **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2403:Src/ff.c      **** 						sum = dp->dir[LDIR_Chksum];
2404:Src/ff.c      **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2405:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2406:Src/ff.c      **** 					}
2407:Src/ff.c      **** 					/* Check validity of the LFN entry and compare it with given name */
2408:Src/ff.c      **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2409:Src/ff.c      **** 				}
2410:Src/ff.c      **** 			} else {					/* An SFN entry is found */
2411:Src/ff.c      **** 				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2412:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2413:Src/ff.c      **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2414:Src/ff.c      **** 			}
2415:Src/ff.c      **** 		}
2416:Src/ff.c      **** #else		/* Non LFN configuration */
2417:Src/ff.c      **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2418:Src/ff.c      **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry?
2419:Src/ff.c      **** #endif
2420:Src/ff.c      **** 		res = dir_next(dp, 0);	/* Next entry */
2421:Src/ff.c      **** 	} while (res == FR_OK);
2422:Src/ff.c      **** 
2423:Src/ff.c      **** 	return res;
2424:Src/ff.c      **** }
2425:Src/ff.c      **** 
2426:Src/ff.c      **** 
2427:Src/ff.c      **** 
2428:Src/ff.c      **** 
2429:Src/ff.c      **** #if !FF_FS_READONLY
2430:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2431:Src/ff.c      **** /* Register an object to the directory                                   */
2432:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2433:Src/ff.c      **** 
2434:Src/ff.c      **** static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision
2435:Src/ff.c      **** 	DIR* dp						/* Target directory with object name to be created */
2436:Src/ff.c      **** )
2437:Src/ff.c      **** {
2438:Src/ff.c      **** 	FRESULT res;
2439:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
2440:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
2441:Src/ff.c      **** 	UINT n, len, n_ent;
2442:Src/ff.c      **** 	BYTE sn[12], sum;
2443:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 59


2444:Src/ff.c      **** 
2445:Src/ff.c      **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2446:Src/ff.c      **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
2447:Src/ff.c      **** 
2448:Src/ff.c      **** #if FF_FS_EXFAT
2449:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2450:Src/ff.c      **** 		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2451:Src/ff.c      **** 		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
2452:Src/ff.c      **** 		if (res != FR_OK) return res;
2453:Src/ff.c      **** 		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
2454:Src/ff.c      **** 
2455:Src/ff.c      **** 		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
2456:Src/ff.c      **** 			dp->obj.stat &= ~4;
2457:Src/ff.c      **** 			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
2458:Src/ff.c      **** 			if (res != FR_OK) return res;
2459:Src/ff.c      **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if n
2460:Src/ff.c      **** 			if (res != FR_OK) return res;
2461:Src/ff.c      **** 			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
2462:Src/ff.c      **** 				DIR dj;
2463:Src/ff.c      **** 
2464:Src/ff.c      **** 				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
2465:Src/ff.c      **** 				if (res != FR_OK) return res;
2466:Src/ff.c      **** 				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size *
2467:Src/ff.c      **** 				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
2468:Src/ff.c      **** 				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2469:Src/ff.c      **** 				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
2470:Src/ff.c      **** 				res = store_xdir(&dj);				/* Store the object status */
2471:Src/ff.c      **** 				if (res != FR_OK) return res;
2472:Src/ff.c      **** 			}
2473:Src/ff.c      **** 		}
2474:Src/ff.c      **** 
2475:Src/ff.c      **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2476:Src/ff.c      **** 		return FR_OK;
2477:Src/ff.c      **** 	}
2478:Src/ff.c      **** #endif
2479:Src/ff.c      **** 	/* On the FAT/FAT32 volume */
2480:Src/ff.c      **** 	memcpy(sn, dp->fn, 12);
2481:Src/ff.c      **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2482:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2483:Src/ff.c      **** 		for (n = 1; n < 100; n++) {
2484:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2485:Src/ff.c      **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2486:Src/ff.c      **** 			if (res != FR_OK) break;
2487:Src/ff.c      **** 		}
2488:Src/ff.c      **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2489:Src/ff.c      **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2490:Src/ff.c      **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2491:Src/ff.c      **** 	}
2492:Src/ff.c      **** 
2493:Src/ff.c      **** 	/* Create an SFN with/without LFNs. */
2494:Src/ff.c      **** 	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2495:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
2496:Src/ff.c      **** 	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
2497:Src/ff.c      **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
2498:Src/ff.c      **** 		if (res == FR_OK) {
2499:Src/ff.c      **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2500:Src/ff.c      **** 			do {					/* Store LFN entries in bottom first */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 60


2501:Src/ff.c      **** 				res = move_window(fs, dp->sect);
2502:Src/ff.c      **** 				if (res != FR_OK) break;
2503:Src/ff.c      **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
2504:Src/ff.c      **** 				fs->wflag = 1;
2505:Src/ff.c      **** 				res = dir_next(dp, 0);	/* Next entry */
2506:Src/ff.c      **** 			} while (res == FR_OK && --n_ent);
2507:Src/ff.c      **** 		}
2508:Src/ff.c      **** 	}
2509:Src/ff.c      **** 
2510:Src/ff.c      **** #else	/* Non LFN configuration */
2511:Src/ff.c      **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2512:Src/ff.c      **** 
2513:Src/ff.c      **** #endif
2514:Src/ff.c      **** 
2515:Src/ff.c      **** 	/* Set SFN entry */
2516:Src/ff.c      **** 	if (res == FR_OK) {
2517:Src/ff.c      **** 		res = move_window(fs, dp->sect);
2518:Src/ff.c      **** 		if (res == FR_OK) {
2519:Src/ff.c      **** 			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
2520:Src/ff.c      **** 			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2521:Src/ff.c      **** #if FF_USE_LFN
2522:Src/ff.c      **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2523:Src/ff.c      **** #endif
2524:Src/ff.c      **** 			fs->wflag = 1;
2525:Src/ff.c      **** 		}
2526:Src/ff.c      **** 	}
2527:Src/ff.c      **** 
2528:Src/ff.c      **** 	return res;
2529:Src/ff.c      **** }
2530:Src/ff.c      **** 
2531:Src/ff.c      **** #endif /* !FF_FS_READONLY */
2532:Src/ff.c      **** 
2533:Src/ff.c      **** 
2534:Src/ff.c      **** 
2535:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
2536:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2537:Src/ff.c      **** /* Remove an object from the directory                                   */
2538:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2539:Src/ff.c      **** 
2540:Src/ff.c      **** static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2541:Src/ff.c      **** 	DIR* dp					/* Directory object pointing the entry to be removed */
2542:Src/ff.c      **** )
2543:Src/ff.c      **** {
2544:Src/ff.c      **** 	FRESULT res;
2545:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
2546:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
2547:Src/ff.c      **** 	DWORD last = dp->dptr;
2548:Src/ff.c      **** 
2549:Src/ff.c      **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2550:Src/ff.c      **** 	if (res == FR_OK) {
2551:Src/ff.c      **** 		do {
2552:Src/ff.c      **** 			res = move_window(fs, dp->sect);
2553:Src/ff.c      **** 			if (res != FR_OK) break;
2554:Src/ff.c      **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2555:Src/ff.c      **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
2556:Src/ff.c      **** 			} else {										/* On the FAT/FAT32 volume */
2557:Src/ff.c      **** 				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 61


2558:Src/ff.c      **** 			}
2559:Src/ff.c      **** 			fs->wflag = 1;
2560:Src/ff.c      **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2561:Src/ff.c      **** 			res = dir_next(dp, 0);	/* Next entry */
2562:Src/ff.c      **** 		} while (res == FR_OK);
2563:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2564:Src/ff.c      **** 	}
2565:Src/ff.c      **** #else			/* Non LFN configuration */
2566:Src/ff.c      **** 
2567:Src/ff.c      **** 	res = move_window(fs, dp->sect);
2568:Src/ff.c      **** 	if (res == FR_OK) {
2569:Src/ff.c      **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
2570:Src/ff.c      **** 		fs->wflag = 1;
2571:Src/ff.c      **** 	}
2572:Src/ff.c      **** #endif
2573:Src/ff.c      **** 
2574:Src/ff.c      **** 	return res;
2575:Src/ff.c      **** }
2576:Src/ff.c      **** 
2577:Src/ff.c      **** #endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 */
2578:Src/ff.c      **** 
2579:Src/ff.c      **** 
2580:Src/ff.c      **** 
2581:Src/ff.c      **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2582:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2583:Src/ff.c      **** /* Get file information from directory entry                             */
2584:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2585:Src/ff.c      **** 
2586:Src/ff.c      **** static void get_fileinfo (
2587:Src/ff.c      **** 	DIR* dp,			/* Pointer to the directory object */
2588:Src/ff.c      **** 	FILINFO* fno		/* Pointer to the file information to be filled */
2589:Src/ff.c      **** )
2590:Src/ff.c      **** {
2591:Src/ff.c      **** 	UINT si, di;
2592:Src/ff.c      **** #if FF_USE_LFN
2593:Src/ff.c      **** 	BYTE lcf;
2594:Src/ff.c      **** 	WCHAR wc, hs;
2595:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
2596:Src/ff.c      **** 	UINT nw;
2597:Src/ff.c      **** #else
2598:Src/ff.c      **** 	TCHAR c;
2599:Src/ff.c      **** #endif
2600:Src/ff.c      **** 
2601:Src/ff.c      **** 
2602:Src/ff.c      **** 	fno->fname[0] = 0;			/* Invaidate file info */
2603:Src/ff.c      **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
2604:Src/ff.c      **** 
2605:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
2606:Src/ff.c      **** #if FF_FS_EXFAT
2607:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
2608:Src/ff.c      **** 		UINT nc = 0;
2609:Src/ff.c      **** 
2610:Src/ff.c      **** 		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
2611:Src/ff.c      **** 		hs = 0;
2612:Src/ff.c      **** 		while (nc < fs->dirbuf[XDIR_NumName]) {
2613:Src/ff.c      **** 			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
2614:Src/ff.c      **** 			if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 62


2615:Src/ff.c      **** 			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
2616:Src/ff.c      **** 			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
2617:Src/ff.c      **** 				hs = wc; continue;					/* Get low surrogate */
2618:Src/ff.c      **** 			}
2619:Src/ff.c      **** 			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encodin
2620:Src/ff.c      **** 			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
2621:Src/ff.c      **** 			di += nw;
2622:Src/ff.c      **** 			hs = 0;
2623:Src/ff.c      **** 		}
2624:Src/ff.c      **** 		if (hs != 0) di = 0;					/* Broken surrogate pair? */
2625:Src/ff.c      **** 		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
2626:Src/ff.c      **** 		fno->fname[di] = 0;						/* Terminate the name */
2627:Src/ff.c      **** 		fno->altname[0] = 0;					/* exFAT does not support SFN */
2628:Src/ff.c      **** 
2629:Src/ff.c      **** 		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
2630:Src/ff.c      **** 		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2631:Src/ff.c      **** 		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
2632:Src/ff.c      **** 		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
2633:Src/ff.c      **** 		return;
2634:Src/ff.c      **** 	} else
2635:Src/ff.c      **** #endif
2636:Src/ff.c      **** 	{	/* FAT/FAT32 volume */
2637:Src/ff.c      **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2638:Src/ff.c      **** 			si = di = 0;
2639:Src/ff.c      **** 			hs = 0;
2640:Src/ff.c      **** 			while (fs->lfnbuf[si] != 0) {
2641:Src/ff.c      **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
2642:Src/ff.c      **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2643:Src/ff.c      **** 					hs = wc; continue;		/* Get low surrogate */
2644:Src/ff.c      **** 				}
2645:Src/ff.c      **** 				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encodi
2646:Src/ff.c      **** 				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
2647:Src/ff.c      **** 				di += nw;
2648:Src/ff.c      **** 				hs = 0;
2649:Src/ff.c      **** 			}
2650:Src/ff.c      **** 			if (hs != 0) di = 0;	/* Broken surrogate pair? */
2651:Src/ff.c      **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
2652:Src/ff.c      **** 		}
2653:Src/ff.c      **** 	}
2654:Src/ff.c      **** 
2655:Src/ff.c      **** 	si = di = 0;
2656:Src/ff.c      **** 	while (si < 11) {		/* Get SFN from SFN entry */
2657:Src/ff.c      **** 		wc = dp->dir[si++];			/* Get a char */
2658:Src/ff.c      **** 		if (wc == ' ') continue;	/* Skip padding spaces */
2659:Src/ff.c      **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
2660:Src/ff.c      **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
2661:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
2662:Src/ff.c      **** 		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed *
2663:Src/ff.c      **** 			wc = wc << 8 | dp->dir[si++];
2664:Src/ff.c      **** 		}
2665:Src/ff.c      **** 		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
2666:Src/ff.c      **** 		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
2667:Src/ff.c      **** 		nw = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in API encoding */
2668:Src/ff.c      **** 		if (nw == 0) { di = 0; break; }		/* Buffer overflow? */
2669:Src/ff.c      **** 		di += nw;
2670:Src/ff.c      **** #else					/* ANSI/OEM output */
2671:Src/ff.c      **** 		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 63


2672:Src/ff.c      **** #endif
2673:Src/ff.c      **** 	}
2674:Src/ff.c      **** 	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
2675:Src/ff.c      **** 
2676:Src/ff.c      **** 	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
2677:Src/ff.c      **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
2678:Src/ff.c      **** 			fno->fname[di++] = '?';
2679:Src/ff.c      **** 		} else {
2680:Src/ff.c      **** 			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] wi
2681:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
2682:Src/ff.c      **** 				if (wc == '.') lcf = NS_EXT;
2683:Src/ff.c      **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
2684:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
2685:Src/ff.c      **** 			}
2686:Src/ff.c      **** 		}
2687:Src/ff.c      **** 		fno->fname[di] = 0;	/* Terminate the LFN */
2688:Src/ff.c      **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
2689:Src/ff.c      **** 	}
2690:Src/ff.c      **** 
2691:Src/ff.c      **** #else	/* Non-LFN configuration */
2692:Src/ff.c      **** 	si = di = 0;
2693:Src/ff.c      **** 	while (si < 11) {		/* Copy name body and extension */
2694:Src/ff.c      **** 		c = (TCHAR)dp->dir[si++];
2695:Src/ff.c      **** 		if (c == ' ') continue;		/* Skip padding spaces */
2696:Src/ff.c      **** 		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
2697:Src/ff.c      **** 		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
2698:Src/ff.c      **** 		fno->fname[di++] = c;
2699:Src/ff.c      **** 	}
2700:Src/ff.c      **** 	fno->fname[di] = 0;		/* Terminate the SFN */
2701:Src/ff.c      **** #endif
2702:Src/ff.c      **** 
2703:Src/ff.c      **** 	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
2704:Src/ff.c      **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
2705:Src/ff.c      **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
2706:Src/ff.c      **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
2707:Src/ff.c      **** }
2708:Src/ff.c      **** 
2709:Src/ff.c      **** #endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2710:Src/ff.c      **** 
2711:Src/ff.c      **** 
2712:Src/ff.c      **** 
2713:Src/ff.c      **** #if FF_USE_FIND && FF_FS_MINIMIZE <= 1
2714:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2715:Src/ff.c      **** /* Pattern matching                                                      */
2716:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2717:Src/ff.c      **** 
2718:Src/ff.c      **** #define FIND_RECURS	4	/* Maximum number of wildcard terms in the pattern to limit recursion */
2719:Src/ff.c      **** 
2720:Src/ff.c      **** 
2721:Src/ff.c      **** static DWORD get_achar (	/* Get a character and advance ptr */
2722:Src/ff.c      **** 	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
2723:Src/ff.c      **** )
2724:Src/ff.c      **** {
2725:Src/ff.c      **** 	DWORD chr;
2726:Src/ff.c      **** 
2727:Src/ff.c      **** 
2728:Src/ff.c      **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unicode input */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 64


2729:Src/ff.c      **** 	chr = tchar2uni(ptr);
2730:Src/ff.c      **** 	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
2731:Src/ff.c      **** 	chr = ff_wtoupper(chr);
2732:Src/ff.c      **** 
2733:Src/ff.c      **** #else									/* ANSI/OEM input */
2734:Src/ff.c      **** 	chr = (BYTE)*(*ptr)++;				/* Get a byte */
2735:Src/ff.c      **** 	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
2736:Src/ff.c      **** #if FF_CODE_PAGE == 0
2737:Src/ff.c      **** 	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2738:Src/ff.c      **** #elif FF_CODE_PAGE < 900
2739:Src/ff.c      **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2740:Src/ff.c      **** #endif
2741:Src/ff.c      **** #if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
2742:Src/ff.c      **** 	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
2743:Src/ff.c      **** 		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
2744:Src/ff.c      **** 	}
2745:Src/ff.c      **** #endif
2746:Src/ff.c      **** 
2747:Src/ff.c      **** #endif
2748:Src/ff.c      **** 	return chr;
2749:Src/ff.c      **** }
2750:Src/ff.c      **** 
2751:Src/ff.c      **** 
2752:Src/ff.c      **** static int pattern_match (	/* 0:mismatched, 1:matched */
2753:Src/ff.c      **** 	const TCHAR* pat,	/* Matching pattern */
2754:Src/ff.c      **** 	const TCHAR* nam,	/* String to be tested */
2755:Src/ff.c      **** 	UINT skip,			/* Number of pre-skip chars (number of ?s, b8:infinite (* specified)) */
2756:Src/ff.c      **** 	UINT recur			/* Recursion count */
2757:Src/ff.c      **** )
2758:Src/ff.c      **** {
2759:Src/ff.c      **** 	const TCHAR *pptr, *nptr;
2760:Src/ff.c      **** 	DWORD pchr, nchr;
2761:Src/ff.c      **** 	UINT sk;
2762:Src/ff.c      **** 
2763:Src/ff.c      **** 
2764:Src/ff.c      **** 	while ((skip & 0xFF) != 0) {		/* Pre-skip name chars */
2765:Src/ff.c      **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2766:Src/ff.c      **** 		skip--;
2767:Src/ff.c      **** 	}
2768:Src/ff.c      **** 	if (*pat == 0 && skip) return 1;	/* Matched? (short circuit) */
2769:Src/ff.c      **** 
2770:Src/ff.c      **** 	do {
2771:Src/ff.c      **** 		pptr = pat; nptr = nam;			/* Top of pattern and name to match */
2772:Src/ff.c      **** 		for (;;) {
2773:Src/ff.c      **** 			if (*pptr == '?' || *pptr == '*') {	/* Wildcard term? */
2774:Src/ff.c      **** 				if (recur == 0) return 0;	/* Too many wildcard terms? */
2775:Src/ff.c      **** 				sk = 0;
2776:Src/ff.c      **** 				do {	/* Analyze the wildcard term */
2777:Src/ff.c      **** 					if (*pptr++ == '?') sk++; else sk |= 0x100;
2778:Src/ff.c      **** 				} while (*pptr == '?' || *pptr == '*');
2779:Src/ff.c      **** 				if (pattern_match(pptr, nptr, sk, recur - 1)) return 1;	/* Test new branch (recursive call) */
2780:Src/ff.c      **** 				nchr = *nptr; break;	/* Branch mismatched */
2781:Src/ff.c      **** 			}
2782:Src/ff.c      **** 			pchr = get_achar(&pptr);	/* Get a pattern char */
2783:Src/ff.c      **** 			nchr = get_achar(&nptr);	/* Get a name char */
2784:Src/ff.c      **** 			if (pchr != nchr) break;	/* Branch mismatched? */
2785:Src/ff.c      **** 			if (pchr == 0) return 1;	/* Branch matched? (matched at end of both strings) */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 65


2786:Src/ff.c      **** 		}
2787:Src/ff.c      **** 		get_achar(&nam);			/* nam++ */
2788:Src/ff.c      **** 	} while (skip && nchr);		/* Retry until end of name if infinite search is specified */
2789:Src/ff.c      **** 
2790:Src/ff.c      **** 	return 0;
2791:Src/ff.c      **** }
2792:Src/ff.c      **** 
2793:Src/ff.c      **** #endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
2794:Src/ff.c      **** 
2795:Src/ff.c      **** 
2796:Src/ff.c      **** 
2797:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2798:Src/ff.c      **** /* Pick a top segment and create the object name in directory form       */
2799:Src/ff.c      **** /*-----------------------------------------------------------------------*/
2800:Src/ff.c      **** 
2801:Src/ff.c      **** static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2802:Src/ff.c      **** 	DIR* dp,					/* Pointer to the directory object */
2803:Src/ff.c      **** 	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
2804:Src/ff.c      **** )
2805:Src/ff.c      **** {
2806:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
2807:Src/ff.c      **** 	BYTE b, cf;
2808:Src/ff.c      **** 	WCHAR wc, *lfn;
2809:Src/ff.c      **** 	DWORD uc;
2810:Src/ff.c      **** 	UINT i, ni, si, di;
2811:Src/ff.c      **** 	const TCHAR *p;
2812:Src/ff.c      **** 
2813:Src/ff.c      **** 
2814:Src/ff.c      **** 	/* Create LFN into LFN working buffer */
2815:Src/ff.c      **** 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2816:Src/ff.c      **** 	for (;;) {
2817:Src/ff.c      **** 		uc = tchar2uni(&p);			/* Get a character */
2818:Src/ff.c      **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
2819:Src/ff.c      **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
2820:Src/ff.c      **** 		wc = (WCHAR)uc;
2821:Src/ff.c      **** 		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
2822:Src/ff.c      **** 		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal char
2823:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2824:Src/ff.c      **** 		lfn[di++] = wc;				/* Store the Unicode character */
2825:Src/ff.c      **** 	}
2826:Src/ff.c      **** 	if (wc < ' ') {				/* Stopped at end of the path? */
2827:Src/ff.c      **** 		cf = NS_LAST;			/* Last segment */
2828:Src/ff.c      **** 	} else {					/* Stopped at a separator */
2829:Src/ff.c      **** 		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
2830:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
2831:Src/ff.c      **** 		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
2832:Src/ff.c      **** 	}
2833:Src/ff.c      **** 	*path = p;					/* Return pointer to the next segment */
2834:Src/ff.c      **** 
2835:Src/ff.c      **** #if FF_FS_RPATH != 0
2836:Src/ff.c      **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2837:Src/ff.c      **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2838:Src/ff.c      **** 		lfn[di] = 0;
2839:Src/ff.c      **** 		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
2840:Src/ff.c      **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2841:Src/ff.c      **** 		}
2842:Src/ff.c      **** 		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 66


2843:Src/ff.c      **** 		return FR_OK;
2844:Src/ff.c      **** 	}
2845:Src/ff.c      **** #endif
2846:Src/ff.c      **** 	while (di) {					/* Snip off trailing spaces and dots if exist */
2847:Src/ff.c      **** 		wc = lfn[di - 1];
2848:Src/ff.c      **** 		if (wc != ' ' && wc != '.') break;
2849:Src/ff.c      **** 		di--;
2850:Src/ff.c      **** 	}
2851:Src/ff.c      **** 	lfn[di] = 0;							/* LFN is created into the working buffer */
2852:Src/ff.c      **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
2853:Src/ff.c      **** 
2854:Src/ff.c      **** 	/* Create SFN in directory form */
2855:Src/ff.c      **** 	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
2856:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
2857:Src/ff.c      **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
2858:Src/ff.c      **** 
2859:Src/ff.c      **** 	memset(dp->fn, ' ', 11);
2860:Src/ff.c      **** 	i = b = 0; ni = 8;
2861:Src/ff.c      **** 	for (;;) {
2862:Src/ff.c      **** 		wc = lfn[si++];					/* Get an LFN character */
2863:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
2864:Src/ff.c      **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
2865:Src/ff.c      **** 			cf |= NS_LOSS | NS_LFN;
2866:Src/ff.c      **** 			continue;
2867:Src/ff.c      **** 		}
2868:Src/ff.c      **** 
2869:Src/ff.c      **** 		if (i >= ni || si == di) {		/* End of field? */
2870:Src/ff.c      **** 			if (ni == 11) {				/* Name extension overflow? */
2871:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
2872:Src/ff.c      **** 				break;
2873:Src/ff.c      **** 			}
2874:Src/ff.c      **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
2875:Src/ff.c      **** 			if (si > di) break;						/* No name extension? */
2876:Src/ff.c      **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
2877:Src/ff.c      **** 			continue;
2878:Src/ff.c      **** 		}
2879:Src/ff.c      **** 
2880:Src/ff.c      **** 		if (wc >= 0x80) {	/* Is this an extended character? */
2881:Src/ff.c      **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
2882:Src/ff.c      **** #if FF_CODE_PAGE == 0
2883:Src/ff.c      **** 			if (ExCvt) {	/* In SBCS cfg */
2884:Src/ff.c      **** 				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2885:Src/ff.c      **** 				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2886:Src/ff.c      **** 			} else {		/* In DBCS cfg */
2887:Src/ff.c      **** 				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
2888:Src/ff.c      **** 			}
2889:Src/ff.c      **** #elif FF_CODE_PAGE < 900	/* In SBCS cfg */
2890:Src/ff.c      **** 			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2891:Src/ff.c      **** 			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2892:Src/ff.c      **** #else						/* In DBCS cfg */
2893:Src/ff.c      **** 			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
2894:Src/ff.c      **** #endif
2895:Src/ff.c      **** 		}
2896:Src/ff.c      **** 
2897:Src/ff.c      **** 		if (wc >= 0x100) {				/* Is this a DBC? */
2898:Src/ff.c      **** 			if (i >= ni - 1) {			/* Field overflow? */
2899:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 67


2900:Src/ff.c      **** 				i = ni; continue;		/* Next field */
2901:Src/ff.c      **** 			}
2902:Src/ff.c      **** 			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
2903:Src/ff.c      **** 		} else {						/* SBC */
2904:Src/ff.c      **** 			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
2905:Src/ff.c      **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2906:Src/ff.c      **** 			} else {
2907:Src/ff.c      **** 				if (IsUpper(wc)) {		/* ASCII upper case? */
2908:Src/ff.c      **** 					b |= 2;
2909:Src/ff.c      **** 				}
2910:Src/ff.c      **** 				if (IsLower(wc)) {		/* ASCII lower case? */
2911:Src/ff.c      **** 					b |= 1; wc -= 0x20;
2912:Src/ff.c      **** 				}
2913:Src/ff.c      **** 			}
2914:Src/ff.c      **** 		}
2915:Src/ff.c      **** 		dp->fn[i++] = (BYTE)wc;
2916:Src/ff.c      **** 	}
2917:Src/ff.c      **** 
2918:Src/ff.c      **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2919:Src/ff.c      **** 
2920:Src/ff.c      **** 	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
2921:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
2922:Src/ff.c      **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
2923:Src/ff.c      **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
2924:Src/ff.c      **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
2925:Src/ff.c      **** 	}
2926:Src/ff.c      **** 
2927:Src/ff.c      **** 	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
2928:Src/ff.c      **** 
2929:Src/ff.c      **** 	return FR_OK;
2930:Src/ff.c      **** 
2931:Src/ff.c      **** 
2932:Src/ff.c      **** #else	/* FF_USE_LFN : Non-LFN configuration */
2933:Src/ff.c      **** 	BYTE c, d, *sfn;
2934:Src/ff.c      **** 	UINT ni, si, i;
2935:Src/ff.c      **** 	const char *p;
2936:Src/ff.c      **** 
2937:Src/ff.c      **** 	/* Create file name in directory form */
2938:Src/ff.c      **** 	p = *path; sfn = dp->fn;
2939:Src/ff.c      **** 	memset(sfn, ' ', 11);
2940:Src/ff.c      **** 	si = i = 0; ni = 8;
2941:Src/ff.c      **** #if FF_FS_RPATH != 0
2942:Src/ff.c      **** 	if (p[si] == '.') { /* Is this a dot entry? */
2943:Src/ff.c      **** 		for (;;) {
2944:Src/ff.c      **** 			c = (BYTE)p[si++];
2945:Src/ff.c      **** 			if (c != '.' || si >= 3) break;
2946:Src/ff.c      **** 			sfn[i++] = c;
2947:Src/ff.c      **** 		}
2948:Src/ff.c      **** 		if (!IsSeparator(c) && c > ' ') return FR_INVALID_NAME;
2949:Src/ff.c      **** 		*path = p + si;					/* Return pointer to the next segment */
2950:Src/ff.c      **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2951:Src/ff.c      **** 		return FR_OK;
2952:Src/ff.c      **** 	}
2953:Src/ff.c      **** #endif
2954:Src/ff.c      **** 	for (;;) {
2955:Src/ff.c      **** 		c = (BYTE)p[si++];				/* Get a byte */
2956:Src/ff.c      **** 		if (c <= ' ') break; 			/* Break if end of the path name */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 68


2957:Src/ff.c      **** 		if (IsSeparator(c)) {			/* Break if a separator is found */
2958:Src/ff.c      **** 			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
2959:Src/ff.c      **** 			break;
2960:Src/ff.c      **** 		}
2961:Src/ff.c      **** 		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
2962:Src/ff.c      **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
2963:Src/ff.c      **** 			i = 8; ni = 11;				/* Enter file extension field */
2964:Src/ff.c      **** 			continue;
2965:Src/ff.c      **** 		}
2966:Src/ff.c      **** #if FF_CODE_PAGE == 0
2967:Src/ff.c      **** 		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
2968:Src/ff.c      **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
2969:Src/ff.c      **** 		}
2970:Src/ff.c      **** #elif FF_CODE_PAGE < 900
2971:Src/ff.c      **** 		if (c >= 0x80) {				/* Is SBC extended character? */
2972:Src/ff.c      **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
2973:Src/ff.c      **** 		}
2974:Src/ff.c      **** #endif
2975:Src/ff.c      **** 		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
2976:Src/ff.c      **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2977:Src/ff.c      **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2978:Src/ff.c      **** 			sfn[i++] = c;
2979:Src/ff.c      **** 			sfn[i++] = d;
2980:Src/ff.c      **** 		} else {						/* SBC */
2981:Src/ff.c      **** 			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SF
2982:Src/ff.c      **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
2983:Src/ff.c      **** 			sfn[i++] = c;
2984:Src/ff.c      **** 		}
2985:Src/ff.c      **** 	}
2986:Src/ff.c      **** 	*path = &p[si];						/* Return pointer to the next segment */
2987:Src/ff.c      **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
2988:Src/ff.c      **** 
2989:Src/ff.c      **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
2990:Src/ff.c      **** 	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the pat
2991:Src/ff.c      **** 
2992:Src/ff.c      **** 	return FR_OK;
2993:Src/ff.c      **** #endif /* FF_USE_LFN */
2994:Src/ff.c      **** }
2995:Src/ff.c      **** 
2996:Src/ff.c      **** 
2997:Src/ff.c      **** 
2998:Src/ff.c      **** 
2999:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3000:Src/ff.c      **** /* Follow a file path                                                    */
3001:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3002:Src/ff.c      **** 
3003:Src/ff.c      **** static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
3004:Src/ff.c      **** 	DIR* dp,					/* Directory object to return last directory and found object */
3005:Src/ff.c      **** 	const TCHAR* path			/* Full-path string to find a file or directory */
3006:Src/ff.c      **** )
3007:Src/ff.c      **** {
3008:Src/ff.c      **** 	FRESULT res;
3009:Src/ff.c      **** 	BYTE ns;
3010:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
3011:Src/ff.c      **** 
3012:Src/ff.c      **** 
3013:Src/ff.c      **** #if FF_FS_RPATH != 0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 69


3014:Src/ff.c      **** 	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading s
3015:Src/ff.c      **** 		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
3016:Src/ff.c      **** 	} else
3017:Src/ff.c      **** #endif
3018:Src/ff.c      **** 	{										/* With heading separator */
3019:Src/ff.c      **** 		while (IsSeparator(*path)) path++;	/* Strip separators */
3020:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
3021:Src/ff.c      **** 	}
3022:Src/ff.c      **** #if FF_FS_EXFAT
3023:Src/ff.c      **** 	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
3024:Src/ff.c      **** #if FF_FS_RPATH != 0
3025:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
3026:Src/ff.c      **** 		DIR dj;
3027:Src/ff.c      **** 
3028:Src/ff.c      **** 		dp->obj.c_scl = fs->cdc_scl;
3029:Src/ff.c      **** 		dp->obj.c_size = fs->cdc_size;
3030:Src/ff.c      **** 		dp->obj.c_ofs = fs->cdc_ofs;
3031:Src/ff.c      **** 		res = load_obj_xdir(&dj, &dp->obj);
3032:Src/ff.c      **** 		if (res != FR_OK) return res;
3033:Src/ff.c      **** 		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
3034:Src/ff.c      **** 		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3035:Src/ff.c      **** 	}
3036:Src/ff.c      **** #endif
3037:Src/ff.c      **** #endif
3038:Src/ff.c      **** 
3039:Src/ff.c      **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
3040:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NONAME;
3041:Src/ff.c      **** 		res = dir_sdi(dp, 0);
3042:Src/ff.c      **** 
3043:Src/ff.c      **** 	} else {								/* Follow path */
3044:Src/ff.c      **** 		for (;;) {
3045:Src/ff.c      **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
3046:Src/ff.c      **** 			if (res != FR_OK) break;
3047:Src/ff.c      **** 			res = dir_find(dp);				/* Find an object with the segment name */
3048:Src/ff.c      **** 			ns = dp->fn[NSFLAG];
3049:Src/ff.c      **** 			if (res != FR_OK) {				/* Failed to find the object */
3050:Src/ff.c      **** 				if (res == FR_NO_FILE) {	/* Object is not found */
3051:Src/ff.c      **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
3052:Src/ff.c      **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
3053:Src/ff.c      **** 						dp->fn[NSFLAG] = NS_NONAME;
3054:Src/ff.c      **** 						res = FR_OK;
3055:Src/ff.c      **** 					} else {							/* Could not find the object */
3056:Src/ff.c      **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
3057:Src/ff.c      **** 					}
3058:Src/ff.c      **** 				}
3059:Src/ff.c      **** 				break;
3060:Src/ff.c      **** 			}
3061:Src/ff.c      **** 			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
3062:Src/ff.c      **** 			/* Get into the sub-directory */
3063:Src/ff.c      **** 			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
3064:Src/ff.c      **** 				res = FR_NO_PATH; break;
3065:Src/ff.c      **** 			}
3066:Src/ff.c      **** #if FF_FS_EXFAT
3067:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
3068:Src/ff.c      **** 				dp->obj.c_scl = dp->obj.sclust;
3069:Src/ff.c      **** 				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
3070:Src/ff.c      **** 				dp->obj.c_ofs = dp->blk_ofs;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 70


3071:Src/ff.c      **** 				init_alloc_info(fs, &dp->obj);	/* Open next directory */
3072:Src/ff.c      **** 			} else
3073:Src/ff.c      **** #endif
3074:Src/ff.c      **** 			{
3075:Src/ff.c      **** 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
3076:Src/ff.c      **** 			}
3077:Src/ff.c      **** 		}
3078:Src/ff.c      **** 	}
3079:Src/ff.c      **** 
3080:Src/ff.c      **** 	return res;
3081:Src/ff.c      **** }
3082:Src/ff.c      **** 
3083:Src/ff.c      **** 
3084:Src/ff.c      **** 
3085:Src/ff.c      **** 
3086:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3087:Src/ff.c      **** /* Get logical drive number from path name                               */
3088:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3089:Src/ff.c      **** 
3090:Src/ff.c      **** static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer)
3091:Src/ff.c      **** 	const TCHAR** path		/* Pointer to pointer to the path name */
3092:Src/ff.c      **** )
3093:Src/ff.c      **** {
 835              		.loc 1 3093 1 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840              		.loc 1 3093 1 is_stmt 0 view .LVU244
 841 0000 0146     		mov	r1, r0
3094:Src/ff.c      **** 	const TCHAR *tp, *tt;
 842              		.loc 1 3094 2 is_stmt 1 view .LVU245
3095:Src/ff.c      **** 	TCHAR tc;
 843              		.loc 1 3095 2 view .LVU246
3096:Src/ff.c      **** 	int i;
 844              		.loc 1 3096 2 view .LVU247
3097:Src/ff.c      **** 	int vol = -1;
 845              		.loc 1 3097 2 view .LVU248
 846              	.LVL98:
3098:Src/ff.c      **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
3099:Src/ff.c      **** 	const char *sp;
3100:Src/ff.c      **** 	char c;
3101:Src/ff.c      **** #endif
3102:Src/ff.c      **** 
3103:Src/ff.c      **** 	tt = tp = *path;
 847              		.loc 1 3103 2 view .LVU249
 848              		.loc 1 3103 10 is_stmt 0 view .LVU250
 849 0002 0068     		ldr	r0, [r0]
 850              	.LVL99:
3104:Src/ff.c      **** 	if (!tp) return vol;	/* Invalid path name? */
 851              		.loc 1 3104 2 is_stmt 1 view .LVU251
 852              		.loc 1 3104 5 is_stmt 0 view .LVU252
 853 0004 20B3     		cbz	r0, .L64
3103:Src/ff.c      **** 	if (!tp) return vol;	/* Invalid path name? */
 854              		.loc 1 3103 5 view .LVU253
 855 0006 0246     		mov	r2, r0
 856              	.LVL100:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 71


 857              	.L62:
3105:Src/ff.c      **** 	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 858              		.loc 1 3105 2 is_stmt 1 discriminator 2 view .LVU254
 859              		.loc 1 3105 5 discriminator 2 view .LVU255
 860              		.loc 1 3105 8 is_stmt 0 discriminator 2 view .LVU256
 861 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 862 000a 0132     		adds	r2, r2, #1
 863              	.LVL101:
 864              		.loc 1 3105 23 is_stmt 1 discriminator 2 view .LVU257
 865              		.loc 1 3105 2 is_stmt 0 discriminator 2 view .LVU258
 866 000c 1F2B     		cmp	r3, #31
 867 000e 01D9     		bls	.L61
 868              		.loc 1 3105 42 discriminator 1 view .LVU259
 869 0010 3A2B     		cmp	r3, #58
 870 0012 F9D1     		bne	.L62
 871              	.L61:
3106:Src/ff.c      **** 
3107:Src/ff.c      **** 	if (tc == ':') {	/* DOS/Windows style volume ID? */
 872              		.loc 1 3107 2 is_stmt 1 view .LVU260
 873              		.loc 1 3107 5 is_stmt 0 view .LVU261
 874 0014 3A2B     		cmp	r3, #58
 875 0016 01D0     		beq	.L69
3108:Src/ff.c      **** 		i = FF_VOLUMES;
3109:Src/ff.c      **** 		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
3110:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
3111:Src/ff.c      **** 		}
3112:Src/ff.c      **** #if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
3113:Src/ff.c      **** 		else {
3114:Src/ff.c      **** 			i = 0;
3115:Src/ff.c      **** 			do {
3116:Src/ff.c      **** 				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3117:Src/ff.c      **** 				do {	/* Compare the volume ID with path name */
3118:Src/ff.c      **** 					c = *sp++; tc = *tp++;
3119:Src/ff.c      **** 					if (IsLower(c)) c -= 0x20;
3120:Src/ff.c      **** 					if (IsLower(tc)) tc -= 0x20;
3121:Src/ff.c      **** 				} while (c && (TCHAR)c == tc);
3122:Src/ff.c      **** 			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
3123:Src/ff.c      **** 		}
3124:Src/ff.c      **** #endif
3125:Src/ff.c      **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3126:Src/ff.c      **** 			vol = i;		/* Drive number */
3127:Src/ff.c      **** 			*path = tt;		/* Snip the drive prefix off */
3128:Src/ff.c      **** 		}
3129:Src/ff.c      **** 		return vol;
3130:Src/ff.c      **** 	}
3131:Src/ff.c      **** #if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
3132:Src/ff.c      **** 	if (*tp == '/') {			/* Is there a volume ID? */
3133:Src/ff.c      **** 		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
3134:Src/ff.c      **** 		i = 0;
3135:Src/ff.c      **** 		do {
3136:Src/ff.c      **** 			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
3137:Src/ff.c      **** 			do {	/* Compare the volume ID with path name */
3138:Src/ff.c      **** 				c = *sp++; tc = *(++tt);
3139:Src/ff.c      **** 				if (IsLower(c)) c -= 0x20;
3140:Src/ff.c      **** 				if (IsLower(tc)) tc -= 0x20;
3141:Src/ff.c      **** 			} while (c && (TCHAR)c == tc);
3142:Src/ff.c      **** 		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID unti
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 72


3143:Src/ff.c      **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3144:Src/ff.c      **** 			vol = i;		/* Drive number */
3145:Src/ff.c      **** 			*path = tt;		/* Snip the drive prefix off */
3146:Src/ff.c      **** 		}
3147:Src/ff.c      **** 		return vol;
3148:Src/ff.c      **** 	}
3149:Src/ff.c      **** #endif
3150:Src/ff.c      **** 	/* No drive prefix is found */
3151:Src/ff.c      **** #if FF_FS_RPATH != 0
3152:Src/ff.c      **** 	vol = CurrVol;	/* Default drive is current drive */
3153:Src/ff.c      **** #else
3154:Src/ff.c      **** 	vol = 0;		/* Default drive is 0 */
3155:Src/ff.c      **** #endif
3156:Src/ff.c      **** 	return vol;		/* Return the default drive */
 876              		.loc 1 3156 9 view .LVU262
 877 0018 0020     		movs	r0, #0
 878              	.LVL102:
3157:Src/ff.c      **** }
 879              		.loc 1 3157 1 view .LVU263
 880 001a 7047     		bx	lr
 881              	.LVL103:
 882              	.L69:
3108:Src/ff.c      **** 		i = FF_VOLUMES;
 883              		.loc 1 3108 3 is_stmt 1 view .LVU264
3109:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
 884              		.loc 1 3109 3 view .LVU265
3109:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
 885              		.loc 1 3109 7 is_stmt 0 view .LVU266
 886 001c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 887              	.LVL104:
3109:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
 888              		.loc 1 3109 7 view .LVU267
 889 001e A3F1300C 		sub	ip, r3, #48
 890 0022 5FFA8CFC 		uxtb	ip, ip
3109:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
 891              		.loc 1 3109 6 view .LVU268
 892 0026 BCF1090F 		cmp	ip, #9
 893 002a 0ED8     		bhi	.L66
3109:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
 894              		.loc 1 3109 26 discriminator 1 view .LVU269
 895 002c 0230     		adds	r0, r0, #2
 896              	.LVL105:
3109:Src/ff.c      **** 			i = (int)*tp - '0';	/* Get the LD number */
 897              		.loc 1 3109 20 discriminator 1 view .LVU270
 898 002e 9042     		cmp	r0, r2
 899 0030 02D0     		beq	.L70
3097:Src/ff.c      **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
 900              		.loc 1 3097 6 view .LVU271
 901 0032 4FF0FF30 		mov	r0, #-1
 902 0036 7047     		bx	lr
 903              	.L70:
3110:Src/ff.c      **** 		}
 904              		.loc 1 3110 4 is_stmt 1 view .LVU272
3110:Src/ff.c      **** 		}
 905              		.loc 1 3110 6 is_stmt 0 view .LVU273
 906 0038 A3F13000 		sub	r0, r3, #48
 907              	.LVL106:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 73


3125:Src/ff.c      **** 			vol = i;		/* Drive number */
 908              		.loc 1 3125 3 is_stmt 1 view .LVU274
3125:Src/ff.c      **** 			vol = i;		/* Drive number */
 909              		.loc 1 3125 6 is_stmt 0 view .LVU275
 910 003c 0028     		cmp	r0, #0
 911 003e 02DD     		ble	.L71
3097:Src/ff.c      **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
 912              		.loc 1 3097 6 view .LVU276
 913 0040 4FF0FF30 		mov	r0, #-1
 914              	.LVL107:
3129:Src/ff.c      **** 	}
 915              		.loc 1 3129 3 is_stmt 1 view .LVU277
3129:Src/ff.c      **** 	}
 916              		.loc 1 3129 10 is_stmt 0 view .LVU278
 917 0044 7047     		bx	lr
 918              	.LVL108:
 919              	.L71:
3126:Src/ff.c      **** 			*path = tt;		/* Snip the drive prefix off */
 920              		.loc 1 3126 4 is_stmt 1 view .LVU279
3127:Src/ff.c      **** 		}
 921              		.loc 1 3127 4 view .LVU280
3127:Src/ff.c      **** 		}
 922              		.loc 1 3127 10 is_stmt 0 view .LVU281
 923 0046 0A60     		str	r2, [r1]
 924              	.LVL109:
3127:Src/ff.c      **** 		}
 925              		.loc 1 3127 10 view .LVU282
 926 0048 7047     		bx	lr
 927              	.LVL110:
 928              	.L66:
3097:Src/ff.c      **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
 929              		.loc 1 3097 6 view .LVU283
 930 004a 4FF0FF30 		mov	r0, #-1
 931              	.LVL111:
3097:Src/ff.c      **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
 932              		.loc 1 3097 6 view .LVU284
 933 004e 7047     		bx	lr
 934              	.LVL112:
 935              	.L64:
3104:Src/ff.c      **** 	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 936              		.loc 1 3104 18 view .LVU285
 937 0050 4FF0FF30 		mov	r0, #-1
 938              	.LVL113:
3104:Src/ff.c      **** 	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 939              		.loc 1 3104 18 view .LVU286
 940 0054 7047     		bx	lr
 941              		.cfi_endproc
 942              	.LFE34:
 944              		.section	.text.validate,"ax",%progbits
 945              		.align	1
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu softvfp
 951              	validate:
 952              	.LVL114:
 953              	.LFB38:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 74


3158:Src/ff.c      **** 
3159:Src/ff.c      **** 
3160:Src/ff.c      **** 
3161:Src/ff.c      **** 
3162:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3163:Src/ff.c      **** /* GPT support functions                                                 */
3164:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3165:Src/ff.c      **** 
3166:Src/ff.c      **** #if FF_LBA64
3167:Src/ff.c      **** 
3168:Src/ff.c      **** /* Calculate CRC32 in byte-by-byte */
3169:Src/ff.c      **** 
3170:Src/ff.c      **** static DWORD crc32 (	/* Returns next CRC value */
3171:Src/ff.c      **** 	DWORD crc,			/* Current CRC value */
3172:Src/ff.c      **** 	BYTE d				/* A byte to be processed */
3173:Src/ff.c      **** )
3174:Src/ff.c      **** {
3175:Src/ff.c      **** 	BYTE b;
3176:Src/ff.c      **** 
3177:Src/ff.c      **** 
3178:Src/ff.c      **** 	for (b = 1; b; b <<= 1) {
3179:Src/ff.c      **** 		crc ^= (d & b) ? 1 : 0;
3180:Src/ff.c      **** 		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
3181:Src/ff.c      **** 	}
3182:Src/ff.c      **** 	return crc;
3183:Src/ff.c      **** }
3184:Src/ff.c      **** 
3185:Src/ff.c      **** 
3186:Src/ff.c      **** /* Check validity of GPT header */
3187:Src/ff.c      **** 
3188:Src/ff.c      **** static int test_gpt_header (	/* 0:Invalid, 1:Valid */
3189:Src/ff.c      **** 	const BYTE* gpth			/* Pointer to the GPT header */
3190:Src/ff.c      **** )
3191:Src/ff.c      **** {
3192:Src/ff.c      **** 	UINT i;
3193:Src/ff.c      **** 	DWORD bcc;
3194:Src/ff.c      **** 
3195:Src/ff.c      **** 
3196:Src/ff.c      **** 	if (memcmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16)) return 0;	/* Check sign, versi
3197:Src/ff.c      **** 	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++) {		/* Check header BCC */
3198:Src/ff.c      **** 		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
3199:Src/ff.c      **** 	}
3200:Src/ff.c      **** 	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
3201:Src/ff.c      **** 	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes
3202:Src/ff.c      **** 	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;	/* Table size (must be 128 entries or less) */
3203:Src/ff.c      **** 
3204:Src/ff.c      **** 	return 1;
3205:Src/ff.c      **** }
3206:Src/ff.c      **** 
3207:Src/ff.c      **** #if !FF_FS_READONLY && FF_USE_MKFS
3208:Src/ff.c      **** 
3209:Src/ff.c      **** /* Generate random value */
3210:Src/ff.c      **** static DWORD make_rand (
3211:Src/ff.c      **** 	DWORD seed,		/* Seed value */
3212:Src/ff.c      **** 	BYTE* buff,		/* Output buffer */
3213:Src/ff.c      **** 	UINT n			/* Data length */
3214:Src/ff.c      **** )
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 75


3215:Src/ff.c      **** {
3216:Src/ff.c      **** 	UINT r;
3217:Src/ff.c      **** 
3218:Src/ff.c      **** 
3219:Src/ff.c      **** 	if (seed == 0) seed = 1;
3220:Src/ff.c      **** 	do {
3221:Src/ff.c      **** 		for (r = 0; r < 8; r++) seed = seed & 1 ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits the
3222:Src/ff.c      **** 		*buff++ = (BYTE)seed;
3223:Src/ff.c      **** 	} while (--n);
3224:Src/ff.c      **** 	return seed;
3225:Src/ff.c      **** }
3226:Src/ff.c      **** 
3227:Src/ff.c      **** #endif
3228:Src/ff.c      **** #endif
3229:Src/ff.c      **** 
3230:Src/ff.c      **** 
3231:Src/ff.c      **** 
3232:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3233:Src/ff.c      **** /* Load a sector and check if it is an FAT VBR                           */
3234:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3235:Src/ff.c      **** 
3236:Src/ff.c      **** /* Check what the sector is */
3237:Src/ff.c      **** 
3238:Src/ff.c      **** static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and inval
3239:Src/ff.c      **** 	FATFS* fs,			/* Filesystem object */
3240:Src/ff.c      **** 	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
3241:Src/ff.c      **** )
3242:Src/ff.c      **** {
3243:Src/ff.c      **** 	WORD w, sign;
3244:Src/ff.c      **** 	BYTE b;
3245:Src/ff.c      **** 
3246:Src/ff.c      **** 
3247:Src/ff.c      **** 	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
3248:Src/ff.c      **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
3249:Src/ff.c      **** 	sign = ld_word(fs->win + BS_55AA);
3250:Src/ff.c      **** #if FF_FS_EXFAT
3251:Src/ff.c      **** 	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* I
3252:Src/ff.c      **** #endif
3253:Src/ff.c      **** 	b = fs->win[BS_JmpBoot];
3254:Src/ff.c      **** 	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near 
3255:Src/ff.c      **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
3256:Src/ff.c      **** 			return 0;	/* It is an FAT32 VBR */
3257:Src/ff.c      **** 		}
3258:Src/ff.c      **** 		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be
3259:Src/ff.c      **** 		w = ld_word(fs->win + BPB_BytsPerSec);
3260:Src/ff.c      **** 		b = fs->win[BPB_SecPerClus];
3261:Src/ff.c      **** 		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096
3262:Src/ff.c      **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
3263:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
3264:Src/ff.c      **** 			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
3265:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
3266:Src/ff.c      **** 			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Pr
3267:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
3268:Src/ff.c      **** 				return 0;	/* It can be presumed an FAT VBR */
3269:Src/ff.c      **** 		}
3270:Src/ff.c      **** 	}
3271:Src/ff.c      **** 	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 76


3272:Src/ff.c      **** }
3273:Src/ff.c      **** 
3274:Src/ff.c      **** 
3275:Src/ff.c      **** /* Find an FAT volume */
3276:Src/ff.c      **** /* (It supports only generic partitioning rules, MBR, GPT and SFD) */
3277:Src/ff.c      **** 
3278:Src/ff.c      **** static UINT find_volume (	/* Returns BS status found in the hosting drive */
3279:Src/ff.c      **** 	FATFS* fs,		/* Filesystem object */
3280:Src/ff.c      **** 	UINT part		/* Partition to fined = 0:auto, 1..:forced */
3281:Src/ff.c      **** )
3282:Src/ff.c      **** {
3283:Src/ff.c      **** 	UINT fmt, i;
3284:Src/ff.c      **** 	DWORD mbr_pt[4];
3285:Src/ff.c      **** 
3286:Src/ff.c      **** 
3287:Src/ff.c      **** 	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
3288:Src/ff.c      **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, 
3289:Src/ff.c      **** 
3290:Src/ff.c      **** 	/* Sector 0 is not an FAT VBR or forced partition number wants a partition */
3291:Src/ff.c      **** 
3292:Src/ff.c      **** #if FF_LBA64
3293:Src/ff.c      **** 	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
3294:Src/ff.c      **** 		DWORD n_ent, v_ent, ofs;
3295:Src/ff.c      **** 		QWORD pt_lba;
3296:Src/ff.c      **** 
3297:Src/ff.c      **** 		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
3298:Src/ff.c      **** 		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
3299:Src/ff.c      **** 		n_ent = ld_dword(fs->win + GPTH_PtNum);		/* Number of entries */
3300:Src/ff.c      **** 		pt_lba = ld_qword(fs->win + GPTH_PtOfs);	/* Table location */
3301:Src/ff.c      **** 		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
3302:Src/ff.c      **** 			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
3303:Src/ff.c      **** 			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
3304:Src/ff.c      **** 			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
3305:Src/ff.c      **** 				v_ent++;
3306:Src/ff.c      **** 				fmt = check_fs(fs, ld_qword(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
3307:Src/ff.c      **** 				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
3308:Src/ff.c      **** 				if (part != 0 && v_ent == part) return fmt;		/* Forced partition order (regardless of it is val
3309:Src/ff.c      **** 			}
3310:Src/ff.c      **** 		}
3311:Src/ff.c      **** 		return 3;	/* Not found */
3312:Src/ff.c      **** 	}
3313:Src/ff.c      **** #endif
3314:Src/ff.c      **** 	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
3315:Src/ff.c      **** 	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
3316:Src/ff.c      **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
3317:Src/ff.c      **** 	}
3318:Src/ff.c      **** 	i = part ? part - 1 : 0;		/* Table index to find first */
3319:Src/ff.c      **** 	do {							/* Find an FAT volume */
3320:Src/ff.c      **** 		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
3321:Src/ff.c      **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
3322:Src/ff.c      **** 	return fmt;
3323:Src/ff.c      **** }
3324:Src/ff.c      **** 
3325:Src/ff.c      **** 
3326:Src/ff.c      **** 
3327:Src/ff.c      **** 
3328:Src/ff.c      **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 77


3329:Src/ff.c      **** /* Determine logical drive number and mount the volume if needed         */
3330:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3331:Src/ff.c      **** 
3332:Src/ff.c      **** static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
3333:Src/ff.c      **** 	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
3334:Src/ff.c      **** 	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
3335:Src/ff.c      **** 	BYTE mode					/* !=0: Check write protection for write access */
3336:Src/ff.c      **** )
3337:Src/ff.c      **** {
3338:Src/ff.c      **** 	int vol;
3339:Src/ff.c      **** 	DSTATUS stat;
3340:Src/ff.c      **** 	LBA_t bsect;
3341:Src/ff.c      **** 	DWORD tsect, sysect, fasize, nclst, szbfat;
3342:Src/ff.c      **** 	WORD nrsv;
3343:Src/ff.c      **** 	FATFS *fs;
3344:Src/ff.c      **** 	UINT fmt;
3345:Src/ff.c      **** 
3346:Src/ff.c      **** 
3347:Src/ff.c      **** 	/* Get logical drive number */
3348:Src/ff.c      **** 	*rfs = 0;
3349:Src/ff.c      **** 	vol = get_ldnumber(path);
3350:Src/ff.c      **** 	if (vol < 0) return FR_INVALID_DRIVE;
3351:Src/ff.c      **** 
3352:Src/ff.c      **** 	/* Check if the filesystem object is valid or not */
3353:Src/ff.c      **** 	fs = FatFs[vol];					/* Get pointer to the filesystem object */
3354:Src/ff.c      **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
3355:Src/ff.c      **** #if FF_FS_REENTRANT
3356:Src/ff.c      **** 	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
3357:Src/ff.c      **** #endif
3358:Src/ff.c      **** 	*rfs = fs;							/* Return pointer to the filesystem object */
3359:Src/ff.c      **** 
3360:Src/ff.c      **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
3361:Src/ff.c      **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
3362:Src/ff.c      **** 		stat = disk_status(fs->pdrv);
3363:Src/ff.c      **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
3364:Src/ff.c      **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
3365:Src/ff.c      **** 				return FR_WRITE_PROTECTED;
3366:Src/ff.c      **** 			}
3367:Src/ff.c      **** 			return FR_OK;				/* The filesystem object is already valid */
3368:Src/ff.c      **** 		}
3369:Src/ff.c      **** 	}
3370:Src/ff.c      **** 
3371:Src/ff.c      **** 	/* The filesystem object is not valid. */
3372:Src/ff.c      **** 	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initializ
3373:Src/ff.c      **** 
3374:Src/ff.c      **** 	fs->fs_type = 0;					/* Clear the filesystem object */
3375:Src/ff.c      **** 	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
3376:Src/ff.c      **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
3377:Src/ff.c      **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
3378:Src/ff.c      **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
3379:Src/ff.c      **** 	}
3380:Src/ff.c      **** 	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
3381:Src/ff.c      **** 		return FR_WRITE_PROTECTED;
3382:Src/ff.c      **** 	}
3383:Src/ff.c      **** #if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
3384:Src/ff.c      **** 	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3385:Src/ff.c      **** 	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 78


3386:Src/ff.c      **** #endif
3387:Src/ff.c      **** 
3388:Src/ff.c      **** 	/* Find an FAT volume on the drive */
3389:Src/ff.c      **** 	fmt = find_volume(fs, LD2PT(vol));
3390:Src/ff.c      **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
3391:Src/ff.c      **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3392:Src/ff.c      **** 	bsect = fs->winsect;					/* Volume offset */
3393:Src/ff.c      **** 
3394:Src/ff.c      **** 	/* An FAT volume is found (bsect). Following code initializes the filesystem object */
3395:Src/ff.c      **** 
3396:Src/ff.c      **** #if FF_FS_EXFAT
3397:Src/ff.c      **** 	if (fmt == 1) {
3398:Src/ff.c      **** 		QWORD maxlba;
3399:Src/ff.c      **** 		DWORD so, cv, bcl, i;
3400:Src/ff.c      **** 
3401:Src/ff.c      **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3402:Src/ff.c      **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3403:Src/ff.c      **** 
3404:Src/ff.c      **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (mus
3405:Src/ff.c      **** 
3406:Src/ff.c      **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3407:Src/ff.c      **** 			return FR_NO_FILESYSTEM;
3408:Src/ff.c      **** 		}
3409:Src/ff.c      **** 
3410:Src/ff.c      **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
3411:Src/ff.c      **** 		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-
3412:Src/ff.c      **** 
3413:Src/ff.c      **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3414:Src/ff.c      **** 
3415:Src/ff.c      **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3416:Src/ff.c      **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3417:Src/ff.c      **** 
3418:Src/ff.c      **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3419:Src/ff.c      **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
3420:Src/ff.c      **** 
3421:Src/ff.c      **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3422:Src/ff.c      **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3423:Src/ff.c      **** 		fs->n_fatent = nclst + 2;
3424:Src/ff.c      **** 
3425:Src/ff.c      **** 		/* Boundaries and Limits */
3426:Src/ff.c      **** 		fs->volbase = bsect;
3427:Src/ff.c      **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3428:Src/ff.c      **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3429:Src/ff.c      **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3430:Src/ff.c      **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3431:Src/ff.c      **** 
3432:Src/ff.c      **** 		/* Get bitmap location and check if it is contiguous (implementation assumption) */
3433:Src/ff.c      **** 		so = i = 0;
3434:Src/ff.c      **** 		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
3435:Src/ff.c      **** 			if (i == 0) {
3436:Src/ff.c      **** 				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
3437:Src/ff.c      **** 				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
3438:Src/ff.c      **** 				so++;
3439:Src/ff.c      **** 			}
3440:Src/ff.c      **** 			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
3441:Src/ff.c      **** 			i = (i + SZDIRE) % SS(fs);	/* Next entry */
3442:Src/ff.c      **** 		}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 79


3443:Src/ff.c      **** 		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
3444:Src/ff.c      **** 		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
3445:Src/ff.c      **** 		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
3446:Src/ff.c      **** 		for (;;) {	/* Check if bitmap is contiguous */
3447:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
3448:Src/ff.c      **** 			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
3449:Src/ff.c      **** 			if (cv == 0xFFFFFFFF) break;				/* Last link? */
3450:Src/ff.c      **** 			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
3451:Src/ff.c      **** 		}
3452:Src/ff.c      **** 
3453:Src/ff.c      **** #if !FF_FS_READONLY
3454:Src/ff.c      **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3455:Src/ff.c      **** #endif
3456:Src/ff.c      **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3457:Src/ff.c      **** 	} else
3458:Src/ff.c      **** #endif	/* FF_FS_EXFAT */
3459:Src/ff.c      **** 	{
3460:Src/ff.c      **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3461:Src/ff.c      **** 
3462:Src/ff.c      **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
3463:Src/ff.c      **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
3464:Src/ff.c      **** 		fs->fsize = fasize;
3465:Src/ff.c      **** 
3466:Src/ff.c      **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
3467:Src/ff.c      **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3468:Src/ff.c      **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
3469:Src/ff.c      **** 
3470:Src/ff.c      **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
3471:Src/ff.c      **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3472:Src/ff.c      **** 
3473:Src/ff.c      **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3474:Src/ff.c      **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3475:Src/ff.c      **** 
3476:Src/ff.c      **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
3477:Src/ff.c      **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3478:Src/ff.c      **** 
3479:Src/ff.c      **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
3480:Src/ff.c      **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
3481:Src/ff.c      **** 
3482:Src/ff.c      **** 		/* Determine the FAT sub type */
3483:Src/ff.c      **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3484:Src/ff.c      **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
3485:Src/ff.c      **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
3486:Src/ff.c      **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3487:Src/ff.c      **** 		fmt = 0;
3488:Src/ff.c      **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
3489:Src/ff.c      **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3490:Src/ff.c      **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3491:Src/ff.c      **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
3492:Src/ff.c      **** 
3493:Src/ff.c      **** 		/* Boundaries and Limits */
3494:Src/ff.c      **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
3495:Src/ff.c      **** 		fs->volbase = bsect;							/* Volume start sector */
3496:Src/ff.c      **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
3497:Src/ff.c      **** 		fs->database = bsect + sysect;					/* Data start sector */
3498:Src/ff.c      **** 		if (fmt == FS_FAT32) {
3499:Src/ff.c      **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 80


3500:Src/ff.c      **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
3501:Src/ff.c      **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3502:Src/ff.c      **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
3503:Src/ff.c      **** 		} else {
3504:Src/ff.c      **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
3505:Src/ff.c      **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
3506:Src/ff.c      **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3507:Src/ff.c      **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3508:Src/ff.c      **** 		}
3509:Src/ff.c      **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3510:Src/ff.c      **** 
3511:Src/ff.c      **** #if !FF_FS_READONLY
3512:Src/ff.c      **** 		/* Get FSInfo if available */
3513:Src/ff.c      **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3514:Src/ff.c      **** 		fs->fsi_flag = 0x80;
3515:Src/ff.c      **** #if (FF_FS_NOFSINFO & 3) != 3
3516:Src/ff.c      **** 		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
3517:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3518:Src/ff.c      **** 			&& move_window(fs, bsect + 1) == FR_OK)
3519:Src/ff.c      **** 		{
3520:Src/ff.c      **** 			fs->fsi_flag = 0;
3521:Src/ff.c      **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
3522:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
3523:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3524:Src/ff.c      **** 			{
3525:Src/ff.c      **** #if (FF_FS_NOFSINFO & 1) == 0
3526:Src/ff.c      **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3527:Src/ff.c      **** #endif
3528:Src/ff.c      **** #if (FF_FS_NOFSINFO & 2) == 0
3529:Src/ff.c      **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3530:Src/ff.c      **** #endif
3531:Src/ff.c      **** 			}
3532:Src/ff.c      **** 		}
3533:Src/ff.c      **** #endif	/* (FF_FS_NOFSINFO & 3) != 3 */
3534:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
3535:Src/ff.c      **** 	}
3536:Src/ff.c      **** 
3537:Src/ff.c      **** 	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
3538:Src/ff.c      **** 	fs->id = ++Fsid;		/* Volume mount ID */
3539:Src/ff.c      **** #if FF_USE_LFN == 1
3540:Src/ff.c      **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3541:Src/ff.c      **** #if FF_FS_EXFAT
3542:Src/ff.c      **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3543:Src/ff.c      **** #endif
3544:Src/ff.c      **** #endif
3545:Src/ff.c      **** #if FF_FS_RPATH != 0
3546:Src/ff.c      **** 	fs->cdir = 0;			/* Initialize current directory */
3547:Src/ff.c      **** #endif
3548:Src/ff.c      **** #if FF_FS_LOCK != 0			/* Clear file lock semaphores */
3549:Src/ff.c      **** 	clear_lock(fs);
3550:Src/ff.c      **** #endif
3551:Src/ff.c      **** 	return FR_OK;
3552:Src/ff.c      **** }
3553:Src/ff.c      **** 
3554:Src/ff.c      **** 
3555:Src/ff.c      **** 
3556:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 81


3557:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3558:Src/ff.c      **** /* Check if the file/directory object is valid or not                    */
3559:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3560:Src/ff.c      **** 
3561:Src/ff.c      **** static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3562:Src/ff.c      **** 	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity
3563:Src/ff.c      **** 	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
3564:Src/ff.c      **** )
3565:Src/ff.c      **** {
 954              		.loc 1 3565 1 is_stmt 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              		.loc 1 3565 1 is_stmt 0 view .LVU288
 959 0000 38B5     		push	{r3, r4, r5, lr}
 960              	.LCFI4:
 961              		.cfi_def_cfa_offset 16
 962              		.cfi_offset 3, -16
 963              		.cfi_offset 4, -12
 964              		.cfi_offset 5, -8
 965              		.cfi_offset 14, -4
 966 0002 0D46     		mov	r5, r1
3566:Src/ff.c      **** 	FRESULT res = FR_INVALID_OBJECT;
 967              		.loc 1 3566 2 is_stmt 1 view .LVU289
 968              	.LVL115:
3567:Src/ff.c      **** 
3568:Src/ff.c      **** 
3569:Src/ff.c      **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
 969              		.loc 1 3569 2 view .LVU290
 970              		.loc 1 3569 5 is_stmt 0 view .LVU291
 971 0004 0446     		mov	r4, r0
 972 0006 98B1     		cbz	r0, .L74
 973              		.loc 1 3569 16 discriminator 1 view .LVU292
 974 0008 0368     		ldr	r3, [r0]
 975              		.loc 1 3569 10 discriminator 1 view .LVU293
 976 000a 9BB1     		cbz	r3, .L75
 977              		.loc 1 3569 31 discriminator 2 view .LVU294
 978 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 979              		.loc 1 3569 21 discriminator 2 view .LVU295
 980 000e A2B1     		cbz	r2, .L76
 981              		.loc 1 3569 47 discriminator 3 view .LVU296
 982 0010 8188     		ldrh	r1, [r0, #4]
 983              	.LVL116:
 984              		.loc 1 3569 62 discriminator 3 view .LVU297
 985 0012 DA88     		ldrh	r2, [r3, #6]
 986              		.loc 1 3569 41 discriminator 3 view .LVU298
 987 0014 9142     		cmp	r1, r2
 988 0016 03D0     		beq	.L80
3566:Src/ff.c      **** 	FRESULT res = FR_INVALID_OBJECT;
 989              		.loc 1 3566 10 view .LVU299
 990 0018 0920     		movs	r0, #9
 991              	.LVL117:
3570:Src/ff.c      **** #if FF_FS_REENTRANT
3571:Src/ff.c      **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
3572:Src/ff.c      **** 			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initializ
3573:Src/ff.c      **** 				res = FR_OK;
3574:Src/ff.c      **** 			} else {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 82


3575:Src/ff.c      **** 				unlock_fs(obj->fs, FR_OK);
3576:Src/ff.c      **** 			}
3577:Src/ff.c      **** 		} else {
3578:Src/ff.c      **** 			res = FR_TIMEOUT;
3579:Src/ff.c      **** 		}
3580:Src/ff.c      **** #else
3581:Src/ff.c      **** 		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
3582:Src/ff.c      **** 			res = FR_OK;
3583:Src/ff.c      **** 		}
3584:Src/ff.c      **** #endif
3585:Src/ff.c      **** 	}
3586:Src/ff.c      **** 	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 992              		.loc 1 3586 34 view .LVU300
 993 001a 0024     		movs	r4, #0
 994              	.LVL118:
 995              	.L73:
 996              		.loc 1 3586 7 discriminator 4 view .LVU301
 997 001c 2C60     		str	r4, [r5]
3587:Src/ff.c      **** 	return res;
 998              		.loc 1 3587 2 is_stmt 1 discriminator 4 view .LVU302
3588:Src/ff.c      **** }
 999              		.loc 1 3588 1 is_stmt 0 discriminator 4 view .LVU303
 1000 001e 38BD     		pop	{r3, r4, r5, pc}
 1001              	.LVL119:
 1002              	.L80:
3581:Src/ff.c      **** 			res = FR_OK;
 1003              		.loc 1 3581 3 is_stmt 1 view .LVU304
3581:Src/ff.c      **** 			res = FR_OK;
 1004              		.loc 1 3581 9 is_stmt 0 view .LVU305
 1005 0020 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1006              	.LVL120:
3581:Src/ff.c      **** 			res = FR_OK;
 1007              		.loc 1 3581 9 view .LVU306
 1008 0022 FFF7FEFF 		bl	disk_status
 1009              	.LVL121:
3581:Src/ff.c      **** 			res = FR_OK;
 1010              		.loc 1 3581 6 view .LVU307
 1011 0026 10F00100 		ands	r0, r0, #1
 1012 002a 09D1     		bne	.L78
3582:Src/ff.c      **** 		}
 1013              		.loc 1 3582 4 is_stmt 1 view .LVU308
 1014              	.LVL122:
3586:Src/ff.c      **** 	return res;
 1015              		.loc 1 3586 2 view .LVU309
3586:Src/ff.c      **** 	return res;
 1016              		.loc 1 3586 34 is_stmt 0 view .LVU310
 1017 002c 2468     		ldr	r4, [r4]
 1018              	.LVL123:
3586:Src/ff.c      **** 	return res;
 1019              		.loc 1 3586 34 view .LVU311
 1020 002e F5E7     		b	.L73
 1021              	.LVL124:
 1022              	.L74:
3566:Src/ff.c      **** 
 1023              		.loc 1 3566 10 view .LVU312
 1024 0030 0920     		movs	r0, #9
 1025              	.LVL125:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 83


3566:Src/ff.c      **** 
 1026              		.loc 1 3566 10 view .LVU313
 1027 0032 F3E7     		b	.L73
 1028              	.LVL126:
 1029              	.L75:
3586:Src/ff.c      **** 	return res;
 1030              		.loc 1 3586 34 view .LVU314
 1031 0034 1C46     		mov	r4, r3
3566:Src/ff.c      **** 
 1032              		.loc 1 3566 10 view .LVU315
 1033 0036 0920     		movs	r0, #9
 1034              	.LVL127:
3566:Src/ff.c      **** 
 1035              		.loc 1 3566 10 view .LVU316
 1036 0038 F0E7     		b	.L73
 1037              	.LVL128:
 1038              	.L76:
3566:Src/ff.c      **** 
 1039              		.loc 1 3566 10 view .LVU317
 1040 003a 0920     		movs	r0, #9
 1041              	.LVL129:
3586:Src/ff.c      **** 	return res;
 1042              		.loc 1 3586 34 view .LVU318
 1043 003c 0024     		movs	r4, #0
 1044              	.LVL130:
3586:Src/ff.c      **** 	return res;
 1045              		.loc 1 3586 34 view .LVU319
 1046 003e EDE7     		b	.L73
 1047              	.LVL131:
 1048              	.L78:
3566:Src/ff.c      **** 
 1049              		.loc 1 3566 10 view .LVU320
 1050 0040 0920     		movs	r0, #9
3586:Src/ff.c      **** 	return res;
 1051              		.loc 1 3586 34 view .LVU321
 1052 0042 0024     		movs	r4, #0
 1053              	.LVL132:
3586:Src/ff.c      **** 	return res;
 1054              		.loc 1 3586 34 view .LVU322
 1055 0044 EAE7     		b	.L73
 1056              		.cfi_endproc
 1057              	.LFE38:
 1059              		.section	.text.sync_window,"ax",%progbits
 1060              		.align	1
 1061              		.syntax unified
 1062              		.thumb
 1063              		.thumb_func
 1064              		.fpu softvfp
 1066              	sync_window:
 1067              	.LVL133:
 1068              	.LFB8:
1028:Src/ff.c      **** 	FRESULT res = FR_OK;
 1069              		.loc 1 1028 1 is_stmt 1 view -0
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 0
 1072              		@ frame_needed = 0, uses_anonymous_args = 0
1028:Src/ff.c      **** 	FRESULT res = FR_OK;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 84


 1073              		.loc 1 1028 1 is_stmt 0 view .LVU324
 1074 0000 70B5     		push	{r4, r5, r6, lr}
 1075              	.LCFI5:
 1076              		.cfi_def_cfa_offset 16
 1077              		.cfi_offset 4, -16
 1078              		.cfi_offset 5, -12
 1079              		.cfi_offset 6, -8
 1080              		.cfi_offset 14, -4
1029:Src/ff.c      **** 
 1081              		.loc 1 1029 2 is_stmt 1 view .LVU325
 1082              	.LVL134:
1032:Src/ff.c      **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
 1083              		.loc 1 1032 2 view .LVU326
1032:Src/ff.c      **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
 1084              		.loc 1 1032 8 is_stmt 0 view .LVU327
 1085 0002 C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
1032:Src/ff.c      **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
 1086              		.loc 1 1032 5 view .LVU328
 1087 0004 0DB9     		cbnz	r5, .L85
 1088              	.LVL135:
 1089              	.L82:
1042:Src/ff.c      **** }
 1090              		.loc 1 1042 2 is_stmt 1 view .LVU329
1043:Src/ff.c      **** #endif
 1091              		.loc 1 1043 1 is_stmt 0 view .LVU330
 1092 0006 2846     		mov	r0, r5
 1093 0008 70BD     		pop	{r4, r5, r6, pc}
 1094              	.LVL136:
 1095              	.L85:
1043:Src/ff.c      **** #endif
 1096              		.loc 1 1043 1 view .LVU331
 1097 000a 0446     		mov	r4, r0
1033:Src/ff.c      **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1098              		.loc 1 1033 3 is_stmt 1 view .LVU332
1033:Src/ff.c      **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1099              		.loc 1 1033 30 is_stmt 0 view .LVU333
 1100 000c 00F13406 		add	r6, r0, #52
1033:Src/ff.c      **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1101              		.loc 1 1033 7 view .LVU334
 1102 0010 0123     		movs	r3, #1
 1103 0012 026B     		ldr	r2, [r0, #48]
 1104 0014 3146     		mov	r1, r6
 1105 0016 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1106              	.LVL137:
1033:Src/ff.c      **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1107              		.loc 1 1033 7 view .LVU335
 1108 0018 FFF7FEFF 		bl	disk_write
 1109              	.LVL138:
1033:Src/ff.c      **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1110              		.loc 1 1033 6 view .LVU336
 1111 001c 0546     		mov	r5, r0
 1112 001e 88B9     		cbnz	r0, .L83
1034:Src/ff.c      **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 1113              		.loc 1 1034 4 is_stmt 1 view .LVU337
1034:Src/ff.c      **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 1114              		.loc 1 1034 14 is_stmt 0 view .LVU338
 1115 0020 0023     		movs	r3, #0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 85


 1116 0022 E370     		strb	r3, [r4, #3]
1035:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1117              		.loc 1 1035 4 is_stmt 1 view .LVU339
1035:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1118              		.loc 1 1035 10 is_stmt 0 view .LVU340
 1119 0024 216B     		ldr	r1, [r4, #48]
1035:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1120              		.loc 1 1035 24 view .LVU341
 1121 0026 636A     		ldr	r3, [r4, #36]
1035:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1122              		.loc 1 1035 20 view .LVU342
 1123 0028 CB1A     		subs	r3, r1, r3
1035:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1124              		.loc 1 1035 38 view .LVU343
 1125 002a E269     		ldr	r2, [r4, #28]
1035:Src/ff.c      **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1126              		.loc 1 1035 7 view .LVU344
 1127 002c 9342     		cmp	r3, r2
 1128 002e EAD2     		bcs	.L82
1036:Src/ff.c      **** 			}
 1129              		.loc 1 1036 5 is_stmt 1 view .LVU345
1036:Src/ff.c      **** 			}
 1130              		.loc 1 1036 11 is_stmt 0 view .LVU346
 1131 0030 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
1036:Src/ff.c      **** 			}
 1132              		.loc 1 1036 8 view .LVU347
 1133 0032 022B     		cmp	r3, #2
 1134 0034 E7D1     		bne	.L82
1036:Src/ff.c      **** 			}
 1135              		.loc 1 1036 26 is_stmt 1 discriminator 1 view .LVU348
 1136 0036 0123     		movs	r3, #1
 1137 0038 0A44     		add	r2, r2, r1
 1138 003a 3146     		mov	r1, r6
 1139 003c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1140 003e FFF7FEFF 		bl	disk_write
 1141              	.LVL139:
 1142 0042 E0E7     		b	.L82
 1143              	.L83:
1039:Src/ff.c      **** 		}
 1144              		.loc 1 1039 8 is_stmt 0 view .LVU349
 1145 0044 0125     		movs	r5, #1
 1146 0046 DEE7     		b	.L82
 1147              		.cfi_endproc
 1148              	.LFE8:
 1150              		.section	.text.move_window,"ax",%progbits
 1151              		.align	1
 1152              		.syntax unified
 1153              		.thumb
 1154              		.thumb_func
 1155              		.fpu softvfp
 1157              	move_window:
 1158              	.LVL140:
 1159              	.LFB9:
1051:Src/ff.c      **** 	FRESULT res = FR_OK;
 1160              		.loc 1 1051 1 is_stmt 1 view -0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 86


 1163              		@ frame_needed = 0, uses_anonymous_args = 0
1051:Src/ff.c      **** 	FRESULT res = FR_OK;
 1164              		.loc 1 1051 1 is_stmt 0 view .LVU351
 1165 0000 70B5     		push	{r4, r5, r6, lr}
 1166              	.LCFI6:
 1167              		.cfi_def_cfa_offset 16
 1168              		.cfi_offset 4, -16
 1169              		.cfi_offset 5, -12
 1170              		.cfi_offset 6, -8
 1171              		.cfi_offset 14, -4
1052:Src/ff.c      **** 
 1172              		.loc 1 1052 2 is_stmt 1 view .LVU352
 1173              	.LVL141:
1055:Src/ff.c      **** #if !FF_FS_READONLY
 1174              		.loc 1 1055 2 view .LVU353
1055:Src/ff.c      **** #if !FF_FS_READONLY
 1175              		.loc 1 1055 16 is_stmt 0 view .LVU354
 1176 0002 036B     		ldr	r3, [r0, #48]
1055:Src/ff.c      **** #if !FF_FS_READONLY
 1177              		.loc 1 1055 5 view .LVU355
 1178 0004 8B42     		cmp	r3, r1
 1179 0006 02D1     		bne	.L92
1052:Src/ff.c      **** 
 1180              		.loc 1 1052 10 view .LVU356
 1181 0008 0026     		movs	r6, #0
 1182              	.LVL142:
 1183              	.L87:
1067:Src/ff.c      **** }
 1184              		.loc 1 1067 2 is_stmt 1 view .LVU357
1068:Src/ff.c      **** 
 1185              		.loc 1 1068 1 is_stmt 0 view .LVU358
 1186 000a 3046     		mov	r0, r6
 1187 000c 70BD     		pop	{r4, r5, r6, pc}
 1188              	.LVL143:
 1189              	.L92:
1068:Src/ff.c      **** 
 1190              		.loc 1 1068 1 view .LVU359
 1191 000e 0446     		mov	r4, r0
 1192 0010 0D46     		mov	r5, r1
1057:Src/ff.c      **** #endif
 1193              		.loc 1 1057 3 is_stmt 1 view .LVU360
1057:Src/ff.c      **** #endif
 1194              		.loc 1 1057 9 is_stmt 0 view .LVU361
 1195 0012 FFF7FEFF 		bl	sync_window
 1196              	.LVL144:
1059:Src/ff.c      **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 1197              		.loc 1 1059 3 is_stmt 1 view .LVU362
1059:Src/ff.c      **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 1198              		.loc 1 1059 6 is_stmt 0 view .LVU363
 1199 0016 0646     		mov	r6, r0
 1200 0018 0028     		cmp	r0, #0
 1201 001a F6D1     		bne	.L87
1060:Src/ff.c      **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 1202              		.loc 1 1060 4 is_stmt 1 view .LVU364
1060:Src/ff.c      **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 1203              		.loc 1 1060 8 is_stmt 0 view .LVU365
 1204 001c 0123     		movs	r3, #1
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 87


 1205 001e 2A46     		mov	r2, r5
 1206 0020 04F13401 		add	r1, r4, #52
 1207 0024 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1208              	.LVL145:
1060:Src/ff.c      **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 1209              		.loc 1 1060 8 view .LVU366
 1210 0026 FFF7FEFF 		bl	disk_read
 1211              	.LVL146:
1060:Src/ff.c      **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 1212              		.loc 1 1060 7 view .LVU367
 1213 002a 10B1     		cbz	r0, .L88
1062:Src/ff.c      **** 			}
 1214              		.loc 1 1062 9 view .LVU368
 1215 002c 0126     		movs	r6, #1
1061:Src/ff.c      **** 				res = FR_DISK_ERR;
 1216              		.loc 1 1061 10 view .LVU369
 1217 002e 4FF0FF35 		mov	r5, #-1
 1218              	.LVL147:
 1219              	.L88:
1064:Src/ff.c      **** 		}
 1220              		.loc 1 1064 4 is_stmt 1 view .LVU370
1064:Src/ff.c      **** 		}
 1221              		.loc 1 1064 16 is_stmt 0 view .LVU371
 1222 0032 2563     		str	r5, [r4, #48]
 1223 0034 E9E7     		b	.L87
 1224              		.cfi_endproc
 1225              	.LFE9:
 1227              		.section	.rodata.check_fs.str1.4,"aMS",%progbits,1
 1228              		.align	2
 1229              	.LC0:
 1230 0000 46415433 		.ascii	"FAT32   \000"
 1230      32202020 
 1230      00
 1231              		.section	.text.check_fs,"ax",%progbits
 1232              		.align	1
 1233              		.syntax unified
 1234              		.thumb
 1235              		.thumb_func
 1236              		.fpu softvfp
 1238              	check_fs:
 1239              	.LVL148:
 1240              	.LFB35:
3242:Src/ff.c      **** 	WORD w, sign;
 1241              		.loc 1 3242 1 is_stmt 1 view -0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
3242:Src/ff.c      **** 	WORD w, sign;
 1245              		.loc 1 3242 1 is_stmt 0 view .LVU373
 1246 0000 38B5     		push	{r3, r4, r5, lr}
 1247              	.LCFI7:
 1248              		.cfi_def_cfa_offset 16
 1249              		.cfi_offset 3, -16
 1250              		.cfi_offset 4, -12
 1251              		.cfi_offset 5, -8
 1252              		.cfi_offset 14, -4
 1253 0002 0446     		mov	r4, r0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 88


3243:Src/ff.c      **** 	BYTE b;
 1254              		.loc 1 3243 2 is_stmt 1 view .LVU374
3244:Src/ff.c      **** 
 1255              		.loc 1 3244 2 view .LVU375
3247:Src/ff.c      **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 1256              		.loc 1 3247 2 view .LVU376
3247:Src/ff.c      **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 1257              		.loc 1 3247 12 is_stmt 0 view .LVU377
 1258 0004 0023     		movs	r3, #0
 1259 0006 C370     		strb	r3, [r0, #3]
3247:Src/ff.c      **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 1260              		.loc 1 3247 17 is_stmt 1 view .LVU378
3247:Src/ff.c      **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 1261              		.loc 1 3247 29 is_stmt 0 view .LVU379
 1262 0008 4FF0FF33 		mov	r3, #-1
 1263 000c 0363     		str	r3, [r0, #48]
3248:Src/ff.c      **** 	sign = ld_word(fs->win + BS_55AA);
 1264              		.loc 1 3248 2 is_stmt 1 view .LVU380
3248:Src/ff.c      **** 	sign = ld_word(fs->win + BS_55AA);
 1265              		.loc 1 3248 6 is_stmt 0 view .LVU381
 1266 000e FFF7FEFF 		bl	move_window
 1267              	.LVL149:
3248:Src/ff.c      **** 	sign = ld_word(fs->win + BS_55AA);
 1268              		.loc 1 3248 5 view .LVU382
 1269 0012 0028     		cmp	r0, #0
 1270 0014 5AD1     		bne	.L99
3249:Src/ff.c      **** #if FF_FS_EXFAT
 1271              		.loc 1 3249 2 is_stmt 1 view .LVU383
3249:Src/ff.c      **** #if FF_FS_EXFAT
 1272              		.loc 1 3249 9 is_stmt 0 view .LVU384
 1273 0016 04F23220 		addw	r0, r4, #562
 1274 001a FFF7FEFF 		bl	ld_word
 1275              	.LVL150:
 1276 001e 0546     		mov	r5, r0
 1277              	.LVL151:
3253:Src/ff.c      **** 	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near 
 1278              		.loc 1 3253 2 is_stmt 1 view .LVU385
3253:Src/ff.c      **** 	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near 
 1279              		.loc 1 3253 4 is_stmt 0 view .LVU386
 1280 0020 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1281              	.LVL152:
3254:Src/ff.c      **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 1282              		.loc 1 3254 2 is_stmt 1 view .LVU387
3254:Src/ff.c      **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 1283              		.loc 1 3254 5 is_stmt 0 view .LVU388
 1284 0024 EB2B     		cmp	r3, #235
 1285 0026 09D0     		beq	.L95
3254:Src/ff.c      **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 1286              		.loc 1 3254 16 discriminator 1 view .LVU389
 1287 0028 E92B     		cmp	r3, #233
 1288 002a 07D0     		beq	.L95
3254:Src/ff.c      **** 		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 1289              		.loc 1 3254 29 discriminator 2 view .LVU390
 1290 002c E82B     		cmp	r3, #232
 1291 002e 05D0     		beq	.L95
 1292              	.LVL153:
 1293              	.L96:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 89


3271:Src/ff.c      **** }
 1294              		.loc 1 3271 2 is_stmt 1 view .LVU391
3271:Src/ff.c      **** }
 1295              		.loc 1 3271 28 is_stmt 0 view .LVU392
 1296 0030 4AF65523 		movw	r3, #43605
 1297 0034 9D42     		cmp	r5, r3
 1298 0036 47D0     		beq	.L104
 1299 0038 0320     		movs	r0, #3
 1300              	.LVL154:
 1301              	.L93:
3272:Src/ff.c      **** 
 1302              		.loc 1 3272 1 view .LVU393
 1303 003a 38BD     		pop	{r3, r4, r5, pc}
 1304              	.LVL155:
 1305              	.L95:
3255:Src/ff.c      **** 			return 0;	/* It is an FAT32 VBR */
 1306              		.loc 1 3255 3 is_stmt 1 view .LVU394
3255:Src/ff.c      **** 			return 0;	/* It is an FAT32 VBR */
 1307              		.loc 1 3255 6 is_stmt 0 view .LVU395
 1308 003c 4AF65523 		movw	r3, #43605
 1309              	.LVL156:
3255:Src/ff.c      **** 			return 0;	/* It is an FAT32 VBR */
 1310              		.loc 1 3255 6 view .LVU396
 1311 0040 9D42     		cmp	r5, r3
 1312 0042 37D0     		beq	.L105
 1313              	.LVL157:
 1314              	.L97:
3259:Src/ff.c      **** 		b = fs->win[BPB_SecPerClus];
 1315              		.loc 1 3259 3 is_stmt 1 view .LVU397
3259:Src/ff.c      **** 		b = fs->win[BPB_SecPerClus];
 1316              		.loc 1 3259 7 is_stmt 0 view .LVU398
 1317 0044 04F13F00 		add	r0, r4, #63
 1318 0048 FFF7FEFF 		bl	ld_word
 1319              	.LVL158:
3260:Src/ff.c      **** 		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096
 1320              		.loc 1 3260 3 is_stmt 1 view .LVU399
3260:Src/ff.c      **** 		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096
 1321              		.loc 1 3260 5 is_stmt 0 view .LVU400
 1322 004c 94F84120 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 1323              	.LVL159:
3261:Src/ff.c      **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 1324              		.loc 1 3261 3 is_stmt 1 view .LVU401
3261:Src/ff.c      **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 1325              		.loc 1 3261 15 is_stmt 0 view .LVU402
 1326 0050 431E     		subs	r3, r0, #1
3261:Src/ff.c      **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 1327              		.loc 1 3261 6 view .LVU403
 1328 0052 1842     		tst	r0, r3
 1329 0054 ECD1     		bne	.L96
3261:Src/ff.c      **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 1330              		.loc 1 3261 26 discriminator 1 view .LVU404
 1331 0056 B0F5007F 		cmp	r0, #512
 1332 005a E9D3     		bcc	.L96
3261:Src/ff.c      **** 			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 1333              		.loc 1 3261 44 discriminator 2 view .LVU405
 1334 005c E8D8     		bhi	.L96
3262:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 90


 1335              		.loc 1 3262 4 view .LVU406
 1336 005e 002A     		cmp	r2, #0
 1337 0060 E6D0     		beq	.L96
3262:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 1338              		.loc 1 3262 25 discriminator 1 view .LVU407
 1339 0062 531E     		subs	r3, r2, #1
3262:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 1340              		.loc 1 3262 14 discriminator 1 view .LVU408
 1341 0064 1A42     		tst	r2, r3
 1342 0066 E3D1     		bne	.L96
3263:Src/ff.c      **** 			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 1343              		.loc 1 3263 7 view .LVU409
 1344 0068 04F14200 		add	r0, r4, #66
 1345              	.LVL160:
3263:Src/ff.c      **** 			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 1346              		.loc 1 3263 7 view .LVU410
 1347 006c FFF7FEFF 		bl	ld_word
 1348              	.LVL161:
3263:Src/ff.c      **** 			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 1349              		.loc 1 3263 4 view .LVU411
 1350 0070 0028     		cmp	r0, #0
 1351 0072 DDD0     		beq	.L96
3264:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 1352              		.loc 1 3264 20 view .LVU412
 1353 0074 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
3264:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 1354              		.loc 1 3264 34 view .LVU413
 1355 0078 013B     		subs	r3, r3, #1
3264:Src/ff.c      **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 1356              		.loc 1 3264 4 view .LVU414
 1357 007a 012B     		cmp	r3, #1
 1358 007c D8D8     		bhi	.L96
3265:Src/ff.c      **** 			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Pr
 1359              		.loc 1 3265 7 view .LVU415
 1360 007e 04F14500 		add	r0, r4, #69
 1361 0082 FFF7FEFF 		bl	ld_word
 1362              	.LVL162:
3265:Src/ff.c      **** 			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Pr
 1363              		.loc 1 3265 4 view .LVU416
 1364 0086 0028     		cmp	r0, #0
 1365 0088 D2D0     		beq	.L96
3266:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 1366              		.loc 1 3266 8 view .LVU417
 1367 008a 04F14700 		add	r0, r4, #71
 1368 008e FFF7FEFF 		bl	ld_word
 1369              	.LVL163:
3266:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 1370              		.loc 1 3266 4 view .LVU418
 1371 0092 7F28     		cmp	r0, #127
 1372 0094 06D8     		bhi	.L98
3266:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 1373              		.loc 1 3266 50 discriminator 1 view .LVU419
 1374 0096 04F15400 		add	r0, r4, #84
 1375 009a FFF7FEFF 		bl	ld_dword
 1376              	.LVL164:
3266:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 1377              		.loc 1 3266 47 discriminator 1 view .LVU420
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 91


 1378 009e B0F5803F 		cmp	r0, #65536
 1379 00a2 C5D3     		bcc	.L96
 1380              	.L98:
3267:Src/ff.c      **** 				return 0;	/* It can be presumed an FAT VBR */
 1381              		.loc 1 3267 7 view .LVU421
 1382 00a4 04F14A00 		add	r0, r4, #74
 1383 00a8 FFF7FEFF 		bl	ld_word
 1384              	.LVL165:
3267:Src/ff.c      **** 				return 0;	/* It can be presumed an FAT VBR */
 1385              		.loc 1 3267 4 view .LVU422
 1386 00ac 0028     		cmp	r0, #0
 1387 00ae BFD0     		beq	.L96
3268:Src/ff.c      **** 		}
 1388              		.loc 1 3268 12 view .LVU423
 1389 00b0 0020     		movs	r0, #0
 1390 00b2 C2E7     		b	.L93
 1391              	.LVL166:
 1392              	.L105:
3255:Src/ff.c      **** 			return 0;	/* It is an FAT32 VBR */
 1393              		.loc 1 3255 26 discriminator 1 view .LVU424
 1394 00b4 0822     		movs	r2, #8
 1395 00b6 0649     		ldr	r1, .L106
 1396 00b8 04F18600 		add	r0, r4, #134
 1397 00bc FFF7FEFF 		bl	memcmp
 1398              	.LVL167:
3255:Src/ff.c      **** 			return 0;	/* It is an FAT32 VBR */
 1399              		.loc 1 3255 22 discriminator 1 view .LVU425
 1400 00c0 0028     		cmp	r0, #0
 1401 00c2 BFD1     		bne	.L97
3256:Src/ff.c      **** 		}
 1402              		.loc 1 3256 11 view .LVU426
 1403 00c4 0020     		movs	r0, #0
 1404 00c6 B8E7     		b	.L93
 1405              	.L104:
3271:Src/ff.c      **** }
 1406              		.loc 1 3271 28 view .LVU427
 1407 00c8 0220     		movs	r0, #2
 1408 00ca B6E7     		b	.L93
 1409              	.LVL168:
 1410              	.L99:
3248:Src/ff.c      **** 	sign = ld_word(fs->win + BS_55AA);
 1411              		.loc 1 3248 45 view .LVU428
 1412 00cc 0420     		movs	r0, #4
 1413 00ce B4E7     		b	.L93
 1414              	.L107:
 1415              		.align	2
 1416              	.L106:
 1417 00d0 00000000 		.word	.LC0
 1418              		.cfi_endproc
 1419              	.LFE35:
 1421              		.section	.text.find_volume,"ax",%progbits
 1422              		.align	1
 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
 1426              		.fpu softvfp
 1428              	find_volume:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 92


 1429              	.LVL169:
 1430              	.LFB36:
3282:Src/ff.c      **** 	UINT fmt, i;
 1431              		.loc 1 3282 1 is_stmt 1 view -0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 16
 1434              		@ frame_needed = 0, uses_anonymous_args = 0
3282:Src/ff.c      **** 	UINT fmt, i;
 1435              		.loc 1 3282 1 is_stmt 0 view .LVU430
 1436 0000 70B5     		push	{r4, r5, r6, lr}
 1437              	.LCFI8:
 1438              		.cfi_def_cfa_offset 16
 1439              		.cfi_offset 4, -16
 1440              		.cfi_offset 5, -12
 1441              		.cfi_offset 6, -8
 1442              		.cfi_offset 14, -4
 1443 0002 84B0     		sub	sp, sp, #16
 1444              	.LCFI9:
 1445              		.cfi_def_cfa_offset 32
 1446 0004 0646     		mov	r6, r0
 1447 0006 0D46     		mov	r5, r1
3283:Src/ff.c      **** 	DWORD mbr_pt[4];
 1448              		.loc 1 3283 2 is_stmt 1 view .LVU431
3284:Src/ff.c      **** 
 1449              		.loc 1 3284 2 view .LVU432
3287:Src/ff.c      **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, 
 1450              		.loc 1 3287 2 view .LVU433
3287:Src/ff.c      **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, 
 1451              		.loc 1 3287 8 is_stmt 0 view .LVU434
 1452 0008 0021     		movs	r1, #0
 1453              	.LVL170:
3287:Src/ff.c      **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, 
 1454              		.loc 1 3287 8 view .LVU435
 1455 000a FFF7FEFF 		bl	check_fs
 1456              	.LVL171:
3288:Src/ff.c      **** 
 1457              		.loc 1 3288 2 is_stmt 1 view .LVU436
3288:Src/ff.c      **** 
 1458              		.loc 1 3288 5 is_stmt 0 view .LVU437
 1459 000e 0228     		cmp	r0, #2
 1460 0010 03D0     		beq	.L116
3288:Src/ff.c      **** 
 1461              		.loc 1 3288 15 discriminator 1 view .LVU438
 1462 0012 2BD8     		bhi	.L108
3288:Src/ff.c      **** 
 1463              		.loc 1 3288 28 discriminator 3 view .LVU439
 1464 0014 55B3     		cbz	r5, .L108
 1465 0016 0024     		movs	r4, #0
 1466 0018 00E0     		b	.L111
 1467              	.L116:
 1468 001a 0024     		movs	r4, #0
 1469              	.LVL172:
 1470              	.L111:
3315:Src/ff.c      **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1471              		.loc 1 3315 14 is_stmt 1 discriminator 1 view .LVU440
3315:Src/ff.c      **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1472              		.loc 1 3315 2 is_stmt 0 discriminator 1 view .LVU441
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 93


 1473 001c 032C     		cmp	r4, #3
 1474 001e 0ED8     		bhi	.L120
3316:Src/ff.c      **** 	}
 1475              		.loc 1 3316 3 is_stmt 1 discriminator 3 view .LVU442
3316:Src/ff.c      **** 	}
 1476              		.loc 1 3316 24 is_stmt 0 discriminator 3 view .LVU443
 1477 0020 06F13400 		add	r0, r6, #52
3316:Src/ff.c      **** 	}
 1478              		.loc 1 3316 48 discriminator 3 view .LVU444
 1479 0024 2301     		lsls	r3, r4, #4
3316:Src/ff.c      **** 	}
 1480              		.loc 1 3316 57 discriminator 3 view .LVU445
 1481 0026 03F5E373 		add	r3, r3, #454
3316:Src/ff.c      **** 	}
 1482              		.loc 1 3316 15 discriminator 3 view .LVU446
 1483 002a 1844     		add	r0, r0, r3
 1484 002c FFF7FEFF 		bl	ld_dword
 1485              	.LVL173:
3316:Src/ff.c      **** 	}
 1486              		.loc 1 3316 13 discriminator 3 view .LVU447
 1487 0030 04AB     		add	r3, sp, #16
 1488 0032 03EB8403 		add	r3, r3, r4, lsl #2
 1489 0036 43F8100C 		str	r0, [r3, #-16]
3315:Src/ff.c      **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1490              		.loc 1 3315 21 is_stmt 1 discriminator 3 view .LVU448
3315:Src/ff.c      **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1491              		.loc 1 3315 22 is_stmt 0 discriminator 3 view .LVU449
 1492 003a 0134     		adds	r4, r4, #1
 1493              	.LVL174:
3315:Src/ff.c      **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 1494              		.loc 1 3315 22 discriminator 3 view .LVU450
 1495 003c EEE7     		b	.L111
 1496              	.L120:
3318:Src/ff.c      **** 	do {							/* Find an FAT volume */
 1497              		.loc 1 3318 2 is_stmt 1 view .LVU451
3318:Src/ff.c      **** 	do {							/* Find an FAT volume */
 1498              		.loc 1 3318 22 is_stmt 0 view .LVU452
 1499 003e 0DB1     		cbz	r5, .L117
3318:Src/ff.c      **** 	do {							/* Find an FAT volume */
 1500              		.loc 1 3318 22 discriminator 1 view .LVU453
 1501 0040 6C1E     		subs	r4, r5, #1
 1502              	.LVL175:
3318:Src/ff.c      **** 	do {							/* Find an FAT volume */
 1503              		.loc 1 3318 22 discriminator 1 view .LVU454
 1504 0042 0AE0     		b	.L115
 1505              	.LVL176:
 1506              	.L117:
3318:Src/ff.c      **** 	do {							/* Find an FAT volume */
 1507              		.loc 1 3318 22 view .LVU455
 1508 0044 2C46     		mov	r4, r5
 1509              	.LVL177:
3318:Src/ff.c      **** 	do {							/* Find an FAT volume */
 1510              		.loc 1 3318 22 view .LVU456
 1511 0046 08E0     		b	.L115
 1512              	.LVL178:
 1513              	.L121:
3320:Src/ff.c      **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 94


 1514              		.loc 1 3320 21 discriminator 1 view .LVU457
 1515 0048 3046     		mov	r0, r6
 1516 004a FFF7FEFF 		bl	check_fs
 1517              	.LVL179:
 1518              	.L114:
3321:Src/ff.c      **** 	return fmt;
 1519              		.loc 1 3321 10 is_stmt 1 discriminator 4 view .LVU458
3321:Src/ff.c      **** 	return fmt;
 1520              		.loc 1 3321 2 is_stmt 0 discriminator 4 view .LVU459
 1521 004e 6DB9     		cbnz	r5, .L108
3321:Src/ff.c      **** 	return fmt;
 1522              		.loc 1 3321 21 discriminator 1 view .LVU460
 1523 0050 0128     		cmp	r0, #1
 1524 0052 0BD9     		bls	.L108
3321:Src/ff.c      **** 	return fmt;
 1525              		.loc 1 3321 33 discriminator 2 view .LVU461
 1526 0054 0134     		adds	r4, r4, #1
 1527              	.LVL180:
3321:Src/ff.c      **** 	return fmt;
 1528              		.loc 1 3321 33 discriminator 2 view .LVU462
 1529 0056 032C     		cmp	r4, #3
 1530 0058 08D8     		bhi	.L108
 1531              	.LVL181:
 1532              	.L115:
3319:Src/ff.c      **** 		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 1533              		.loc 1 3319 2 is_stmt 1 view .LVU463
3320:Src/ff.c      **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1534              		.loc 1 3320 3 view .LVU464
3320:Src/ff.c      **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1535              		.loc 1 3320 15 is_stmt 0 view .LVU465
 1536 005a 04AB     		add	r3, sp, #16
 1537 005c 03EB8403 		add	r3, r3, r4, lsl #2
 1538 0060 53F8101C 		ldr	r1, [r3, #-16]
3320:Src/ff.c      **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 1539              		.loc 1 3320 45 view .LVU466
 1540 0064 0029     		cmp	r1, #0
 1541 0066 EFD1     		bne	.L121
 1542 0068 0320     		movs	r0, #3
 1543 006a F0E7     		b	.L114
 1544              	.LVL182:
 1545              	.L108:
3323:Src/ff.c      **** 
 1546              		.loc 1 3323 1 view .LVU467
 1547 006c 04B0     		add	sp, sp, #16
 1548              	.LCFI10:
 1549              		.cfi_def_cfa_offset 16
 1550              		@ sp needed
 1551 006e 70BD     		pop	{r4, r5, r6, pc}
3323:Src/ff.c      **** 
 1552              		.loc 1 3323 1 view .LVU468
 1553              		.cfi_endproc
 1554              	.LFE36:
 1556              		.section	.text.mount_volume,"ax",%progbits
 1557              		.align	1
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 95


 1561              		.fpu softvfp
 1563              	mount_volume:
 1564              	.LVL183:
 1565              	.LFB37:
3337:Src/ff.c      **** 	int vol;
 1566              		.loc 1 3337 1 is_stmt 1 view -0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
3337:Src/ff.c      **** 	int vol;
 1570              		.loc 1 3337 1 is_stmt 0 view .LVU470
 1571 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1572              	.LCFI11:
 1573              		.cfi_def_cfa_offset 40
 1574              		.cfi_offset 3, -40
 1575              		.cfi_offset 4, -36
 1576              		.cfi_offset 5, -32
 1577              		.cfi_offset 6, -28
 1578              		.cfi_offset 7, -24
 1579              		.cfi_offset 8, -20
 1580              		.cfi_offset 9, -16
 1581              		.cfi_offset 10, -12
 1582              		.cfi_offset 11, -8
 1583              		.cfi_offset 14, -4
 1584 0004 0C46     		mov	r4, r1
 1585 0006 1546     		mov	r5, r2
3338:Src/ff.c      **** 	DSTATUS stat;
 1586              		.loc 1 3338 2 is_stmt 1 view .LVU471
3339:Src/ff.c      **** 	LBA_t bsect;
 1587              		.loc 1 3339 2 view .LVU472
3340:Src/ff.c      **** 	DWORD tsect, sysect, fasize, nclst, szbfat;
 1588              		.loc 1 3340 2 view .LVU473
3341:Src/ff.c      **** 	WORD nrsv;
 1589              		.loc 1 3341 2 view .LVU474
3342:Src/ff.c      **** 	FATFS *fs;
 1590              		.loc 1 3342 2 view .LVU475
3343:Src/ff.c      **** 	UINT fmt;
 1591              		.loc 1 3343 2 view .LVU476
3344:Src/ff.c      **** 
 1592              		.loc 1 3344 2 view .LVU477
3348:Src/ff.c      **** 	vol = get_ldnumber(path);
 1593              		.loc 1 3348 2 view .LVU478
3348:Src/ff.c      **** 	vol = get_ldnumber(path);
 1594              		.loc 1 3348 7 is_stmt 0 view .LVU479
 1595 0008 0023     		movs	r3, #0
 1596 000a 0B60     		str	r3, [r1]
3349:Src/ff.c      **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1597              		.loc 1 3349 2 is_stmt 1 view .LVU480
3349:Src/ff.c      **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1598              		.loc 1 3349 8 is_stmt 0 view .LVU481
 1599 000c FFF7FEFF 		bl	get_ldnumber
 1600              	.LVL184:
3350:Src/ff.c      **** 
 1601              		.loc 1 3350 2 is_stmt 1 view .LVU482
3350:Src/ff.c      **** 
 1602              		.loc 1 3350 5 is_stmt 0 view .LVU483
 1603 0010 061E     		subs	r6, r0, #0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 96


 1604 0012 C0F21B81 		blt	.L135
3353:Src/ff.c      **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 1605              		.loc 1 3353 2 is_stmt 1 view .LVU484
3353:Src/ff.c      **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 1606              		.loc 1 3353 5 is_stmt 0 view .LVU485
 1607 0016 A04B     		ldr	r3, .L162
 1608 0018 53F82670 		ldr	r7, [r3, r6, lsl #2]
 1609              	.LVL185:
3354:Src/ff.c      **** #if FF_FS_REENTRANT
 1610              		.loc 1 3354 2 is_stmt 1 view .LVU486
3354:Src/ff.c      **** #if FF_FS_REENTRANT
 1611              		.loc 1 3354 5 is_stmt 0 view .LVU487
 1612 001c 002F     		cmp	r7, #0
 1613 001e 00F01981 		beq	.L136
3358:Src/ff.c      **** 
 1614              		.loc 1 3358 2 is_stmt 1 view .LVU488
3358:Src/ff.c      **** 
 1615              		.loc 1 3358 7 is_stmt 0 view .LVU489
 1616 0022 2760     		str	r7, [r4]
3360:Src/ff.c      **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 1617              		.loc 1 3360 2 is_stmt 1 view .LVU490
3360:Src/ff.c      **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 1618              		.loc 1 3360 7 is_stmt 0 view .LVU491
 1619 0024 05F0FE05 		and	r5, r5, #254
 1620              	.LVL186:
3361:Src/ff.c      **** 		stat = disk_status(fs->pdrv);
 1621              		.loc 1 3361 2 is_stmt 1 view .LVU492
3361:Src/ff.c      **** 		stat = disk_status(fs->pdrv);
 1622              		.loc 1 3361 8 is_stmt 0 view .LVU493
 1623 0028 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
3361:Src/ff.c      **** 		stat = disk_status(fs->pdrv);
 1624              		.loc 1 3361 5 view .LVU494
 1625 002a 73B1     		cbz	r3, .L124
3362:Src/ff.c      **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1626              		.loc 1 3362 3 is_stmt 1 view .LVU495
3362:Src/ff.c      **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1627              		.loc 1 3362 10 is_stmt 0 view .LVU496
 1628 002c 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 1629              	.LVL187:
3362:Src/ff.c      **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1630              		.loc 1 3362 10 view .LVU497
 1631 002e FFF7FEFF 		bl	disk_status
 1632              	.LVL188:
3363:Src/ff.c      **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1633              		.loc 1 3363 3 is_stmt 1 view .LVU498
3363:Src/ff.c      **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1634              		.loc 1 3363 6 is_stmt 0 view .LVU499
 1635 0032 10F00104 		ands	r4, r0, #1
 1636              	.LVL189:
3363:Src/ff.c      **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1637              		.loc 1 3363 6 view .LVU500
 1638 0036 08D1     		bne	.L124
3364:Src/ff.c      **** 				return FR_WRITE_PROTECTED;
 1639              		.loc 1 3364 4 is_stmt 1 view .LVU501
3364:Src/ff.c      **** 				return FR_WRITE_PROTECTED;
 1640              		.loc 1 3364 7 is_stmt 0 view .LVU502
 1641 0038 002D     		cmp	r5, #0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 97


 1642 003a 00F00881 		beq	.L123
3364:Src/ff.c      **** 				return FR_WRITE_PROTECTED;
 1643              		.loc 1 3364 32 discriminator 1 view .LVU503
 1644 003e 10F0040F 		tst	r0, #4
 1645 0042 00F00481 		beq	.L123
3365:Src/ff.c      **** 			}
 1646              		.loc 1 3365 12 view .LVU504
 1647 0046 0A24     		movs	r4, #10
 1648 0048 01E1     		b	.L123
 1649              	.LVL190:
 1650              	.L124:
3374:Src/ff.c      **** 	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 1651              		.loc 1 3374 2 is_stmt 1 view .LVU505
3374:Src/ff.c      **** 	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 1652              		.loc 1 3374 14 is_stmt 0 view .LVU506
 1653 004a 0023     		movs	r3, #0
 1654 004c 3B70     		strb	r3, [r7]
3375:Src/ff.c      **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 1655              		.loc 1 3375 2 is_stmt 1 view .LVU507
3375:Src/ff.c      **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 1656              		.loc 1 3375 13 is_stmt 0 view .LVU508
 1657 004e F0B2     		uxtb	r0, r6
3375:Src/ff.c      **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 1658              		.loc 1 3375 11 view .LVU509
 1659 0050 7870     		strb	r0, [r7, #1]
3376:Src/ff.c      **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1660              		.loc 1 3376 2 is_stmt 1 view .LVU510
3376:Src/ff.c      **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1661              		.loc 1 3376 9 is_stmt 0 view .LVU511
 1662 0052 FFF7FEFF 		bl	disk_initialize
 1663              	.LVL191:
3377:Src/ff.c      **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1664              		.loc 1 3377 2 is_stmt 1 view .LVU512
3377:Src/ff.c      **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1665              		.loc 1 3377 5 is_stmt 0 view .LVU513
 1666 0056 10F00104 		ands	r4, r0, #1
 1667 005a 40F0FD80 		bne	.L138
3380:Src/ff.c      **** 		return FR_WRITE_PROTECTED;
 1668              		.loc 1 3380 2 is_stmt 1 view .LVU514
3380:Src/ff.c      **** 		return FR_WRITE_PROTECTED;
 1669              		.loc 1 3380 5 is_stmt 0 view .LVU515
 1670 005e 1DB1     		cbz	r5, .L125
3380:Src/ff.c      **** 		return FR_WRITE_PROTECTED;
 1671              		.loc 1 3380 30 discriminator 1 view .LVU516
 1672 0060 10F0040F 		tst	r0, #4
 1673 0064 40F0FA80 		bne	.L139
 1674              	.L125:
3389:Src/ff.c      **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 1675              		.loc 1 3389 2 is_stmt 1 view .LVU517
3389:Src/ff.c      **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 1676              		.loc 1 3389 8 is_stmt 0 view .LVU518
 1677 0068 0021     		movs	r1, #0
 1678 006a 3846     		mov	r0, r7
 1679              	.LVL192:
3389:Src/ff.c      **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 1680              		.loc 1 3389 8 view .LVU519
 1681 006c FFF7FEFF 		bl	find_volume
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 98


 1682              	.LVL193:
3390:Src/ff.c      **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1683              		.loc 1 3390 2 is_stmt 1 view .LVU520
3390:Src/ff.c      **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1684              		.loc 1 3390 5 is_stmt 0 view .LVU521
 1685 0070 0428     		cmp	r0, #4
 1686 0072 00F0F580 		beq	.L140
3391:Src/ff.c      **** 	bsect = fs->winsect;					/* Volume offset */
 1687              		.loc 1 3391 2 is_stmt 1 view .LVU522
3391:Src/ff.c      **** 	bsect = fs->winsect;					/* Volume offset */
 1688              		.loc 1 3391 5 is_stmt 0 view .LVU523
 1689 0076 0128     		cmp	r0, #1
 1690 0078 00F2F480 		bhi	.L141
3392:Src/ff.c      **** 
 1691              		.loc 1 3392 2 is_stmt 1 view .LVU524
3392:Src/ff.c      **** 
 1692              		.loc 1 3392 8 is_stmt 0 view .LVU525
 1693 007c 3D6B     		ldr	r5, [r7, #48]
 1694              	.LVL194:
3460:Src/ff.c      **** 
 1695              		.loc 1 3460 3 is_stmt 1 view .LVU526
3460:Src/ff.c      **** 
 1696              		.loc 1 3460 7 is_stmt 0 view .LVU527
 1697 007e 07F13F00 		add	r0, r7, #63
 1698              	.LVL195:
3460:Src/ff.c      **** 
 1699              		.loc 1 3460 7 view .LVU528
 1700 0082 FFF7FEFF 		bl	ld_word
 1701              	.LVL196:
3460:Src/ff.c      **** 
 1702              		.loc 1 3460 6 view .LVU529
 1703 0086 B0F5007F 		cmp	r0, #512
 1704 008a 40F0ED80 		bne	.L142
3462:Src/ff.c      **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1705              		.loc 1 3462 3 is_stmt 1 view .LVU530
3462:Src/ff.c      **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1706              		.loc 1 3462 12 is_stmt 0 view .LVU531
 1707 008e 07F14A00 		add	r0, r7, #74
 1708 0092 FFF7FEFF 		bl	ld_word
 1709              	.LVL197:
3462:Src/ff.c      **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1710              		.loc 1 3462 10 view .LVU532
 1711 0096 0646     		mov	r6, r0
 1712              	.LVL198:
3463:Src/ff.c      **** 		fs->fsize = fasize;
 1713              		.loc 1 3463 3 is_stmt 1 view .LVU533
3463:Src/ff.c      **** 		fs->fsize = fasize;
 1714              		.loc 1 3463 6 is_stmt 0 view .LVU534
 1715 0098 20B9     		cbnz	r0, .L126
3463:Src/ff.c      **** 		fs->fsize = fasize;
 1716              		.loc 1 3463 20 is_stmt 1 discriminator 1 view .LVU535
3463:Src/ff.c      **** 		fs->fsize = fasize;
 1717              		.loc 1 3463 29 is_stmt 0 discriminator 1 view .LVU536
 1718 009a 07F15800 		add	r0, r7, #88
 1719              	.LVL199:
3463:Src/ff.c      **** 		fs->fsize = fasize;
 1720              		.loc 1 3463 29 discriminator 1 view .LVU537
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 99


 1721 009e FFF7FEFF 		bl	ld_dword
 1722              	.LVL200:
 1723 00a2 0646     		mov	r6, r0
 1724              	.LVL201:
 1725              	.L126:
3464:Src/ff.c      **** 
 1726              		.loc 1 3464 3 is_stmt 1 view .LVU538
3464:Src/ff.c      **** 
 1727              		.loc 1 3464 13 is_stmt 0 view .LVU539
 1728 00a4 FE61     		str	r6, [r7, #28]
3466:Src/ff.c      **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1729              		.loc 1 3466 3 is_stmt 1 view .LVU540
3466:Src/ff.c      **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1730              		.loc 1 3466 23 is_stmt 0 view .LVU541
 1731 00a6 97F84420 		ldrb	r2, [r7, #68]	@ zero_extendqisi2
3466:Src/ff.c      **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1732              		.loc 1 3466 14 view .LVU542
 1733 00aa BA70     		strb	r2, [r7, #2]
3467:Src/ff.c      **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1734              		.loc 1 3467 3 is_stmt 1 view .LVU543
3467:Src/ff.c      **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1735              		.loc 1 3467 23 is_stmt 0 view .LVU544
 1736 00ac 531E     		subs	r3, r2, #1
 1737 00ae DBB2     		uxtb	r3, r3
3467:Src/ff.c      **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 1738              		.loc 1 3467 6 view .LVU545
 1739 00b0 012B     		cmp	r3, #1
 1740 00b2 00F2DB80 		bhi	.L143
3468:Src/ff.c      **** 
 1741              		.loc 1 3468 3 is_stmt 1 view .LVU546
3468:Src/ff.c      **** 
 1742              		.loc 1 3468 10 is_stmt 0 view .LVU547
 1743 00b6 06FB02F8 		mul	r8, r6, r2
 1744              	.LVL202:
3470:Src/ff.c      **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1745              		.loc 1 3470 3 is_stmt 1 view .LVU548
3470:Src/ff.c      **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1746              		.loc 1 3470 22 is_stmt 0 view .LVU549
 1747 00ba 97F84190 		ldrb	r9, [r7, #65]	@ zero_extendqisi2
3470:Src/ff.c      **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1748              		.loc 1 3470 13 view .LVU550
 1749 00be A7F80A90 		strh	r9, [r7, #10]	@ movhi
3471:Src/ff.c      **** 
 1750              		.loc 1 3471 3 is_stmt 1 view .LVU551
3471:Src/ff.c      **** 
 1751              		.loc 1 3471 6 is_stmt 0 view .LVU552
 1752 00c2 B9F1000F 		cmp	r9, #0
 1753 00c6 00F0D380 		beq	.L144
3471:Src/ff.c      **** 
 1754              		.loc 1 3471 49 discriminator 2 view .LVU553
 1755 00ca 09F1FF33 		add	r3, r9, #-1
3471:Src/ff.c      **** 
 1756              		.loc 1 3471 22 discriminator 2 view .LVU554
 1757 00ce 19EA030F 		tst	r9, r3
 1758 00d2 40F0CF80 		bne	.L145
3473:Src/ff.c      **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 1759              		.loc 1 3473 3 is_stmt 1 view .LVU555
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 100


3473:Src/ff.c      **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 1760              		.loc 1 3473 19 is_stmt 0 view .LVU556
 1761 00d6 07F14500 		add	r0, r7, #69
 1762 00da FFF7FEFF 		bl	ld_word
 1763              	.LVL203:
 1764 00de 8246     		mov	r10, r0
3473:Src/ff.c      **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 1765              		.loc 1 3473 17 view .LVU557
 1766 00e0 3881     		strh	r0, [r7, #8]	@ movhi
3474:Src/ff.c      **** 
 1767              		.loc 1 3474 3 is_stmt 1 view .LVU558
3474:Src/ff.c      **** 
 1768              		.loc 1 3474 6 is_stmt 0 view .LVU559
 1769 00e2 10F00F0F 		tst	r0, #15
 1770 00e6 40F0C780 		bne	.L146
3476:Src/ff.c      **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1771              		.loc 1 3476 3 is_stmt 1 view .LVU560
3476:Src/ff.c      **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1772              		.loc 1 3476 11 is_stmt 0 view .LVU561
 1773 00ea 07F14700 		add	r0, r7, #71
 1774 00ee FFF7FEFF 		bl	ld_word
 1775              	.LVL204:
3476:Src/ff.c      **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1776              		.loc 1 3476 9 view .LVU562
 1777 00f2 8346     		mov	fp, r0
 1778              	.LVL205:
3477:Src/ff.c      **** 
 1779              		.loc 1 3477 3 is_stmt 1 view .LVU563
3477:Src/ff.c      **** 
 1780              		.loc 1 3477 6 is_stmt 0 view .LVU564
 1781 00f4 20B9     		cbnz	r0, .L127
3477:Src/ff.c      **** 
 1782              		.loc 1 3477 19 is_stmt 1 discriminator 1 view .LVU565
3477:Src/ff.c      **** 
 1783              		.loc 1 3477 27 is_stmt 0 discriminator 1 view .LVU566
 1784 00f6 07F15400 		add	r0, r7, #84
 1785              	.LVL206:
3477:Src/ff.c      **** 
 1786              		.loc 1 3477 27 discriminator 1 view .LVU567
 1787 00fa FFF7FEFF 		bl	ld_dword
 1788              	.LVL207:
 1789 00fe 8346     		mov	fp, r0
 1790              	.LVL208:
 1791              	.L127:
3479:Src/ff.c      **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 1792              		.loc 1 3479 3 is_stmt 1 view .LVU568
3479:Src/ff.c      **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 1793              		.loc 1 3479 10 is_stmt 0 view .LVU569
 1794 0100 07F14200 		add	r0, r7, #66
 1795              	.LVL209:
3479:Src/ff.c      **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 1796              		.loc 1 3479 10 view .LVU570
 1797 0104 FFF7FEFF 		bl	ld_word
 1798              	.LVL210:
3480:Src/ff.c      **** 
 1799              		.loc 1 3480 3 is_stmt 1 view .LVU571
3480:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 101


 1800              		.loc 1 3480 6 is_stmt 0 view .LVU572
 1801 0108 0246     		mov	r2, r0
 1802 010a 0028     		cmp	r0, #0
 1803 010c 00F0B680 		beq	.L147
3483:Src/ff.c      **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 1804              		.loc 1 3483 3 is_stmt 1 view .LVU573
3483:Src/ff.c      **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 1805              		.loc 1 3483 17 is_stmt 0 view .LVU574
 1806 0110 00EB0803 		add	r3, r0, r8
3483:Src/ff.c      **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 1807              		.loc 1 3483 10 view .LVU575
 1808 0114 03EB1A13 		add	r3, r3, r10, lsr #4
 1809              	.LVL211:
3484:Src/ff.c      **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 1810              		.loc 1 3484 3 is_stmt 1 view .LVU576
3484:Src/ff.c      **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 1811              		.loc 1 3484 6 is_stmt 0 view .LVU577
 1812 0118 9B45     		cmp	fp, r3
 1813 011a C0F0B180 		bcc	.L148
3485:Src/ff.c      **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1814              		.loc 1 3485 3 is_stmt 1 view .LVU578
3485:Src/ff.c      **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1815              		.loc 1 3485 18 is_stmt 0 view .LVU579
 1816 011e ABEB030B 		sub	fp, fp, r3
 1817              	.LVL212:
3485:Src/ff.c      **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1818              		.loc 1 3485 9 view .LVU580
 1819 0122 BBFBF9F1 		udiv	r1, fp, r9
 1820              	.LVL213:
3486:Src/ff.c      **** 		fmt = 0;
 1821              		.loc 1 3486 3 is_stmt 1 view .LVU581
3486:Src/ff.c      **** 		fmt = 0;
 1822              		.loc 1 3486 6 is_stmt 0 view .LVU582
 1823 0126 CB45     		cmp	fp, r9
 1824 0128 C0F0AC80 		bcc	.L149
3487:Src/ff.c      **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 1825              		.loc 1 3487 3 is_stmt 1 view .LVU583
 1826              	.LVL214:
3488:Src/ff.c      **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1827              		.loc 1 3488 3 view .LVU584
3488:Src/ff.c      **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1828              		.loc 1 3488 6 is_stmt 0 view .LVU585
 1829 012c 5B48     		ldr	r0, .L162+4
 1830              	.LVL215:
3488:Src/ff.c      **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1831              		.loc 1 3488 6 view .LVU586
 1832 012e 8142     		cmp	r1, r0
 1833 0130 10D9     		bls	.L150
3487:Src/ff.c      **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 1834              		.loc 1 3487 7 view .LVU587
 1835 0132 4FF0000B 		mov	fp, #0
 1836              	.L128:
 1837              	.LVL216:
3489:Src/ff.c      **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1838              		.loc 1 3489 3 is_stmt 1 view .LVU588
3489:Src/ff.c      **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1839              		.loc 1 3489 6 is_stmt 0 view .LVU589
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 102


 1840 0136 4FF6F570 		movw	r0, #65525
 1841 013a 8142     		cmp	r1, r0
 1842 013c 01D8     		bhi	.L129
3489:Src/ff.c      **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1843              		.loc 1 3489 31 view .LVU590
 1844 013e 4FF0020B 		mov	fp, #2
 1845              	.LVL217:
 1846              	.L129:
3490:Src/ff.c      **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 1847              		.loc 1 3490 3 is_stmt 1 view .LVU591
3490:Src/ff.c      **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 1848              		.loc 1 3490 6 is_stmt 0 view .LVU592
 1849 0142 40F6F570 		movw	r0, #4085
 1850 0146 8142     		cmp	r1, r0
 1851 0148 07D9     		bls	.L152
3491:Src/ff.c      **** 
 1852              		.loc 1 3491 3 is_stmt 1 view .LVU593
3491:Src/ff.c      **** 
 1853              		.loc 1 3491 6 is_stmt 0 view .LVU594
 1854 014a BBF1000F 		cmp	fp, #0
 1855 014e 06D1     		bne	.L130
3491:Src/ff.c      **** 
 1856              		.loc 1 3491 24 view .LVU595
 1857 0150 0D24     		movs	r4, #13
 1858 0152 7CE0     		b	.L123
 1859              	.LVL218:
 1860              	.L150:
3488:Src/ff.c      **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1861              		.loc 1 3488 31 view .LVU596
 1862 0154 4FF0030B 		mov	fp, #3
 1863 0158 EDE7     		b	.L128
 1864              	.LVL219:
 1865              	.L152:
3490:Src/ff.c      **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 1866              		.loc 1 3490 31 view .LVU597
 1867 015a 4FF0010B 		mov	fp, #1
 1868              	.LVL220:
 1869              	.L130:
3494:Src/ff.c      **** 		fs->volbase = bsect;							/* Volume start sector */
 1870              		.loc 1 3494 3 is_stmt 1 view .LVU598
3494:Src/ff.c      **** 		fs->volbase = bsect;							/* Volume start sector */
 1871              		.loc 1 3494 24 is_stmt 0 view .LVU599
 1872 015e 01F10209 		add	r9, r1, #2
3494:Src/ff.c      **** 		fs->volbase = bsect;							/* Volume start sector */
 1873              		.loc 1 3494 16 view .LVU600
 1874 0162 C7F81890 		str	r9, [r7, #24]
3495:Src/ff.c      **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 1875              		.loc 1 3495 3 is_stmt 1 view .LVU601
3495:Src/ff.c      **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 1876              		.loc 1 3495 15 is_stmt 0 view .LVU602
 1877 0166 3D62     		str	r5, [r7, #32]
3496:Src/ff.c      **** 		fs->database = bsect + sysect;					/* Data start sector */
 1878              		.loc 1 3496 3 is_stmt 1 view .LVU603
3496:Src/ff.c      **** 		fs->database = bsect + sysect;					/* Data start sector */
 1879              		.loc 1 3496 23 is_stmt 0 view .LVU604
 1880 0168 2A44     		add	r2, r2, r5
3496:Src/ff.c      **** 		fs->database = bsect + sysect;					/* Data start sector */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 103


 1881              		.loc 1 3496 15 view .LVU605
 1882 016a 7A62     		str	r2, [r7, #36]
3497:Src/ff.c      **** 		if (fmt == FS_FAT32) {
 1883              		.loc 1 3497 3 is_stmt 1 view .LVU606
3497:Src/ff.c      **** 		if (fmt == FS_FAT32) {
 1884              		.loc 1 3497 24 is_stmt 0 view .LVU607
 1885 016c 2B44     		add	r3, r3, r5
 1886              	.LVL221:
3497:Src/ff.c      **** 		if (fmt == FS_FAT32) {
 1887              		.loc 1 3497 16 view .LVU608
 1888 016e FB62     		str	r3, [r7, #44]
3498:Src/ff.c      **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 1889              		.loc 1 3498 3 is_stmt 1 view .LVU609
3498:Src/ff.c      **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 1890              		.loc 1 3498 6 is_stmt 0 view .LVU610
 1891 0170 BBF1030F 		cmp	fp, #3
 1892 0174 27D0     		beq	.L159
3504:Src/ff.c      **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 1893              		.loc 1 3504 4 is_stmt 1 view .LVU611
3504:Src/ff.c      **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 1894              		.loc 1 3504 7 is_stmt 0 view .LVU612
 1895 0176 BAF1000F 		cmp	r10, #0
 1896 017a 00F08980 		beq	.L156
3505:Src/ff.c      **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 1897              		.loc 1 3505 4 is_stmt 1 view .LVU613
3505:Src/ff.c      **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 1898              		.loc 1 3505 30 is_stmt 0 view .LVU614
 1899 017e 4244     		add	r2, r2, r8
3505:Src/ff.c      **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 1900              		.loc 1 3505 16 view .LVU615
 1901 0180 BA62     		str	r2, [r7, #40]
3506:Src/ff.c      **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1902              		.loc 1 3506 4 is_stmt 1 view .LVU616
3507:Src/ff.c      **** 		}
 1903              		.loc 1 3507 22 is_stmt 0 view .LVU617
 1904 0182 BBF1020F 		cmp	fp, #2
 1905 0186 2FD0     		beq	.L160
3507:Src/ff.c      **** 		}
 1906              		.loc 1 3507 37 discriminator 2 view .LVU618
 1907 0188 09EB4903 		add	r3, r9, r9, lsl #1
3507:Src/ff.c      **** 		}
 1908              		.loc 1 3507 61 discriminator 2 view .LVU619
 1909 018c 09F00109 		and	r9, r9, #1
3507:Src/ff.c      **** 		}
 1910              		.loc 1 3507 22 discriminator 2 view .LVU620
 1911 0190 09EB5309 		add	r9, r9, r3, lsr #1
 1912              	.LVL222:
 1913              	.L132:
3509:Src/ff.c      **** 
 1914              		.loc 1 3509 3 is_stmt 1 view .LVU621
3509:Src/ff.c      **** 
 1915              		.loc 1 3509 27 is_stmt 0 view .LVU622
 1916 0194 09F2FF13 		addw	r3, r9, #511
3509:Src/ff.c      **** 
 1917              		.loc 1 3509 6 view .LVU623
 1918 0198 B6EB532F 		cmp	r6, r3, lsr #9
 1919 019c 7AD3     		bcc	.L157
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 104


3513:Src/ff.c      **** 		fs->fsi_flag = 0x80;
 1920              		.loc 1 3513 3 is_stmt 1 view .LVU624
3513:Src/ff.c      **** 		fs->fsi_flag = 0x80;
 1921              		.loc 1 3513 33 is_stmt 0 view .LVU625
 1922 019e 4FF0FF33 		mov	r3, #-1
 1923 01a2 7B61     		str	r3, [r7, #20]
3513:Src/ff.c      **** 		fs->fsi_flag = 0x80;
 1924              		.loc 1 3513 17 view .LVU626
 1925 01a4 3B61     		str	r3, [r7, #16]
3514:Src/ff.c      **** #if (FF_FS_NOFSINFO & 3) != 3
 1926              		.loc 1 3514 3 is_stmt 1 view .LVU627
3514:Src/ff.c      **** #if (FF_FS_NOFSINFO & 3) != 3
 1927              		.loc 1 3514 16 is_stmt 0 view .LVU628
 1928 01a6 8023     		movs	r3, #128
 1929 01a8 3B71     		strb	r3, [r7, #4]
3516:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 1930              		.loc 1 3516 3 is_stmt 1 view .LVU629
3516:Src/ff.c      **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 1931              		.loc 1 3516 6 is_stmt 0 view .LVU630
 1932 01aa BBF1030F 		cmp	fp, #3
 1933 01ae 1ED0     		beq	.L161
 1934              	.L134:
3537:Src/ff.c      **** 	fs->id = ++Fsid;		/* Volume mount ID */
 1935              		.loc 1 3537 2 is_stmt 1 view .LVU631
3537:Src/ff.c      **** 	fs->id = ++Fsid;		/* Volume mount ID */
 1936              		.loc 1 3537 14 is_stmt 0 view .LVU632
 1937 01b0 87F800B0 		strb	fp, [r7]
3538:Src/ff.c      **** #if FF_USE_LFN == 1
 1938              		.loc 1 3538 2 is_stmt 1 view .LVU633
3538:Src/ff.c      **** #if FF_USE_LFN == 1
 1939              		.loc 1 3538 11 is_stmt 0 view .LVU634
 1940 01b4 3A4A     		ldr	r2, .L162+8
 1941 01b6 1388     		ldrh	r3, [r2]
 1942 01b8 0133     		adds	r3, r3, #1
 1943 01ba 9BB2     		uxth	r3, r3
3538:Src/ff.c      **** #if FF_USE_LFN == 1
 1944              		.loc 1 3538 9 view .LVU635
 1945 01bc 1380     		strh	r3, [r2]	@ movhi
 1946 01be FB80     		strh	r3, [r7, #6]	@ movhi
3540:Src/ff.c      **** #if FF_FS_EXFAT
 1947              		.loc 1 3540 2 is_stmt 1 view .LVU636
3540:Src/ff.c      **** #if FF_FS_EXFAT
 1948              		.loc 1 3540 13 is_stmt 0 view .LVU637
 1949 01c0 384B     		ldr	r3, .L162+12
 1950 01c2 FB60     		str	r3, [r7, #12]
3551:Src/ff.c      **** }
 1951              		.loc 1 3551 2 is_stmt 1 view .LVU638
3551:Src/ff.c      **** }
 1952              		.loc 1 3551 9 is_stmt 0 view .LVU639
 1953 01c4 43E0     		b	.L123
 1954              	.LVL223:
 1955              	.L159:
3499:Src/ff.c      **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1956              		.loc 1 3499 4 is_stmt 1 view .LVU640
3499:Src/ff.c      **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1957              		.loc 1 3499 8 is_stmt 0 view .LVU641
 1958 01c6 07F15E00 		add	r0, r7, #94
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 105


 1959 01ca FFF7FEFF 		bl	ld_word
 1960              	.LVL224:
3499:Src/ff.c      **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 1961              		.loc 1 3499 7 view .LVU642
 1962 01ce 0028     		cmp	r0, #0
 1963 01d0 5AD1     		bne	.L154
3500:Src/ff.c      **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1964              		.loc 1 3500 4 is_stmt 1 view .LVU643
3500:Src/ff.c      **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1965              		.loc 1 3500 7 is_stmt 0 view .LVU644
 1966 01d2 BAF1000F 		cmp	r10, #0
 1967 01d6 59D1     		bne	.L155
3501:Src/ff.c      **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 1968              		.loc 1 3501 4 is_stmt 1 view .LVU645
3501:Src/ff.c      **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 1969              		.loc 1 3501 18 is_stmt 0 view .LVU646
 1970 01d8 07F16000 		add	r0, r7, #96
 1971 01dc FFF7FEFF 		bl	ld_dword
 1972              	.LVL225:
3501:Src/ff.c      **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 1973              		.loc 1 3501 16 view .LVU647
 1974 01e0 B862     		str	r0, [r7, #40]
3502:Src/ff.c      **** 		} else {
 1975              		.loc 1 3502 4 is_stmt 1 view .LVU648
3502:Src/ff.c      **** 		} else {
 1976              		.loc 1 3502 11 is_stmt 0 view .LVU649
 1977 01e2 4FEA8909 		lsl	r9, r9, #2
 1978              	.LVL226:
3502:Src/ff.c      **** 		} else {
 1979              		.loc 1 3502 11 view .LVU650
 1980 01e6 D5E7     		b	.L132
 1981              	.LVL227:
 1982              	.L160:
3507:Src/ff.c      **** 		}
 1983              		.loc 1 3507 22 discriminator 1 view .LVU651
 1984 01e8 4FEA4909 		lsl	r9, r9, #1
 1985 01ec D2E7     		b	.L132
 1986              	.LVL228:
 1987              	.L161:
3517:Src/ff.c      **** 			&& move_window(fs, bsect + 1) == FR_OK)
 1988              		.loc 1 3517 7 view .LVU652
 1989 01ee 07F16400 		add	r0, r7, #100
 1990 01f2 FFF7FEFF 		bl	ld_word
 1991              	.LVL229:
3517:Src/ff.c      **** 			&& move_window(fs, bsect + 1) == FR_OK)
 1992              		.loc 1 3517 4 view .LVU653
 1993 01f6 0128     		cmp	r0, #1
 1994 01f8 DAD1     		bne	.L134
3518:Src/ff.c      **** 		{
 1995              		.loc 1 3518 7 view .LVU654
 1996 01fa 691C     		adds	r1, r5, #1
 1997 01fc 3846     		mov	r0, r7
 1998 01fe FFF7FEFF 		bl	move_window
 1999              	.LVL230:
3518:Src/ff.c      **** 		{
 2000              		.loc 1 3518 4 view .LVU655
 2001 0202 0028     		cmp	r0, #0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 106


 2002 0204 D4D1     		bne	.L134
3520:Src/ff.c      **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 2003              		.loc 1 3520 4 is_stmt 1 view .LVU656
3520:Src/ff.c      **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 2004              		.loc 1 3520 17 is_stmt 0 view .LVU657
 2005 0206 0023     		movs	r3, #0
 2006 0208 3B71     		strb	r3, [r7, #4]
3521:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2007              		.loc 1 3521 4 is_stmt 1 view .LVU658
3521:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2008              		.loc 1 3521 8 is_stmt 0 view .LVU659
 2009 020a 07F23220 		addw	r0, r7, #562
 2010 020e FFF7FEFF 		bl	ld_word
 2011              	.LVL231:
3521:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2012              		.loc 1 3521 7 view .LVU660
 2013 0212 4AF65523 		movw	r3, #43605
 2014 0216 9842     		cmp	r0, r3
 2015 0218 CAD1     		bne	.L134
3522:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 2016              		.loc 1 3522 8 view .LVU661
 2017 021a 07F13400 		add	r0, r7, #52
 2018 021e FFF7FEFF 		bl	ld_dword
 2019              	.LVL232:
3522:Src/ff.c      **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 2020              		.loc 1 3522 5 view .LVU662
 2021 0222 214B     		ldr	r3, .L162+16
 2022 0224 9842     		cmp	r0, r3
 2023 0226 C3D1     		bne	.L134
3523:Src/ff.c      **** 			{
 2024              		.loc 1 3523 8 view .LVU663
 2025 0228 07F50670 		add	r0, r7, #536
 2026 022c FFF7FEFF 		bl	ld_dword
 2027              	.LVL233:
3523:Src/ff.c      **** 			{
 2028              		.loc 1 3523 5 view .LVU664
 2029 0230 1E4B     		ldr	r3, .L162+20
 2030 0232 9842     		cmp	r0, r3
 2031 0234 BCD1     		bne	.L134
3526:Src/ff.c      **** #endif
 2032              		.loc 1 3526 5 is_stmt 1 view .LVU665
3526:Src/ff.c      **** #endif
 2033              		.loc 1 3526 21 is_stmt 0 view .LVU666
 2034 0236 07F50770 		add	r0, r7, #540
 2035 023a FFF7FEFF 		bl	ld_dword
 2036              	.LVL234:
3526:Src/ff.c      **** #endif
 2037              		.loc 1 3526 19 view .LVU667
 2038 023e 7861     		str	r0, [r7, #20]
3529:Src/ff.c      **** #endif
 2039              		.loc 1 3529 5 is_stmt 1 view .LVU668
3529:Src/ff.c      **** #endif
 2040              		.loc 1 3529 21 is_stmt 0 view .LVU669
 2041 0240 07F50870 		add	r0, r7, #544
 2042 0244 FFF7FEFF 		bl	ld_dword
 2043              	.LVL235:
3529:Src/ff.c      **** #endif
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 107


 2044              		.loc 1 3529 19 view .LVU670
 2045 0248 3861     		str	r0, [r7, #16]
 2046 024a B1E7     		b	.L134
 2047              	.LVL236:
 2048              	.L135:
3350:Src/ff.c      **** 
 2049              		.loc 1 3350 22 view .LVU671
 2050 024c 0B24     		movs	r4, #11
 2051              	.LVL237:
 2052              	.L123:
3552:Src/ff.c      **** 
 2053              		.loc 1 3552 1 view .LVU672
 2054 024e 2046     		mov	r0, r4
 2055 0250 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2056              	.LVL238:
 2057              	.L136:
3354:Src/ff.c      **** #if FF_FS_REENTRANT
 2058              		.loc 1 3354 18 view .LVU673
 2059 0254 0C24     		movs	r4, #12
 2060              	.LVL239:
3354:Src/ff.c      **** #if FF_FS_REENTRANT
 2061              		.loc 1 3354 18 view .LVU674
 2062 0256 FAE7     		b	.L123
 2063              	.LVL240:
 2064              	.L138:
3378:Src/ff.c      **** 	}
 2065              		.loc 1 3378 10 view .LVU675
 2066 0258 0324     		movs	r4, #3
 2067 025a F8E7     		b	.L123
 2068              	.L139:
3381:Src/ff.c      **** 	}
 2069              		.loc 1 3381 10 view .LVU676
 2070 025c 0A24     		movs	r4, #10
 2071 025e F6E7     		b	.L123
 2072              	.LVL241:
 2073              	.L140:
3390:Src/ff.c      **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 2074              		.loc 1 3390 23 view .LVU677
 2075 0260 0124     		movs	r4, #1
 2076 0262 F4E7     		b	.L123
 2077              	.L141:
3391:Src/ff.c      **** 	bsect = fs->winsect;					/* Volume offset */
 2078              		.loc 1 3391 23 view .LVU678
 2079 0264 0D24     		movs	r4, #13
 2080 0266 F2E7     		b	.L123
 2081              	.LVL242:
 2082              	.L142:
3460:Src/ff.c      **** 
 2083              		.loc 1 3460 59 view .LVU679
 2084 0268 0D24     		movs	r4, #13
 2085 026a F0E7     		b	.L123
 2086              	.LVL243:
 2087              	.L143:
3467:Src/ff.c      **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 2088              		.loc 1 3467 50 view .LVU680
 2089 026c 0D24     		movs	r4, #13
 2090 026e EEE7     		b	.L123
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 108


 2091              	.LVL244:
 2092              	.L144:
3471:Src/ff.c      **** 
 2093              		.loc 1 3471 63 view .LVU681
 2094 0270 0D24     		movs	r4, #13
 2095 0272 ECE7     		b	.L123
 2096              	.L145:
 2097 0274 0D24     		movs	r4, #13
 2098 0276 EAE7     		b	.L123
 2099              	.L146:
3474:Src/ff.c      **** 
 2100              		.loc 1 3474 49 view .LVU682
 2101 0278 0D24     		movs	r4, #13
 2102 027a E8E7     		b	.L123
 2103              	.LVL245:
 2104              	.L147:
3480:Src/ff.c      **** 
 2105              		.loc 1 3480 25 view .LVU683
 2106 027c 0D24     		movs	r4, #13
 2107 027e E6E7     		b	.L123
 2108              	.LVL246:
 2109              	.L148:
3484:Src/ff.c      **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2110              		.loc 1 3484 30 view .LVU684
 2111 0280 0D24     		movs	r4, #13
 2112 0282 E4E7     		b	.L123
 2113              	.LVL247:
 2114              	.L149:
3486:Src/ff.c      **** 		fmt = 0;
 2115              		.loc 1 3486 26 view .LVU685
 2116 0284 0D24     		movs	r4, #13
 2117 0286 E2E7     		b	.L123
 2118              	.LVL248:
 2119              	.L154:
3499:Src/ff.c      **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2120              		.loc 1 3499 52 view .LVU686
 2121 0288 0D24     		movs	r4, #13
 2122 028a E0E7     		b	.L123
 2123              	.L155:
3500:Src/ff.c      **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2124              		.loc 1 3500 35 view .LVU687
 2125 028c 0D24     		movs	r4, #13
 2126 028e DEE7     		b	.L123
 2127              	.LVL249:
 2128              	.L156:
3504:Src/ff.c      **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2129              		.loc 1 3504 35 view .LVU688
 2130 0290 0D24     		movs	r4, #13
 2131 0292 DCE7     		b	.L123
 2132              	.LVL250:
 2133              	.L157:
3509:Src/ff.c      **** 
 2134              		.loc 1 3509 60 view .LVU689
 2135 0294 0D24     		movs	r4, #13
 2136 0296 DAE7     		b	.L123
 2137              	.L163:
 2138              		.align	2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 109


 2139              	.L162:
 2140 0298 00000000 		.word	.LANCHOR1
 2141 029c F5FFFF0F 		.word	268435445
 2142 02a0 00000000 		.word	.LANCHOR2
 2143 02a4 00000000 		.word	.LANCHOR3
 2144 02a8 52526141 		.word	1096897106
 2145 02ac 72724161 		.word	1631679090
 2146              		.cfi_endproc
 2147              	.LFE37:
 2149              		.section	.text.put_fat,"ax",%progbits
 2150              		.align	1
 2151              		.syntax unified
 2152              		.thumb
 2153              		.thumb_func
 2154              		.fpu softvfp
 2156              	put_fat:
 2157              	.LVL251:
 2158              	.LFB13:
1214:Src/ff.c      **** 	UINT bc;
 2159              		.loc 1 1214 1 is_stmt 1 view -0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 0, uses_anonymous_args = 0
1214:Src/ff.c      **** 	UINT bc;
 2163              		.loc 1 1214 1 is_stmt 0 view .LVU691
 2164 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2165              	.LCFI12:
 2166              		.cfi_def_cfa_offset 32
 2167              		.cfi_offset 4, -32
 2168              		.cfi_offset 5, -28
 2169              		.cfi_offset 6, -24
 2170              		.cfi_offset 7, -20
 2171              		.cfi_offset 8, -16
 2172              		.cfi_offset 9, -12
 2173              		.cfi_offset 10, -8
 2174              		.cfi_offset 14, -4
1215:Src/ff.c      **** 	BYTE *p;
 2175              		.loc 1 1215 2 is_stmt 1 view .LVU692
1216:Src/ff.c      **** 	FRESULT res = FR_INT_ERR;
 2176              		.loc 1 1216 2 view .LVU693
1217:Src/ff.c      **** 
 2177              		.loc 1 1217 2 view .LVU694
 2178              	.LVL252:
1220:Src/ff.c      **** 		switch (fs->fs_type) {
 2179              		.loc 1 1220 2 view .LVU695
1220:Src/ff.c      **** 		switch (fs->fs_type) {
 2180              		.loc 1 1220 5 is_stmt 0 view .LVU696
 2181 0004 0129     		cmp	r1, #1
 2182 0006 7ED9     		bls	.L172
 2183 0008 0746     		mov	r7, r0
 2184 000a 0C46     		mov	r4, r1
 2185 000c 1646     		mov	r6, r2
1220:Src/ff.c      **** 		switch (fs->fs_type) {
 2186              		.loc 1 1220 28 discriminator 1 view .LVU697
 2187 000e 8369     		ldr	r3, [r0, #24]
1220:Src/ff.c      **** 		switch (fs->fs_type) {
 2188              		.loc 1 1220 16 discriminator 1 view .LVU698
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 110


 2189 0010 8B42     		cmp	r3, r1
 2190 0012 7AD9     		bls	.L173
1221:Src/ff.c      **** 		case FS_FAT12:
 2191              		.loc 1 1221 3 is_stmt 1 view .LVU699
1221:Src/ff.c      **** 		case FS_FAT12:
 2192              		.loc 1 1221 13 is_stmt 0 view .LVU700
 2193 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1221:Src/ff.c      **** 		case FS_FAT12:
 2194              		.loc 1 1221 3 view .LVU701
 2195 0016 022B     		cmp	r3, #2
 2196 0018 45D0     		beq	.L166
 2197 001a 032B     		cmp	r3, #3
 2198 001c 57D0     		beq	.L167
 2199 001e 012B     		cmp	r3, #1
 2200 0020 03D0     		beq	.L176
 2201 0022 0225     		movs	r5, #2
 2202              	.LVL253:
 2203              	.L165:
1257:Src/ff.c      **** }
 2204              		.loc 1 1257 2 is_stmt 1 view .LVU702
1258:Src/ff.c      **** 
 2205              		.loc 1 1258 1 is_stmt 0 view .LVU703
 2206 0024 2846     		mov	r0, r5
 2207 0026 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2208              	.LVL254:
 2209              	.L176:
1223:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2210              		.loc 1 1223 4 is_stmt 1 view .LVU704
1223:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2211              		.loc 1 1223 21 view .LVU705
1223:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2212              		.loc 1 1223 24 is_stmt 0 view .LVU706
 2213 002a 01EB5108 		add	r8, r1, r1, lsr #1
 2214              	.LVL255:
1224:Src/ff.c      **** 			if (res != FR_OK) break;
 2215              		.loc 1 1224 4 is_stmt 1 view .LVU707
1224:Src/ff.c      **** 			if (res != FR_OK) break;
 2216              		.loc 1 1224 28 is_stmt 0 view .LVU708
 2217 002e 416A     		ldr	r1, [r0, #36]
 2218              	.LVL256:
1224:Src/ff.c      **** 			if (res != FR_OK) break;
 2219              		.loc 1 1224 10 view .LVU709
 2220 0030 01EB5821 		add	r1, r1, r8, lsr #9
 2221 0034 FFF7FEFF 		bl	move_window
 2222              	.LVL257:
1225:Src/ff.c      **** 			p = fs->win + bc++ % SS(fs);
 2223              		.loc 1 1225 4 is_stmt 1 view .LVU710
1225:Src/ff.c      **** 			p = fs->win + bc++ % SS(fs);
 2224              		.loc 1 1225 7 is_stmt 0 view .LVU711
 2225 0038 0546     		mov	r5, r0
 2226 003a 0028     		cmp	r0, #0
 2227 003c F2D1     		bne	.L165
1226:Src/ff.c      **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 2228              		.loc 1 1226 4 is_stmt 1 view .LVU712
1226:Src/ff.c      **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 2229              		.loc 1 1226 8 is_stmt 0 view .LVU713
 2230 003e 07F1340A 		add	r10, r7, #52
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 111


1226:Src/ff.c      **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 2231              		.loc 1 1226 23 view .LVU714
 2232 0042 08F10109 		add	r9, r8, #1
 2233              	.LVL258:
1226:Src/ff.c      **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 2234              		.loc 1 1226 23 view .LVU715
 2235 0046 C8F30808 		ubfx	r8, r8, #0, #9
 2236              	.LVL259:
1227:Src/ff.c      **** 			fs->wflag = 1;
 2237              		.loc 1 1227 4 is_stmt 1 view .LVU716
1227:Src/ff.c      **** 			fs->wflag = 1;
 2238              		.loc 1 1227 7 is_stmt 0 view .LVU717
 2239 004a 14F00104 		ands	r4, r4, #1
 2240              	.LVL260:
1227:Src/ff.c      **** 			fs->wflag = 1;
 2241              		.loc 1 1227 7 view .LVU718
 2242 004e 1FD0     		beq	.L168
1227:Src/ff.c      **** 			fs->wflag = 1;
 2243              		.loc 1 1227 24 discriminator 1 view .LVU719
 2244 0050 1AF90830 		ldrsb	r3, [r10, r8]
1227:Src/ff.c      **** 			fs->wflag = 1;
 2245              		.loc 1 1227 27 discriminator 1 view .LVU720
 2246 0054 03F00F03 		and	r3, r3, #15
1227:Src/ff.c      **** 			fs->wflag = 1;
 2247              		.loc 1 1227 48 discriminator 1 view .LVU721
 2248 0058 3201     		lsls	r2, r6, #4
 2249 005a 02F47F62 		and	r2, r2, #4080
1227:Src/ff.c      **** 			fs->wflag = 1;
 2250              		.loc 1 1227 35 discriminator 1 view .LVU722
 2251 005e 1343     		orrs	r3, r3, r2
1227:Src/ff.c      **** 			fs->wflag = 1;
 2252              		.loc 1 1227 7 discriminator 1 view .LVU723
 2253 0060 DBB2     		uxtb	r3, r3
 2254              	.L169:
1227:Src/ff.c      **** 			fs->wflag = 1;
 2255              		.loc 1 1227 7 discriminator 4 view .LVU724
 2256 0062 0AF80830 		strb	r3, [r10, r8]
1228:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2257              		.loc 1 1228 4 is_stmt 1 discriminator 4 view .LVU725
1228:Src/ff.c      **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2258              		.loc 1 1228 14 is_stmt 0 discriminator 4 view .LVU726
 2259 0066 0123     		movs	r3, #1
 2260 0068 FB70     		strb	r3, [r7, #3]
1229:Src/ff.c      **** 			if (res != FR_OK) break;
 2261              		.loc 1 1229 4 is_stmt 1 discriminator 4 view .LVU727
1229:Src/ff.c      **** 			if (res != FR_OK) break;
 2262              		.loc 1 1229 28 is_stmt 0 discriminator 4 view .LVU728
 2263 006a 796A     		ldr	r1, [r7, #36]
1229:Src/ff.c      **** 			if (res != FR_OK) break;
 2264              		.loc 1 1229 10 discriminator 4 view .LVU729
 2265 006c 01EB5921 		add	r1, r1, r9, lsr #9
 2266 0070 3846     		mov	r0, r7
 2267              	.LVL261:
1229:Src/ff.c      **** 			if (res != FR_OK) break;
 2268              		.loc 1 1229 10 discriminator 4 view .LVU730
 2269 0072 FFF7FEFF 		bl	move_window
 2270              	.LVL262:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 112


1230:Src/ff.c      **** 			p = fs->win + bc % SS(fs);
 2271              		.loc 1 1230 4 is_stmt 1 discriminator 4 view .LVU731
1230:Src/ff.c      **** 			p = fs->win + bc % SS(fs);
 2272              		.loc 1 1230 7 is_stmt 0 discriminator 4 view .LVU732
 2273 0076 0546     		mov	r5, r0
 2274 0078 0028     		cmp	r0, #0
 2275 007a D3D1     		bne	.L165
1231:Src/ff.c      **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
 2276              		.loc 1 1231 4 is_stmt 1 view .LVU733
1231:Src/ff.c      **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
 2277              		.loc 1 1231 21 is_stmt 0 view .LVU734
 2278 007c C9F30809 		ubfx	r9, r9, #0, #9
 2279              	.LVL263:
1232:Src/ff.c      **** 			fs->wflag = 1;
 2280              		.loc 1 1232 4 is_stmt 1 view .LVU735
1232:Src/ff.c      **** 			fs->wflag = 1;
 2281              		.loc 1 1232 7 is_stmt 0 view .LVU736
 2282 0080 44B1     		cbz	r4, .L170
1232:Src/ff.c      **** 			fs->wflag = 1;
 2283              		.loc 1 1232 7 discriminator 1 view .LVU737
 2284 0082 C6F30712 		ubfx	r2, r6, #4, #8
 2285              	.LVL264:
 2286              	.L171:
1232:Src/ff.c      **** 			fs->wflag = 1;
 2287              		.loc 1 1232 7 discriminator 4 view .LVU738
 2288 0086 0AF80920 		strb	r2, [r10, r9]
1233:Src/ff.c      **** 			break;
 2289              		.loc 1 1233 4 is_stmt 1 discriminator 4 view .LVU739
1233:Src/ff.c      **** 			break;
 2290              		.loc 1 1233 14 is_stmt 0 discriminator 4 view .LVU740
 2291 008a 0123     		movs	r3, #1
 2292 008c FB70     		strb	r3, [r7, #3]
1234:Src/ff.c      **** 
 2293              		.loc 1 1234 4 is_stmt 1 discriminator 4 view .LVU741
 2294 008e C9E7     		b	.L165
 2295              	.LVL265:
 2296              	.L168:
1227:Src/ff.c      **** 			fs->wflag = 1;
 2297              		.loc 1 1227 7 is_stmt 0 discriminator 2 view .LVU742
 2298 0090 F3B2     		uxtb	r3, r6
 2299 0092 E6E7     		b	.L169
 2300              	.LVL266:
 2301              	.L170:
1232:Src/ff.c      **** 			fs->wflag = 1;
 2302              		.loc 1 1232 43 discriminator 2 view .LVU743
 2303 0094 1AF90920 		ldrsb	r2, [r10, r9]
1232:Src/ff.c      **** 			fs->wflag = 1;
 2304              		.loc 1 1232 46 discriminator 2 view .LVU744
 2305 0098 22F00F02 		bic	r2, r2, #15
1232:Src/ff.c      **** 			fs->wflag = 1;
 2306              		.loc 1 1232 74 discriminator 2 view .LVU745
 2307 009c C6F30326 		ubfx	r6, r6, #8, #4
 2308              	.LVL267:
1232:Src/ff.c      **** 			fs->wflag = 1;
 2309              		.loc 1 1232 54 discriminator 2 view .LVU746
 2310 00a0 3243     		orrs	r2, r2, r6
1232:Src/ff.c      **** 			fs->wflag = 1;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 113


 2311              		.loc 1 1232 7 discriminator 2 view .LVU747
 2312 00a2 D2B2     		uxtb	r2, r2
 2313 00a4 EFE7     		b	.L171
 2314              	.LVL268:
 2315              	.L166:
1237:Src/ff.c      **** 			if (res != FR_OK) break;
 2316              		.loc 1 1237 4 is_stmt 1 view .LVU748
1237:Src/ff.c      **** 			if (res != FR_OK) break;
 2317              		.loc 1 1237 28 is_stmt 0 view .LVU749
 2318 00a6 416A     		ldr	r1, [r0, #36]
 2319              	.LVL269:
1237:Src/ff.c      **** 			if (res != FR_OK) break;
 2320              		.loc 1 1237 10 view .LVU750
 2321 00a8 01EB1421 		add	r1, r1, r4, lsr #8
 2322 00ac FFF7FEFF 		bl	move_window
 2323              	.LVL270:
1238:Src/ff.c      **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 2324              		.loc 1 1238 4 is_stmt 1 view .LVU751
1238:Src/ff.c      **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 2325              		.loc 1 1238 7 is_stmt 0 view .LVU752
 2326 00b0 0546     		mov	r5, r0
 2327 00b2 0028     		cmp	r0, #0
 2328 00b4 B6D1     		bne	.L165
1239:Src/ff.c      **** 			fs->wflag = 1;
 2329              		.loc 1 1239 4 is_stmt 1 view .LVU753
1239:Src/ff.c      **** 			fs->wflag = 1;
 2330              		.loc 1 1239 12 is_stmt 0 view .LVU754
 2331 00b6 07F13400 		add	r0, r7, #52
 2332              	.LVL271:
1239:Src/ff.c      **** 			fs->wflag = 1;
 2333              		.loc 1 1239 27 view .LVU755
 2334 00ba 6400     		lsls	r4, r4, #1
 2335              	.LVL272:
1239:Src/ff.c      **** 			fs->wflag = 1;
 2336              		.loc 1 1239 31 view .LVU756
 2337 00bc 04F4FF74 		and	r4, r4, #510
1239:Src/ff.c      **** 			fs->wflag = 1;
 2338              		.loc 1 1239 4 view .LVU757
 2339 00c0 B1B2     		uxth	r1, r6
 2340 00c2 2044     		add	r0, r0, r4
 2341 00c4 FFF7FEFF 		bl	st_word
 2342              	.LVL273:
1240:Src/ff.c      **** 			break;
 2343              		.loc 1 1240 4 is_stmt 1 view .LVU758
1240:Src/ff.c      **** 			break;
 2344              		.loc 1 1240 14 is_stmt 0 view .LVU759
 2345 00c8 0123     		movs	r3, #1
 2346 00ca FB70     		strb	r3, [r7, #3]
1241:Src/ff.c      **** 
 2347              		.loc 1 1241 4 is_stmt 1 view .LVU760
 2348 00cc AAE7     		b	.L165
 2349              	.LVL274:
 2350              	.L167:
1247:Src/ff.c      **** 			if (res != FR_OK) break;
 2351              		.loc 1 1247 4 view .LVU761
1247:Src/ff.c      **** 			if (res != FR_OK) break;
 2352              		.loc 1 1247 28 is_stmt 0 view .LVU762
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 114


 2353 00ce 416A     		ldr	r1, [r0, #36]
 2354              	.LVL275:
1247:Src/ff.c      **** 			if (res != FR_OK) break;
 2355              		.loc 1 1247 10 view .LVU763
 2356 00d0 01EBD411 		add	r1, r1, r4, lsr #7
 2357 00d4 FFF7FEFF 		bl	move_window
 2358              	.LVL276:
1248:Src/ff.c      **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2359              		.loc 1 1248 4 is_stmt 1 view .LVU764
1248:Src/ff.c      **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2360              		.loc 1 1248 7 is_stmt 0 view .LVU765
 2361 00d8 0546     		mov	r5, r0
 2362 00da 0028     		cmp	r0, #0
 2363 00dc A2D1     		bne	.L165
1249:Src/ff.c      **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 2364              		.loc 1 1249 4 is_stmt 1 view .LVU766
1250:Src/ff.c      **** 			}
 2365              		.loc 1 1250 5 view .LVU767
1250:Src/ff.c      **** 			}
 2366              		.loc 1 1250 16 is_stmt 0 view .LVU768
 2367 00de 26F07046 		bic	r6, r6, #-268435456
 2368              	.LVL277:
1250:Src/ff.c      **** 			}
 2369              		.loc 1 1250 42 view .LVU769
 2370 00e2 07F13403 		add	r3, r7, #52
1250:Src/ff.c      **** 			}
 2371              		.loc 1 1250 57 view .LVU770
 2372 00e6 A400     		lsls	r4, r4, #2
 2373              	.LVL278:
1250:Src/ff.c      **** 			}
 2374              		.loc 1 1250 61 view .LVU771
 2375 00e8 04F4FE74 		and	r4, r4, #508
1250:Src/ff.c      **** 			}
 2376              		.loc 1 1250 33 view .LVU772
 2377 00ec 1C44     		add	r4, r4, r3
 2378 00ee 2046     		mov	r0, r4
 2379              	.LVL279:
1250:Src/ff.c      **** 			}
 2380              		.loc 1 1250 33 view .LVU773
 2381 00f0 FFF7FEFF 		bl	ld_dword
 2382              	.LVL280:
1250:Src/ff.c      **** 			}
 2383              		.loc 1 1250 71 view .LVU774
 2384 00f4 00F07041 		and	r1, r0, #-268435456
 2385              	.LVL281:
1252:Src/ff.c      **** 			fs->wflag = 1;
 2386              		.loc 1 1252 4 is_stmt 1 view .LVU775
 2387 00f8 3143     		orrs	r1, r1, r6
 2388              	.LVL282:
1252:Src/ff.c      **** 			fs->wflag = 1;
 2389              		.loc 1 1252 4 is_stmt 0 view .LVU776
 2390 00fa 2046     		mov	r0, r4
 2391 00fc FFF7FEFF 		bl	st_dword
 2392              	.LVL283:
1253:Src/ff.c      **** 			break;
 2393              		.loc 1 1253 4 is_stmt 1 view .LVU777
1253:Src/ff.c      **** 			break;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 115


 2394              		.loc 1 1253 14 is_stmt 0 view .LVU778
 2395 0100 0123     		movs	r3, #1
 2396 0102 FB70     		strb	r3, [r7, #3]
1254:Src/ff.c      **** 		}
 2397              		.loc 1 1254 4 is_stmt 1 view .LVU779
 2398 0104 8EE7     		b	.L165
 2399              	.LVL284:
 2400              	.L172:
1217:Src/ff.c      **** 
 2401              		.loc 1 1217 10 is_stmt 0 view .LVU780
 2402 0106 0225     		movs	r5, #2
 2403 0108 8CE7     		b	.L165
 2404              	.L173:
1217:Src/ff.c      **** 
 2405              		.loc 1 1217 10 view .LVU781
 2406 010a 0225     		movs	r5, #2
 2407 010c 8AE7     		b	.L165
 2408              		.cfi_endproc
 2409              	.LFE13:
 2411              		.section	.text.get_fat,"ax",%progbits
 2412              		.align	1
 2413              		.syntax unified
 2414              		.thumb
 2415              		.thumb_func
 2416              		.fpu softvfp
 2418              	get_fat:
 2419              	.LVL285:
 2420              	.LFB12:
1135:Src/ff.c      **** 	UINT wc, bc;
 2421              		.loc 1 1135 1 is_stmt 1 view -0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
1135:Src/ff.c      **** 	UINT wc, bc;
 2425              		.loc 1 1135 1 is_stmt 0 view .LVU783
 2426 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2427              	.LCFI13:
 2428              		.cfi_def_cfa_offset 24
 2429              		.cfi_offset 3, -24
 2430              		.cfi_offset 4, -20
 2431              		.cfi_offset 5, -16
 2432              		.cfi_offset 6, -12
 2433              		.cfi_offset 7, -8
 2434              		.cfi_offset 14, -4
1136:Src/ff.c      **** 	DWORD val;
 2435              		.loc 1 1136 2 is_stmt 1 view .LVU784
1137:Src/ff.c      **** 	FATFS *fs = obj->fs;
 2436              		.loc 1 1137 2 view .LVU785
1138:Src/ff.c      **** 
 2437              		.loc 1 1138 2 view .LVU786
1138:Src/ff.c      **** 
 2438              		.loc 1 1138 9 is_stmt 0 view .LVU787
 2439 0002 0568     		ldr	r5, [r0]
 2440              	.LVL286:
1141:Src/ff.c      **** 		val = 1;	/* Internal error */
 2441              		.loc 1 1141 2 is_stmt 1 view .LVU788
1141:Src/ff.c      **** 		val = 1;	/* Internal error */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 116


 2442              		.loc 1 1141 5 is_stmt 0 view .LVU789
 2443 0004 0129     		cmp	r1, #1
 2444 0006 56D9     		bls	.L182
 2445 0008 0C46     		mov	r4, r1
1141:Src/ff.c      **** 		val = 1;	/* Internal error */
 2446              		.loc 1 1141 28 discriminator 1 view .LVU790
 2447 000a AB69     		ldr	r3, [r5, #24]
1141:Src/ff.c      **** 		val = 1;	/* Internal error */
 2448              		.loc 1 1141 15 discriminator 1 view .LVU791
 2449 000c 8B42     		cmp	r3, r1
 2450 000e 54D9     		bls	.L183
1145:Src/ff.c      **** 
 2451              		.loc 1 1145 3 is_stmt 1 view .LVU792
 2452              	.LVL287:
1147:Src/ff.c      **** 		case FS_FAT12 :
 2453              		.loc 1 1147 3 view .LVU793
1147:Src/ff.c      **** 		case FS_FAT12 :
 2454              		.loc 1 1147 13 is_stmt 0 view .LVU794
 2455 0010 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1147:Src/ff.c      **** 		case FS_FAT12 :
 2456              		.loc 1 1147 3 view .LVU795
 2457 0012 022B     		cmp	r3, #2
 2458 0014 2DD0     		beq	.L179
 2459 0016 032B     		cmp	r3, #3
 2460 0018 3BD0     		beq	.L180
 2461 001a 012B     		cmp	r3, #1
 2462 001c 01D0     		beq	.L190
 2463 001e 0120     		movs	r0, #1
 2464              	.LVL288:
1147:Src/ff.c      **** 		case FS_FAT12 :
 2465              		.loc 1 1147 3 view .LVU796
 2466 0020 4AE0     		b	.L177
 2467              	.LVL289:
 2468              	.L190:
1149:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2469              		.loc 1 1149 4 is_stmt 1 view .LVU797
1149:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2470              		.loc 1 1149 21 view .LVU798
1149:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2471              		.loc 1 1149 24 is_stmt 0 view .LVU799
 2472 0022 01EB5106 		add	r6, r1, r1, lsr #1
 2473              	.LVL290:
1150:Src/ff.c      **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2474              		.loc 1 1150 4 is_stmt 1 view .LVU800
1150:Src/ff.c      **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2475              		.loc 1 1150 26 is_stmt 0 view .LVU801
 2476 0026 696A     		ldr	r1, [r5, #36]
 2477              	.LVL291:
1150:Src/ff.c      **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2478              		.loc 1 1150 8 view .LVU802
 2479 0028 01EB5621 		add	r1, r1, r6, lsr #9
 2480 002c 2846     		mov	r0, r5
 2481              	.LVL292:
1150:Src/ff.c      **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2482              		.loc 1 1150 8 view .LVU803
 2483 002e FFF7FEFF 		bl	move_window
 2484              	.LVL293:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 117


1150:Src/ff.c      **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2485              		.loc 1 1150 7 view .LVU804
 2486 0032 10B1     		cbz	r0, .L191
1145:Src/ff.c      **** 
 2487              		.loc 1 1145 7 view .LVU805
 2488 0034 4FF0FF30 		mov	r0, #-1
 2489 0038 3EE0     		b	.L177
 2490              	.L191:
1151:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2491              		.loc 1 1151 4 is_stmt 1 view .LVU806
1151:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2492              		.loc 1 1151 19 is_stmt 0 view .LVU807
 2493 003a 771C     		adds	r7, r6, #1
 2494              	.LVL294:
1151:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2495              		.loc 1 1151 22 view .LVU808
 2496 003c C6F30806 		ubfx	r6, r6, #0, #9
1151:Src/ff.c      **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2497              		.loc 1 1151 16 view .LVU809
 2498 0040 2E44     		add	r6, r6, r5
 2499 0042 96F83460 		ldrb	r6, [r6, #52]	@ zero_extendqisi2
 2500              	.LVL295:
1152:Src/ff.c      **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 2501              		.loc 1 1152 4 is_stmt 1 view .LVU810
1152:Src/ff.c      **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 2502              		.loc 1 1152 26 is_stmt 0 view .LVU811
 2503 0046 696A     		ldr	r1, [r5, #36]
1152:Src/ff.c      **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 2504              		.loc 1 1152 8 view .LVU812
 2505 0048 01EB5721 		add	r1, r1, r7, lsr #9
 2506 004c 2846     		mov	r0, r5
 2507 004e FFF7FEFF 		bl	move_window
 2508              	.LVL296:
1152:Src/ff.c      **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 2509              		.loc 1 1152 7 view .LVU813
 2510 0052 A0BB     		cbnz	r0, .L186
1153:Src/ff.c      **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2511              		.loc 1 1153 4 is_stmt 1 view .LVU814
1153:Src/ff.c      **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2512              		.loc 1 1153 21 is_stmt 0 view .LVU815
 2513 0054 C7F30807 		ubfx	r7, r7, #0, #9
 2514              	.LVL297:
1153:Src/ff.c      **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2515              		.loc 1 1153 17 view .LVU816
 2516 0058 3D44     		add	r5, r5, r7
 2517              	.LVL298:
1153:Src/ff.c      **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2518              		.loc 1 1153 17 view .LVU817
 2519 005a 95F83400 		ldrb	r0, [r5, #52]	@ zero_extendqisi2
1153:Src/ff.c      **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2520              		.loc 1 1153 7 view .LVU818
 2521 005e 46EA0020 		orr	r0, r6, r0, lsl #8
 2522              	.LVL299:
1154:Src/ff.c      **** 			break;
 2523              		.loc 1 1154 4 is_stmt 1 view .LVU819
1154:Src/ff.c      **** 			break;
 2524              		.loc 1 1154 33 is_stmt 0 view .LVU820
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 118


 2525 0062 14F0010F 		tst	r4, #1
 2526 0066 01D0     		beq	.L181
1154:Src/ff.c      **** 			break;
 2527              		.loc 1 1154 33 discriminator 1 view .LVU821
 2528 0068 0009     		lsrs	r0, r0, #4
 2529              	.LVL300:
1154:Src/ff.c      **** 			break;
 2530              		.loc 1 1154 33 discriminator 1 view .LVU822
 2531 006a 25E0     		b	.L177
 2532              	.LVL301:
 2533              	.L181:
1154:Src/ff.c      **** 			break;
 2534              		.loc 1 1154 33 discriminator 2 view .LVU823
 2535 006c C0F30B00 		ubfx	r0, r0, #0, #12
 2536              	.LVL302:
1154:Src/ff.c      **** 			break;
 2537              		.loc 1 1154 33 discriminator 2 view .LVU824
 2538 0070 22E0     		b	.L177
 2539              	.LVL303:
 2540              	.L179:
1158:Src/ff.c      **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2541              		.loc 1 1158 4 is_stmt 1 view .LVU825
1158:Src/ff.c      **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2542              		.loc 1 1158 26 is_stmt 0 view .LVU826
 2543 0072 696A     		ldr	r1, [r5, #36]
 2544              	.LVL304:
1158:Src/ff.c      **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2545              		.loc 1 1158 8 view .LVU827
 2546 0074 01EB1421 		add	r1, r1, r4, lsr #8
 2547 0078 2846     		mov	r0, r5
 2548              	.LVL305:
1158:Src/ff.c      **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2549              		.loc 1 1158 8 view .LVU828
 2550 007a FFF7FEFF 		bl	move_window
 2551              	.LVL306:
1158:Src/ff.c      **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2552              		.loc 1 1158 7 view .LVU829
 2553 007e 08BB     		cbnz	r0, .L187
1159:Src/ff.c      **** 			break;
 2554              		.loc 1 1159 4 is_stmt 1 view .LVU830
1159:Src/ff.c      **** 			break;
 2555              		.loc 1 1159 18 is_stmt 0 view .LVU831
 2556 0080 05F13400 		add	r0, r5, #52
1159:Src/ff.c      **** 			break;
 2557              		.loc 1 1159 33 view .LVU832
 2558 0084 6400     		lsls	r4, r4, #1
 2559              	.LVL307:
1159:Src/ff.c      **** 			break;
 2560              		.loc 1 1159 37 view .LVU833
 2561 0086 04F4FF74 		and	r4, r4, #510
1159:Src/ff.c      **** 			break;
 2562              		.loc 1 1159 10 view .LVU834
 2563 008a 2044     		add	r0, r0, r4
 2564 008c FFF7FEFF 		bl	ld_word
 2565              	.LVL308:
1160:Src/ff.c      **** 
 2566              		.loc 1 1160 4 is_stmt 1 view .LVU835
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 119


 2567 0090 12E0     		b	.L177
 2568              	.LVL309:
 2569              	.L180:
1163:Src/ff.c      **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2570              		.loc 1 1163 4 view .LVU836
1163:Src/ff.c      **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2571              		.loc 1 1163 26 is_stmt 0 view .LVU837
 2572 0092 696A     		ldr	r1, [r5, #36]
 2573              	.LVL310:
1163:Src/ff.c      **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2574              		.loc 1 1163 8 view .LVU838
 2575 0094 01EBD411 		add	r1, r1, r4, lsr #7
 2576 0098 2846     		mov	r0, r5
 2577              	.LVL311:
1163:Src/ff.c      **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2578              		.loc 1 1163 8 view .LVU839
 2579 009a FFF7FEFF 		bl	move_window
 2580              	.LVL312:
1163:Src/ff.c      **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2581              		.loc 1 1163 7 view .LVU840
 2582 009e A0B9     		cbnz	r0, .L188
1164:Src/ff.c      **** 			break;
 2583              		.loc 1 1164 4 is_stmt 1 view .LVU841
1164:Src/ff.c      **** 			break;
 2584              		.loc 1 1164 19 is_stmt 0 view .LVU842
 2585 00a0 05F13400 		add	r0, r5, #52
1164:Src/ff.c      **** 			break;
 2586              		.loc 1 1164 34 view .LVU843
 2587 00a4 A400     		lsls	r4, r4, #2
 2588              	.LVL313:
1164:Src/ff.c      **** 			break;
 2589              		.loc 1 1164 38 view .LVU844
 2590 00a6 04F4FE74 		and	r4, r4, #508
1164:Src/ff.c      **** 			break;
 2591              		.loc 1 1164 10 view .LVU845
 2592 00aa 2044     		add	r0, r0, r4
 2593 00ac FFF7FEFF 		bl	ld_dword
 2594              	.LVL314:
1164:Src/ff.c      **** 			break;
 2595              		.loc 1 1164 8 view .LVU846
 2596 00b0 20F07040 		bic	r0, r0, #-268435456
 2597              	.LVL315:
1165:Src/ff.c      **** #if FF_FS_EXFAT
 2598              		.loc 1 1165 4 is_stmt 1 view .LVU847
 2599 00b4 00E0     		b	.L177
 2600              	.LVL316:
 2601              	.L182:
1142:Src/ff.c      **** 
 2602              		.loc 1 1142 7 is_stmt 0 view .LVU848
 2603 00b6 0120     		movs	r0, #1
 2604              	.LVL317:
 2605              	.L177:
1199:Src/ff.c      **** 
 2606              		.loc 1 1199 1 view .LVU849
 2607 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2608              	.LVL318:
 2609              	.L183:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 120


1142:Src/ff.c      **** 
 2610              		.loc 1 1142 7 view .LVU850
 2611 00ba 0120     		movs	r0, #1
 2612              	.LVL319:
1142:Src/ff.c      **** 
 2613              		.loc 1 1142 7 view .LVU851
 2614 00bc FCE7     		b	.L177
 2615              	.LVL320:
 2616              	.L186:
1145:Src/ff.c      **** 
 2617              		.loc 1 1145 7 view .LVU852
 2618 00be 4FF0FF30 		mov	r0, #-1
 2619 00c2 F9E7     		b	.L177
 2620              	.LVL321:
 2621              	.L187:
1145:Src/ff.c      **** 
 2622              		.loc 1 1145 7 view .LVU853
 2623 00c4 4FF0FF30 		mov	r0, #-1
 2624 00c8 F6E7     		b	.L177
 2625              	.L188:
1145:Src/ff.c      **** 
 2626              		.loc 1 1145 7 view .LVU854
 2627 00ca 4FF0FF30 		mov	r0, #-1
1198:Src/ff.c      **** }
 2628              		.loc 1 1198 2 is_stmt 1 view .LVU855
1198:Src/ff.c      **** }
 2629              		.loc 1 1198 9 is_stmt 0 view .LVU856
 2630 00ce F3E7     		b	.L177
 2631              		.cfi_endproc
 2632              	.LFE12:
 2634              		.section	.text.dir_sdi,"ax",%progbits
 2635              		.align	1
 2636              		.syntax unified
 2637              		.thumb
 2638              		.thumb_func
 2639              		.fpu softvfp
 2641              	dir_sdi:
 2642              	.LVL322:
 2643              	.LFB17:
1670:Src/ff.c      **** 	DWORD csz, clst;
 2644              		.loc 1 1670 1 is_stmt 1 view -0
 2645              		.cfi_startproc
 2646              		@ args = 0, pretend = 0, frame = 0
 2647              		@ frame_needed = 0, uses_anonymous_args = 0
1670:Src/ff.c      **** 	DWORD csz, clst;
 2648              		.loc 1 1670 1 is_stmt 0 view .LVU858
 2649 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2650              	.LCFI14:
 2651              		.cfi_def_cfa_offset 24
 2652              		.cfi_offset 4, -24
 2653              		.cfi_offset 5, -20
 2654              		.cfi_offset 6, -16
 2655              		.cfi_offset 7, -12
 2656              		.cfi_offset 8, -8
 2657              		.cfi_offset 14, -4
1671:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 2658              		.loc 1 1671 2 is_stmt 1 view .LVU859
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 121


1672:Src/ff.c      **** 
 2659              		.loc 1 1672 2 view .LVU860
1672:Src/ff.c      **** 
 2660              		.loc 1 1672 9 is_stmt 0 view .LVU861
 2661 0004 D0F80080 		ldr	r8, [r0]
 2662              	.LVL323:
1675:Src/ff.c      **** 		return FR_INT_ERR;
 2663              		.loc 1 1675 2 is_stmt 1 view .LVU862
1675:Src/ff.c      **** 		return FR_INT_ERR;
 2664              		.loc 1 1675 5 is_stmt 0 view .LVU863
 2665 0008 B1F5001F 		cmp	r1, #2097152
 2666 000c 40D2     		bcs	.L199
 2667 000e 0646     		mov	r6, r0
 2668 0010 0F46     		mov	r7, r1
1675:Src/ff.c      **** 		return FR_INT_ERR;
 2669              		.loc 1 1675 86 discriminator 1 view .LVU864
 2670 0012 11F01F0F 		tst	r1, #31
 2671 0016 3DD1     		bne	.L200
1678:Src/ff.c      **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2672              		.loc 1 1678 2 is_stmt 1 view .LVU865
1678:Src/ff.c      **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2673              		.loc 1 1678 11 is_stmt 0 view .LVU866
 2674 0018 0161     		str	r1, [r0, #16]
1679:Src/ff.c      **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2675              		.loc 1 1679 2 is_stmt 1 view .LVU867
1679:Src/ff.c      **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2676              		.loc 1 1679 7 is_stmt 0 view .LVU868
 2677 001a 8468     		ldr	r4, [r0, #8]
 2678              	.LVL324:
1680:Src/ff.c      **** 		clst = (DWORD)fs->dirbase;
 2679              		.loc 1 1680 2 is_stmt 1 view .LVU869
1680:Src/ff.c      **** 		clst = (DWORD)fs->dirbase;
 2680              		.loc 1 1680 5 is_stmt 0 view .LVU870
 2681 001c 2CB9     		cbnz	r4, .L194
1680:Src/ff.c      **** 		clst = (DWORD)fs->dirbase;
 2682              		.loc 1 1680 21 discriminator 1 view .LVU871
 2683 001e 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
1680:Src/ff.c      **** 		clst = (DWORD)fs->dirbase;
 2684              		.loc 1 1680 16 discriminator 1 view .LVU872
 2685 0022 022B     		cmp	r3, #2
 2686 0024 01D9     		bls	.L194
1681:Src/ff.c      **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2687              		.loc 1 1681 3 is_stmt 1 view .LVU873
1681:Src/ff.c      **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2688              		.loc 1 1681 8 is_stmt 0 view .LVU874
 2689 0026 D8F82840 		ldr	r4, [r8, #40]
 2690              	.LVL325:
1682:Src/ff.c      **** 	}
 2691              		.loc 1 1682 3 is_stmt 1 view .LVU875
 2692              	.L194:
1685:Src/ff.c      **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 2693              		.loc 1 1685 2 view .LVU876
1685:Src/ff.c      **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 2694              		.loc 1 1685 5 is_stmt 0 view .LVU877
 2695 002a B4B9     		cbnz	r4, .L195
1686:Src/ff.c      **** 		dp->sect = fs->dirbase;
 2696              		.loc 1 1686 3 is_stmt 1 view .LVU878
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 122


1686:Src/ff.c      **** 		dp->sect = fs->dirbase;
 2697              		.loc 1 1686 25 is_stmt 0 view .LVU879
 2698 002c B8F80830 		ldrh	r3, [r8, #8]
1686:Src/ff.c      **** 		dp->sect = fs->dirbase;
 2699              		.loc 1 1686 6 view .LVU880
 2700 0030 B3EB571F 		cmp	r3, r7, lsr #5
 2701 0034 30D9     		bls	.L201
1687:Src/ff.c      **** 
 2702              		.loc 1 1687 3 is_stmt 1 view .LVU881
1687:Src/ff.c      **** 
 2703              		.loc 1 1687 16 is_stmt 0 view .LVU882
 2704 0036 D8F82830 		ldr	r3, [r8, #40]
1687:Src/ff.c      **** 
 2705              		.loc 1 1687 12 view .LVU883
 2706 003a B361     		str	r3, [r6, #24]
 2707              	.LVL326:
 2708              	.L196:
1699:Src/ff.c      **** 	if (dp->sect == 0) return FR_INT_ERR;
 2709              		.loc 1 1699 2 is_stmt 1 view .LVU884
1699:Src/ff.c      **** 	if (dp->sect == 0) return FR_INT_ERR;
 2710              		.loc 1 1699 12 is_stmt 0 view .LVU885
 2711 003c 7461     		str	r4, [r6, #20]
1700:Src/ff.c      **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2712              		.loc 1 1700 2 is_stmt 1 view .LVU886
1700:Src/ff.c      **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2713              		.loc 1 1700 8 is_stmt 0 view .LVU887
 2714 003e B369     		ldr	r3, [r6, #24]
1700:Src/ff.c      **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2715              		.loc 1 1700 5 view .LVU888
 2716 0040 93B3     		cbz	r3, .L205
1701:Src/ff.c      **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2717              		.loc 1 1701 2 is_stmt 1 view .LVU889
1701:Src/ff.c      **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2718              		.loc 1 1701 11 is_stmt 0 view .LVU890
 2719 0042 03EB5723 		add	r3, r3, r7, lsr #9
 2720 0046 B361     		str	r3, [r6, #24]
1702:Src/ff.c      **** 
 2721              		.loc 1 1702 2 is_stmt 1 view .LVU891
1702:Src/ff.c      **** 
 2722              		.loc 1 1702 12 is_stmt 0 view .LVU892
 2723 0048 08F13403 		add	r3, r8, #52
1702:Src/ff.c      **** 
 2724              		.loc 1 1702 27 view .LVU893
 2725 004c C7F30801 		ubfx	r1, r7, #0, #9
1702:Src/ff.c      **** 
 2726              		.loc 1 1702 20 view .LVU894
 2727 0050 1944     		add	r1, r1, r3
1702:Src/ff.c      **** 
 2728              		.loc 1 1702 10 view .LVU895
 2729 0052 F161     		str	r1, [r6, #28]
1704:Src/ff.c      **** }
 2730              		.loc 1 1704 2 is_stmt 1 view .LVU896
1704:Src/ff.c      **** }
 2731              		.loc 1 1704 9 is_stmt 0 view .LVU897
 2732 0054 0020     		movs	r0, #0
 2733              	.LVL327:
 2734              	.L193:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 123


1705:Src/ff.c      **** 
 2735              		.loc 1 1705 1 view .LVU898
 2736 0056 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2737              	.LVL328:
 2738              	.L195:
1690:Src/ff.c      **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2739              		.loc 1 1690 3 is_stmt 1 view .LVU899
1690:Src/ff.c      **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2740              		.loc 1 1690 18 is_stmt 0 view .LVU900
 2741 005a B8F80A50 		ldrh	r5, [r8, #10]
1690:Src/ff.c      **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2742              		.loc 1 1690 7 view .LVU901
 2743 005e 6D02     		lsls	r5, r5, #9
 2744              	.LVL329:
1691:Src/ff.c      **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2745              		.loc 1 1691 3 is_stmt 1 view .LVU902
 2746              	.L197:
1691:Src/ff.c      **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2747              		.loc 1 1691 9 view .LVU903
 2748 0060 AF42     		cmp	r7, r5
 2749 0062 0FD3     		bcc	.L207
1692:Src/ff.c      **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2750              		.loc 1 1692 4 view .LVU904
1692:Src/ff.c      **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2751              		.loc 1 1692 11 is_stmt 0 view .LVU905
 2752 0064 2146     		mov	r1, r4
 2753 0066 3046     		mov	r0, r6
 2754 0068 FFF7FEFF 		bl	get_fat
 2755              	.LVL330:
 2756 006c 0446     		mov	r4, r0
 2757              	.LVL331:
1693:Src/ff.c      **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2758              		.loc 1 1693 4 is_stmt 1 view .LVU906
1693:Src/ff.c      **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2759              		.loc 1 1693 7 is_stmt 0 view .LVU907
 2760 006e B0F1FF3F 		cmp	r0, #-1
 2761 0072 13D0     		beq	.L202
1694:Src/ff.c      **** 			ofs -= csz;
 2762              		.loc 1 1694 4 is_stmt 1 view .LVU908
1694:Src/ff.c      **** 			ofs -= csz;
 2763              		.loc 1 1694 7 is_stmt 0 view .LVU909
 2764 0074 0128     		cmp	r0, #1
 2765 0076 13D9     		bls	.L203
1694:Src/ff.c      **** 			ofs -= csz;
 2766              		.loc 1 1694 30 discriminator 2 view .LVU910
 2767 0078 D8F81830 		ldr	r3, [r8, #24]
1694:Src/ff.c      **** 			ofs -= csz;
 2768              		.loc 1 1694 17 discriminator 2 view .LVU911
 2769 007c 8342     		cmp	r3, r0
 2770 007e 11D9     		bls	.L204
1695:Src/ff.c      **** 		}
 2771              		.loc 1 1695 4 is_stmt 1 view .LVU912
1695:Src/ff.c      **** 		}
 2772              		.loc 1 1695 8 is_stmt 0 view .LVU913
 2773 0080 7F1B     		subs	r7, r7, r5
 2774              	.LVL332:
1695:Src/ff.c      **** 		}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 124


 2775              		.loc 1 1695 8 view .LVU914
 2776 0082 EDE7     		b	.L197
 2777              	.LVL333:
 2778              	.L207:
1697:Src/ff.c      **** 	}
 2779              		.loc 1 1697 3 is_stmt 1 view .LVU915
1697:Src/ff.c      **** 	}
 2780              		.loc 1 1697 14 is_stmt 0 view .LVU916
 2781 0084 2146     		mov	r1, r4
 2782 0086 4046     		mov	r0, r8
 2783 0088 FFF7FEFF 		bl	clst2sect
 2784              	.LVL334:
1697:Src/ff.c      **** 	}
 2785              		.loc 1 1697 12 view .LVU917
 2786 008c B061     		str	r0, [r6, #24]
 2787 008e D5E7     		b	.L196
 2788              	.LVL335:
 2789              	.L199:
1676:Src/ff.c      **** 	}
 2790              		.loc 1 1676 10 view .LVU918
 2791 0090 0220     		movs	r0, #2
 2792              	.LVL336:
1676:Src/ff.c      **** 	}
 2793              		.loc 1 1676 10 view .LVU919
 2794 0092 E0E7     		b	.L193
 2795              	.LVL337:
 2796              	.L200:
1676:Src/ff.c      **** 	}
 2797              		.loc 1 1676 10 view .LVU920
 2798 0094 0220     		movs	r0, #2
 2799              	.LVL338:
1676:Src/ff.c      **** 	}
 2800              		.loc 1 1676 10 view .LVU921
 2801 0096 DEE7     		b	.L193
 2802              	.LVL339:
 2803              	.L201:
1686:Src/ff.c      **** 		dp->sect = fs->dirbase;
 2804              		.loc 1 1686 45 view .LVU922
 2805 0098 0220     		movs	r0, #2
 2806              	.LVL340:
1686:Src/ff.c      **** 		dp->sect = fs->dirbase;
 2807              		.loc 1 1686 45 view .LVU923
 2808 009a DCE7     		b	.L193
 2809              	.LVL341:
 2810              	.L202:
1693:Src/ff.c      **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2811              		.loc 1 1693 35 view .LVU924
 2812 009c 0120     		movs	r0, #1
 2813              	.LVL342:
1693:Src/ff.c      **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2814              		.loc 1 1693 35 view .LVU925
 2815 009e DAE7     		b	.L193
 2816              	.LVL343:
 2817              	.L203:
1694:Src/ff.c      **** 			ofs -= csz;
 2818              		.loc 1 1694 49 view .LVU926
 2819 00a0 0220     		movs	r0, #2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 125


 2820              	.LVL344:
1694:Src/ff.c      **** 			ofs -= csz;
 2821              		.loc 1 1694 49 view .LVU927
 2822 00a2 D8E7     		b	.L193
 2823              	.LVL345:
 2824              	.L204:
1694:Src/ff.c      **** 			ofs -= csz;
 2825              		.loc 1 1694 49 view .LVU928
 2826 00a4 0220     		movs	r0, #2
 2827              	.LVL346:
1694:Src/ff.c      **** 			ofs -= csz;
 2828              		.loc 1 1694 49 view .LVU929
 2829 00a6 D6E7     		b	.L193
 2830              	.LVL347:
 2831              	.L205:
1700:Src/ff.c      **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2832              		.loc 1 1700 28 view .LVU930
 2833 00a8 0220     		movs	r0, #2
 2834 00aa D4E7     		b	.L193
 2835              		.cfi_endproc
 2836              	.LFE17:
 2838              		.section	.text.create_chain,"ax",%progbits
 2839              		.align	1
 2840              		.syntax unified
 2841              		.thumb
 2842              		.thumb_func
 2843              		.fpu softvfp
 2845              	create_chain:
 2846              	.LVL348:
 2847              	.LFB15:
1498:Src/ff.c      **** 	DWORD cs, ncl, scl;
 2848              		.loc 1 1498 1 is_stmt 1 view -0
 2849              		.cfi_startproc
 2850              		@ args = 0, pretend = 0, frame = 0
 2851              		@ frame_needed = 0, uses_anonymous_args = 0
1498:Src/ff.c      **** 	DWORD cs, ncl, scl;
 2852              		.loc 1 1498 1 is_stmt 0 view .LVU932
 2853 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2854              	.LCFI15:
 2855              		.cfi_def_cfa_offset 24
 2856              		.cfi_offset 4, -24
 2857              		.cfi_offset 5, -20
 2858              		.cfi_offset 6, -16
 2859              		.cfi_offset 7, -12
 2860              		.cfi_offset 8, -8
 2861              		.cfi_offset 14, -4
 2862 0004 0546     		mov	r5, r0
1499:Src/ff.c      **** 	FRESULT res;
 2863              		.loc 1 1499 2 is_stmt 1 view .LVU933
1500:Src/ff.c      **** 	FATFS *fs = obj->fs;
 2864              		.loc 1 1500 2 view .LVU934
1501:Src/ff.c      **** 
 2865              		.loc 1 1501 2 view .LVU935
1501:Src/ff.c      **** 
 2866              		.loc 1 1501 9 is_stmt 0 view .LVU936
 2867 0006 0668     		ldr	r6, [r0]
 2868              	.LVL349:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 126


1504:Src/ff.c      **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2869              		.loc 1 1504 2 is_stmt 1 view .LVU937
1504:Src/ff.c      **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2870              		.loc 1 1504 5 is_stmt 0 view .LVU938
 2871 0008 0F46     		mov	r7, r1
 2872 000a 51B9     		cbnz	r1, .L209
1505:Src/ff.c      **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2873              		.loc 1 1505 3 is_stmt 1 view .LVU939
1505:Src/ff.c      **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2874              		.loc 1 1505 7 is_stmt 0 view .LVU940
 2875 000c D6F81080 		ldr	r8, [r6, #16]
 2876              	.LVL350:
1506:Src/ff.c      **** 	}
 2877              		.loc 1 1506 3 is_stmt 1 view .LVU941
1506:Src/ff.c      **** 	}
 2878              		.loc 1 1506 6 is_stmt 0 view .LVU942
 2879 0010 B8F1000F 		cmp	r8, #0
 2880 0014 12D0     		beq	.L221
1506:Src/ff.c      **** 	}
 2881              		.loc 1 1506 28 discriminator 2 view .LVU943
 2882 0016 B369     		ldr	r3, [r6, #24]
1506:Src/ff.c      **** 	}
 2883              		.loc 1 1506 16 discriminator 2 view .LVU944
 2884 0018 4345     		cmp	r3, r8
 2885 001a 11D8     		bhi	.L210
1506:Src/ff.c      **** 	}
 2886              		.loc 1 1506 44 view .LVU945
 2887 001c 4FF00108 		mov	r8, #1
 2888              	.LVL351:
1506:Src/ff.c      **** 	}
 2889              		.loc 1 1506 44 view .LVU946
 2890 0020 0EE0     		b	.L210
 2891              	.LVL352:
 2892              	.L209:
1509:Src/ff.c      **** 		if (cs < 2) return 1;				/* Test for insanity */
 2893              		.loc 1 1509 3 is_stmt 1 view .LVU947
1509:Src/ff.c      **** 		if (cs < 2) return 1;				/* Test for insanity */
 2894              		.loc 1 1509 8 is_stmt 0 view .LVU948
 2895 0022 FFF7FEFF 		bl	get_fat
 2896              	.LVL353:
1509:Src/ff.c      **** 		if (cs < 2) return 1;				/* Test for insanity */
 2897              		.loc 1 1509 8 view .LVU949
 2898 0026 0346     		mov	r3, r0
 2899              	.LVL354:
1510:Src/ff.c      **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2900              		.loc 1 1510 3 is_stmt 1 view .LVU950
1510:Src/ff.c      **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2901              		.loc 1 1510 6 is_stmt 0 view .LVU951
 2902 0028 0128     		cmp	r0, #1
 2903 002a 68D9     		bls	.L223
1511:Src/ff.c      **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2904              		.loc 1 1511 3 is_stmt 1 view .LVU952
1511:Src/ff.c      **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2905              		.loc 1 1511 6 is_stmt 0 view .LVU953
 2906 002c B0F1FF3F 		cmp	r0, #-1
 2907 0030 6AD0     		beq	.L208
1512:Src/ff.c      **** 		scl = clst;							/* Cluster to start to find */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 127


 2908              		.loc 1 1512 3 is_stmt 1 view .LVU954
1512:Src/ff.c      **** 		scl = clst;							/* Cluster to start to find */
 2909              		.loc 1 1512 14 is_stmt 0 view .LVU955
 2910 0032 B269     		ldr	r2, [r6, #24]
1512:Src/ff.c      **** 		scl = clst;							/* Cluster to start to find */
 2911              		.loc 1 1512 6 view .LVU956
 2912 0034 8242     		cmp	r2, r0
 2913 0036 67D8     		bhi	.L208
1513:Src/ff.c      **** 	}
 2914              		.loc 1 1513 7 view .LVU957
 2915 0038 B846     		mov	r8, r7
 2916 003a 01E0     		b	.L210
 2917              	.LVL355:
 2918              	.L221:
1506:Src/ff.c      **** 	}
 2919              		.loc 1 1506 44 view .LVU958
 2920 003c 4FF00108 		mov	r8, #1
 2921              	.LVL356:
 2922              	.L210:
1515:Src/ff.c      **** 
 2923              		.loc 1 1515 2 is_stmt 1 view .LVU959
1515:Src/ff.c      **** 
 2924              		.loc 1 1515 8 is_stmt 0 view .LVU960
 2925 0040 7369     		ldr	r3, [r6, #20]
1515:Src/ff.c      **** 
 2926              		.loc 1 1515 5 view .LVU961
 2927 0042 002B     		cmp	r3, #0
 2928 0044 60D0     		beq	.L208
1544:Src/ff.c      **** 		if (scl == clst) {						/* Stretching an existing chain? */
 2929              		.loc 1 1544 3 is_stmt 1 view .LVU962
 2930              	.LVL357:
1545:Src/ff.c      **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2931              		.loc 1 1545 3 view .LVU963
1545:Src/ff.c      **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2932              		.loc 1 1545 6 is_stmt 0 view .LVU964
 2933 0046 B845     		cmp	r8, r7
 2934 0048 01D0     		beq	.L230
 2935              	.LVL358:
 2936              	.L212:
1552:Src/ff.c      **** 				ncl = 0;
 2937              		.loc 1 1552 43 view .LVU965
 2938 004a 4446     		mov	r4, r8
 2939 004c 40E0     		b	.L217
 2940              	.LVL359:
 2941              	.L230:
1546:Src/ff.c      **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2942              		.loc 1 1546 4 is_stmt 1 view .LVU966
1546:Src/ff.c      **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2943              		.loc 1 1546 8 is_stmt 0 view .LVU967
 2944 004e 08F10104 		add	r4, r8, #1
 2945              	.LVL360:
1547:Src/ff.c      **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2946              		.loc 1 1547 4 is_stmt 1 view .LVU968
1547:Src/ff.c      **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2947              		.loc 1 1547 17 is_stmt 0 view .LVU969
 2948 0052 B369     		ldr	r3, [r6, #24]
1547:Src/ff.c      **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 128


 2949              		.loc 1 1547 7 view .LVU970
 2950 0054 A342     		cmp	r3, r4
 2951 0056 00D8     		bhi	.L213
1547:Src/ff.c      **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2952              		.loc 1 1547 33 view .LVU971
 2953 0058 0224     		movs	r4, #2
 2954              	.LVL361:
 2955              	.L213:
1548:Src/ff.c      **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2956              		.loc 1 1548 4 is_stmt 1 view .LVU972
1548:Src/ff.c      **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2957              		.loc 1 1548 9 is_stmt 0 view .LVU973
 2958 005a 2146     		mov	r1, r4
 2959 005c 2846     		mov	r0, r5
 2960 005e FFF7FEFF 		bl	get_fat
 2961              	.LVL362:
 2962 0062 0346     		mov	r3, r0
 2963              	.LVL363:
1549:Src/ff.c      **** 			if (cs != 0) {						/* Not free? */
 2964              		.loc 1 1549 4 is_stmt 1 view .LVU974
1549:Src/ff.c      **** 			if (cs != 0) {						/* Not free? */
 2965              		.loc 1 1549 7 is_stmt 0 view .LVU975
 2966 0064 0128     		cmp	r0, #1
 2967 0066 4FD0     		beq	.L208
1549:Src/ff.c      **** 			if (cs != 0) {						/* Not free? */
 2968              		.loc 1 1549 16 discriminator 2 view .LVU976
 2969 0068 B0F1FF3F 		cmp	r0, #-1
 2970 006c 4CD0     		beq	.L208
1550:Src/ff.c      **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2971              		.loc 1 1550 4 is_stmt 1 view .LVU977
1550:Src/ff.c      **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2972              		.loc 1 1550 7 is_stmt 0 view .LVU978
 2973 006e 38B1     		cbz	r0, .L214
1551:Src/ff.c      **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2974              		.loc 1 1551 5 is_stmt 1 view .LVU979
1551:Src/ff.c      **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2975              		.loc 1 1551 8 is_stmt 0 view .LVU980
 2976 0070 3369     		ldr	r3, [r6, #16]
 2977              	.LVL364:
1552:Src/ff.c      **** 				ncl = 0;
 2978              		.loc 1 1552 5 is_stmt 1 view .LVU981
1552:Src/ff.c      **** 				ncl = 0;
 2979              		.loc 1 1552 8 is_stmt 0 view .LVU982
 2980 0072 012B     		cmp	r3, #1
 2981 0074 E9D9     		bls	.L212
1552:Src/ff.c      **** 				ncl = 0;
 2982              		.loc 1 1552 27 discriminator 1 view .LVU983
 2983 0076 B269     		ldr	r2, [r6, #24]
1552:Src/ff.c      **** 				ncl = 0;
 2984              		.loc 1 1552 17 discriminator 1 view .LVU984
 2985 0078 9A42     		cmp	r2, r3
 2986 007a E6D9     		bls	.L212
1552:Src/ff.c      **** 				ncl = 0;
 2987              		.loc 1 1552 43 view .LVU985
 2988 007c 9846     		mov	r8, r3
 2989              	.LVL365:
1552:Src/ff.c      **** 				ncl = 0;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 129


 2990              		.loc 1 1552 43 view .LVU986
 2991 007e E4E7     		b	.L212
 2992              	.LVL366:
 2993              	.L214:
1556:Src/ff.c      **** 			ncl = scl;	/* Start cluster */
 2994              		.loc 1 1556 3 is_stmt 1 view .LVU987
1556:Src/ff.c      **** 			ncl = scl;	/* Start cluster */
 2995              		.loc 1 1556 6 is_stmt 0 view .LVU988
 2996 0080 002C     		cmp	r4, #0
 2997 0082 E2D0     		beq	.L212
 2998              	.LVL367:
 2999              	.L215:
1570:Src/ff.c      **** 		if (res == FR_OK && clst != 0) {
 3000              		.loc 1 1570 3 is_stmt 1 view .LVU989
1570:Src/ff.c      **** 		if (res == FR_OK && clst != 0) {
 3001              		.loc 1 1570 9 is_stmt 0 view .LVU990
 3002 0084 4FF0FF32 		mov	r2, #-1
 3003 0088 2146     		mov	r1, r4
 3004 008a 3046     		mov	r0, r6
 3005              	.LVL368:
1570:Src/ff.c      **** 		if (res == FR_OK && clst != 0) {
 3006              		.loc 1 1570 9 view .LVU991
 3007 008c FFF7FEFF 		bl	put_fat
 3008              	.LVL369:
1571:Src/ff.c      **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 3009              		.loc 1 1571 3 is_stmt 1 view .LVU992
1571:Src/ff.c      **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 3010              		.loc 1 1571 6 is_stmt 0 view .LVU993
 3011 0090 0346     		mov	r3, r0
 3012 0092 00B9     		cbnz	r0, .L218
1571:Src/ff.c      **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 3013              		.loc 1 1571 20 discriminator 1 view .LVU994
 3014 0094 2FBB     		cbnz	r7, .L231
 3015              	.LVL370:
 3016              	.L218:
1576:Src/ff.c      **** 		fs->last_clst = ncl;
 3017              		.loc 1 1576 2 is_stmt 1 view .LVU995
1576:Src/ff.c      **** 		fs->last_clst = ncl;
 3018              		.loc 1 1576 5 is_stmt 0 view .LVU996
 3019 0096 5BBB     		cbnz	r3, .L219
1577:Src/ff.c      **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 3020              		.loc 1 1577 3 is_stmt 1 view .LVU997
1577:Src/ff.c      **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 3021              		.loc 1 1577 17 is_stmt 0 view .LVU998
 3022 0098 3461     		str	r4, [r6, #16]
1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3023              		.loc 1 1578 3 is_stmt 1 view .LVU999
1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3024              		.loc 1 1578 9 is_stmt 0 view .LVU1000
 3025 009a 7269     		ldr	r2, [r6, #20]
1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3026              		.loc 1 1578 26 view .LVU1001
 3027 009c B369     		ldr	r3, [r6, #24]
 3028              	.LVL371:
1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3029              		.loc 1 1578 37 view .LVU1002
 3030 009e 023B     		subs	r3, r3, #2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 130


1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3031              		.loc 1 1578 6 view .LVU1003
 3032 00a0 9A42     		cmp	r2, r3
 3033 00a2 01D8     		bhi	.L220
1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3034              		.loc 1 1578 42 is_stmt 1 discriminator 1 view .LVU1004
1578:Src/ff.c      **** 		fs->fsi_flag |= 1;
 3035              		.loc 1 1578 55 is_stmt 0 discriminator 1 view .LVU1005
 3036 00a4 013A     		subs	r2, r2, #1
 3037 00a6 7261     		str	r2, [r6, #20]
 3038              	.L220:
1579:Src/ff.c      **** 	} else {
 3039              		.loc 1 1579 3 is_stmt 1 view .LVU1006
1579:Src/ff.c      **** 	} else {
 3040              		.loc 1 1579 16 is_stmt 0 view .LVU1007
 3041 00a8 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 3042 00aa 43F00103 		orr	r3, r3, #1
 3043 00ae 3371     		strb	r3, [r6, #4]
 3044 00b0 2346     		mov	r3, r4
 3045 00b2 29E0     		b	.L208
 3046              	.LVL372:
 3047              	.L216:
1564:Src/ff.c      **** 				if (cs == 0) break;				/* Found a free cluster? */
 3048              		.loc 1 1564 5 is_stmt 1 view .LVU1008
1564:Src/ff.c      **** 				if (cs == 0) break;				/* Found a free cluster? */
 3049              		.loc 1 1564 10 is_stmt 0 view .LVU1009
 3050 00b4 2146     		mov	r1, r4
 3051 00b6 2846     		mov	r0, r5
 3052 00b8 FFF7FEFF 		bl	get_fat
 3053              	.LVL373:
1565:Src/ff.c      **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 3054              		.loc 1 1565 5 is_stmt 1 view .LVU1010
1565:Src/ff.c      **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 3055              		.loc 1 1565 8 is_stmt 0 view .LVU1011
 3056 00bc 0346     		mov	r3, r0
 3057 00be 0028     		cmp	r0, #0
 3058 00c0 E0D0     		beq	.L215
1566:Src/ff.c      **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 3059              		.loc 1 1566 5 is_stmt 1 view .LVU1012
1566:Src/ff.c      **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 3060              		.loc 1 1566 8 is_stmt 0 view .LVU1013
 3061 00c2 0128     		cmp	r0, #1
 3062 00c4 20D0     		beq	.L208
1566:Src/ff.c      **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 3063              		.loc 1 1566 17 discriminator 2 view .LVU1014
 3064 00c6 B0F1FF3F 		cmp	r0, #-1
 3065 00ca 1DD0     		beq	.L208
1567:Src/ff.c      **** 			}
 3066              		.loc 1 1567 5 is_stmt 1 view .LVU1015
1567:Src/ff.c      **** 			}
 3067              		.loc 1 1567 8 is_stmt 0 view .LVU1016
 3068 00cc 4445     		cmp	r4, r8
 3069 00ce 1AD0     		beq	.L232
 3070              	.LVL374:
 3071              	.L217:
1558:Src/ff.c      **** 				ncl++;							/* Next cluster */
 3072              		.loc 1 1558 4 is_stmt 1 view .LVU1017
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 131


1559:Src/ff.c      **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 3073              		.loc 1 1559 5 view .LVU1018
1559:Src/ff.c      **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 3074              		.loc 1 1559 8 is_stmt 0 view .LVU1019
 3075 00d0 0134     		adds	r4, r4, #1
 3076              	.LVL375:
1560:Src/ff.c      **** 					ncl = 2;
 3077              		.loc 1 1560 5 is_stmt 1 view .LVU1020
1560:Src/ff.c      **** 					ncl = 2;
 3078              		.loc 1 1560 18 is_stmt 0 view .LVU1021
 3079 00d2 B369     		ldr	r3, [r6, #24]
1560:Src/ff.c      **** 					ncl = 2;
 3080              		.loc 1 1560 8 view .LVU1022
 3081 00d4 A342     		cmp	r3, r4
 3082 00d6 EDD8     		bhi	.L216
1561:Src/ff.c      **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 3083              		.loc 1 1561 6 is_stmt 1 view .LVU1023
 3084              	.LVL376:
1562:Src/ff.c      **** 				}
 3085              		.loc 1 1562 6 view .LVU1024
1562:Src/ff.c      **** 				}
 3086              		.loc 1 1562 9 is_stmt 0 view .LVU1025
 3087 00d8 B8F1010F 		cmp	r8, #1
 3088 00dc 11D9     		bls	.L226
1561:Src/ff.c      **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 3089              		.loc 1 1561 10 view .LVU1026
 3090 00de 0224     		movs	r4, #2
 3091 00e0 E8E7     		b	.L216
 3092              	.LVL377:
 3093              	.L231:
1572:Src/ff.c      **** 		}
 3094              		.loc 1 1572 4 is_stmt 1 view .LVU1027
1572:Src/ff.c      **** 		}
 3095              		.loc 1 1572 10 is_stmt 0 view .LVU1028
 3096 00e2 2246     		mov	r2, r4
 3097 00e4 3946     		mov	r1, r7
 3098 00e6 3046     		mov	r0, r6
 3099              	.LVL378:
1572:Src/ff.c      **** 		}
 3100              		.loc 1 1572 10 view .LVU1029
 3101 00e8 FFF7FEFF 		bl	put_fat
 3102              	.LVL379:
 3103 00ec 0346     		mov	r3, r0
 3104              	.LVL380:
1572:Src/ff.c      **** 		}
 3105              		.loc 1 1572 10 view .LVU1030
 3106 00ee D2E7     		b	.L218
 3107              	.L219:
1581:Src/ff.c      **** 	}
 3108              		.loc 1 1581 3 is_stmt 1 view .LVU1031
1581:Src/ff.c      **** 	}
 3109              		.loc 1 1581 43 is_stmt 0 view .LVU1032
 3110 00f0 012B     		cmp	r3, #1
 3111 00f2 01D0     		beq	.L233
 3112 00f4 0123     		movs	r3, #1
 3113              	.LVL381:
1581:Src/ff.c      **** 	}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 132


 3114              		.loc 1 1581 43 view .LVU1033
 3115 00f6 07E0     		b	.L208
 3116              	.LVL382:
 3117              	.L233:
1581:Src/ff.c      **** 	}
 3118              		.loc 1 1581 43 view .LVU1034
 3119 00f8 4FF0FF33 		mov	r3, #-1
 3120              	.LVL383:
1581:Src/ff.c      **** 	}
 3121              		.loc 1 1581 43 view .LVU1035
 3122 00fc 04E0     		b	.L208
 3123              	.LVL384:
 3124              	.L223:
1510:Src/ff.c      **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 3125              		.loc 1 1510 22 view .LVU1036
 3126 00fe 0123     		movs	r3, #1
 3127 0100 02E0     		b	.L208
 3128              	.LVL385:
 3129              	.L226:
1562:Src/ff.c      **** 				}
 3130              		.loc 1 1562 28 view .LVU1037
 3131 0102 0023     		movs	r3, #0
 3132 0104 00E0     		b	.L208
 3133              	.LVL386:
 3134              	.L232:
1567:Src/ff.c      **** 			}
 3135              		.loc 1 1567 28 view .LVU1038
 3136 0106 0023     		movs	r3, #0
 3137              	.LVL387:
 3138              	.L208:
1585:Src/ff.c      **** 
 3139              		.loc 1 1585 1 view .LVU1039
 3140 0108 1846     		mov	r0, r3
 3141 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
1585:Src/ff.c      **** 
 3142              		.loc 1 1585 1 view .LVU1040
 3143              		.cfi_endproc
 3144              	.LFE15:
 3146              		.section	.text.remove_chain,"ax",%progbits
 3147              		.align	1
 3148              		.syntax unified
 3149              		.thumb
 3150              		.thumb_func
 3151              		.fpu softvfp
 3153              	remove_chain:
 3154              	.LVL388:
 3155              	.LFB14:
1404:Src/ff.c      **** 	FRESULT res = FR_OK;
 3156              		.loc 1 1404 1 is_stmt 1 view -0
 3157              		.cfi_startproc
 3158              		@ args = 0, pretend = 0, frame = 0
 3159              		@ frame_needed = 0, uses_anonymous_args = 0
1404:Src/ff.c      **** 	FRESULT res = FR_OK;
 3160              		.loc 1 1404 1 is_stmt 0 view .LVU1042
 3161 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3162              	.LCFI16:
 3163              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 133


 3164              		.cfi_offset 3, -24
 3165              		.cfi_offset 4, -20
 3166              		.cfi_offset 5, -16
 3167              		.cfi_offset 6, -12
 3168              		.cfi_offset 7, -8
 3169              		.cfi_offset 14, -4
 3170 0002 0C46     		mov	r4, r1
1405:Src/ff.c      **** 	DWORD nxt;
 3171              		.loc 1 1405 2 is_stmt 1 view .LVU1043
 3172              	.LVL389:
1406:Src/ff.c      **** 	FATFS *fs = obj->fs;
 3173              		.loc 1 1406 2 view .LVU1044
1407:Src/ff.c      **** #if FF_FS_EXFAT || FF_USE_TRIM
 3174              		.loc 1 1407 2 view .LVU1045
1407:Src/ff.c      **** #if FF_FS_EXFAT || FF_USE_TRIM
 3175              		.loc 1 1407 9 is_stmt 0 view .LVU1046
 3176 0004 0568     		ldr	r5, [r0]
 3177              	.LVL390:
1415:Src/ff.c      **** 
 3178              		.loc 1 1415 2 is_stmt 1 view .LVU1047
1415:Src/ff.c      **** 
 3179              		.loc 1 1415 5 is_stmt 0 view .LVU1048
 3180 0006 0129     		cmp	r1, #1
 3181 0008 2ED9     		bls	.L239
 3182 000a 0646     		mov	r6, r0
 3183 000c 1146     		mov	r1, r2
 3184              	.LVL391:
1415:Src/ff.c      **** 
 3185              		.loc 1 1415 28 discriminator 2 view .LVU1049
 3186 000e AB69     		ldr	r3, [r5, #24]
1415:Src/ff.c      **** 
 3187              		.loc 1 1415 15 discriminator 2 view .LVU1050
 3188 0010 A342     		cmp	r3, r4
 3189 0012 2BD9     		bls	.L240
1418:Src/ff.c      **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 3190              		.loc 1 1418 2 is_stmt 1 view .LVU1051
1418:Src/ff.c      **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 3191              		.loc 1 1418 5 is_stmt 0 view .LVU1052
 3192 0014 4AB1     		cbz	r2, .L238
1419:Src/ff.c      **** 		if (res != FR_OK) return res;
 3193              		.loc 1 1419 3 is_stmt 1 view .LVU1053
1419:Src/ff.c      **** 		if (res != FR_OK) return res;
 3194              		.loc 1 1419 9 is_stmt 0 view .LVU1054
 3195 0016 4FF0FF32 		mov	r2, #-1
 3196              	.LVL392:
1419:Src/ff.c      **** 		if (res != FR_OK) return res;
 3197              		.loc 1 1419 9 view .LVU1055
 3198 001a 2846     		mov	r0, r5
 3199              	.LVL393:
1419:Src/ff.c      **** 		if (res != FR_OK) return res;
 3200              		.loc 1 1419 9 view .LVU1056
 3201 001c FFF7FEFF 		bl	put_fat
 3202              	.LVL394:
1420:Src/ff.c      **** 	}
 3203              		.loc 1 1420 3 is_stmt 1 view .LVU1057
1420:Src/ff.c      **** 	}
 3204              		.loc 1 1420 6 is_stmt 0 view .LVU1058
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 134


 3205 0020 0746     		mov	r7, r0
 3206 0022 10B1     		cbz	r0, .L238
 3207 0024 23E0     		b	.L235
 3208              	.LVL395:
 3209              	.L237:
1455:Src/ff.c      **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 3210              		.loc 1 1455 3 is_stmt 1 view .LVU1059
1456:Src/ff.c      **** 
 3211              		.loc 1 1456 10 view .LVU1060
1456:Src/ff.c      **** 
 3212              		.loc 1 1456 2 is_stmt 0 view .LVU1061
 3213 0026 A242     		cmp	r2, r4
 3214 0028 21D9     		bls	.L235
 3215              	.LVL396:
 3216              	.L238:
1424:Src/ff.c      **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
 3217              		.loc 1 1424 2 is_stmt 1 view .LVU1062
1425:Src/ff.c      **** 		if (nxt == 0) break;				/* Empty cluster? */
 3218              		.loc 1 1425 3 view .LVU1063
 3219 002a 2746     		mov	r7, r4
1425:Src/ff.c      **** 		if (nxt == 0) break;				/* Empty cluster? */
 3220              		.loc 1 1425 9 is_stmt 0 view .LVU1064
 3221 002c 2146     		mov	r1, r4
 3222 002e 3046     		mov	r0, r6
 3223 0030 FFF7FEFF 		bl	get_fat
 3224              	.LVL397:
1426:Src/ff.c      **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 3225              		.loc 1 1426 3 is_stmt 1 view .LVU1065
1426:Src/ff.c      **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 3226              		.loc 1 1426 6 is_stmt 0 view .LVU1066
 3227 0034 0446     		mov	r4, r0
 3228              	.LVL398:
1426:Src/ff.c      **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 3229              		.loc 1 1426 6 view .LVU1067
 3230 0036 E0B1     		cbz	r0, .L241
1427:Src/ff.c      **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3231              		.loc 1 1427 3 is_stmt 1 view .LVU1068
1427:Src/ff.c      **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3232              		.loc 1 1427 6 is_stmt 0 view .LVU1069
 3233 0038 0128     		cmp	r0, #1
 3234 003a 1CD0     		beq	.L242
1428:Src/ff.c      **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3235              		.loc 1 1428 3 is_stmt 1 view .LVU1070
1428:Src/ff.c      **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3236              		.loc 1 1428 6 is_stmt 0 view .LVU1071
 3237 003c B0F1FF3F 		cmp	r0, #-1
 3238 0040 1BD0     		beq	.L243
1429:Src/ff.c      **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 3239              		.loc 1 1429 3 is_stmt 1 view .LVU1072
1430:Src/ff.c      **** 			if (res != FR_OK) return res;
 3240              		.loc 1 1430 4 view .LVU1073
1430:Src/ff.c      **** 			if (res != FR_OK) return res;
 3241              		.loc 1 1430 10 is_stmt 0 view .LVU1074
 3242 0042 0022     		movs	r2, #0
 3243 0044 3946     		mov	r1, r7
 3244 0046 2846     		mov	r0, r5
 3245              	.LVL399:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 135


1430:Src/ff.c      **** 			if (res != FR_OK) return res;
 3246              		.loc 1 1430 10 view .LVU1075
 3247 0048 FFF7FEFF 		bl	put_fat
 3248              	.LVL400:
1431:Src/ff.c      **** 		}
 3249              		.loc 1 1431 4 is_stmt 1 view .LVU1076
1431:Src/ff.c      **** 		}
 3250              		.loc 1 1431 7 is_stmt 0 view .LVU1077
 3251 004c 0746     		mov	r7, r0
 3252              	.LVL401:
1431:Src/ff.c      **** 		}
 3253              		.loc 1 1431 7 view .LVU1078
 3254 004e 70B9     		cbnz	r0, .L235
1433:Src/ff.c      **** 			fs->free_clst++;
 3255              		.loc 1 1433 3 is_stmt 1 view .LVU1079
1433:Src/ff.c      **** 			fs->free_clst++;
 3256              		.loc 1 1433 9 is_stmt 0 view .LVU1080
 3257 0050 6B69     		ldr	r3, [r5, #20]
1433:Src/ff.c      **** 			fs->free_clst++;
 3258              		.loc 1 1433 25 view .LVU1081
 3259 0052 AA69     		ldr	r2, [r5, #24]
1433:Src/ff.c      **** 			fs->free_clst++;
 3260              		.loc 1 1433 36 view .LVU1082
 3261 0054 911E     		subs	r1, r2, #2
1433:Src/ff.c      **** 			fs->free_clst++;
 3262              		.loc 1 1433 6 view .LVU1083
 3263 0056 8B42     		cmp	r3, r1
 3264 0058 E5D2     		bcs	.L237
1434:Src/ff.c      **** 			fs->fsi_flag |= 1;
 3265              		.loc 1 1434 4 is_stmt 1 view .LVU1084
1434:Src/ff.c      **** 			fs->fsi_flag |= 1;
 3266              		.loc 1 1434 17 is_stmt 0 view .LVU1085
 3267 005a 0133     		adds	r3, r3, #1
 3268 005c 6B61     		str	r3, [r5, #20]
1435:Src/ff.c      **** 		}
 3269              		.loc 1 1435 4 is_stmt 1 view .LVU1086
1435:Src/ff.c      **** 		}
 3270              		.loc 1 1435 17 is_stmt 0 view .LVU1087
 3271 005e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 3272 0060 43F00103 		orr	r3, r3, #1
 3273 0064 2B71     		strb	r3, [r5, #4]
 3274 0066 DEE7     		b	.L237
 3275              	.LVL402:
 3276              	.L239:
1415:Src/ff.c      **** 
 3277              		.loc 1 1415 47 view .LVU1088
 3278 0068 0227     		movs	r7, #2
 3279 006a 00E0     		b	.L235
 3280              	.LVL403:
 3281              	.L240:
1415:Src/ff.c      **** 
 3282              		.loc 1 1415 47 view .LVU1089
 3283 006c 0227     		movs	r7, #2
 3284              	.LVL404:
 3285              	.L235:
1485:Src/ff.c      **** 
 3286              		.loc 1 1485 1 view .LVU1090
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 136


 3287 006e 3846     		mov	r0, r7
 3288 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3289              	.LVL405:
 3290              	.L241:
1484:Src/ff.c      **** }
 3291              		.loc 1 1484 9 view .LVU1091
 3292 0072 0027     		movs	r7, #0
 3293              	.LVL406:
1484:Src/ff.c      **** }
 3294              		.loc 1 1484 9 view .LVU1092
 3295 0074 FBE7     		b	.L235
 3296              	.LVL407:
 3297              	.L242:
1427:Src/ff.c      **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3298              		.loc 1 1427 24 view .LVU1093
 3299 0076 0227     		movs	r7, #2
 3300              	.LVL408:
1427:Src/ff.c      **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3301              		.loc 1 1427 24 view .LVU1094
 3302 0078 F9E7     		b	.L235
 3303              	.LVL409:
 3304              	.L243:
1428:Src/ff.c      **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3305              		.loc 1 1428 33 view .LVU1095
 3306 007a 0127     		movs	r7, #1
 3307              	.LVL410:
1428:Src/ff.c      **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3308              		.loc 1 1428 33 view .LVU1096
 3309 007c F7E7     		b	.L235
 3310              		.cfi_endproc
 3311              	.LFE14:
 3313              		.section	.text.dir_clear,"ax",%progbits
 3314              		.align	1
 3315              		.syntax unified
 3316              		.thumb
 3317              		.thumb_func
 3318              		.fpu softvfp
 3320              	dir_clear:
 3321              	.LVL411:
 3322              	.LFB16:
1631:Src/ff.c      **** 	LBA_t sect;
 3323              		.loc 1 1631 1 is_stmt 1 view -0
 3324              		.cfi_startproc
 3325              		@ args = 0, pretend = 0, frame = 0
 3326              		@ frame_needed = 0, uses_anonymous_args = 0
1631:Src/ff.c      **** 	LBA_t sect;
 3327              		.loc 1 1631 1 is_stmt 0 view .LVU1098
 3328 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3329              	.LCFI17:
 3330              		.cfi_def_cfa_offset 24
 3331              		.cfi_offset 3, -24
 3332              		.cfi_offset 4, -20
 3333              		.cfi_offset 5, -16
 3334              		.cfi_offset 6, -12
 3335              		.cfi_offset 7, -8
 3336              		.cfi_offset 14, -4
 3337 0002 0546     		mov	r5, r0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 137


 3338 0004 0C46     		mov	r4, r1
1632:Src/ff.c      **** 	UINT n, szb;
 3339              		.loc 1 1632 2 is_stmt 1 view .LVU1099
1633:Src/ff.c      **** 	BYTE *ibuf;
 3340              		.loc 1 1633 2 view .LVU1100
1634:Src/ff.c      **** 
 3341              		.loc 1 1634 2 view .LVU1101
1637:Src/ff.c      **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 3342              		.loc 1 1637 2 view .LVU1102
1637:Src/ff.c      **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 3343              		.loc 1 1637 6 is_stmt 0 view .LVU1103
 3344 0006 FFF7FEFF 		bl	sync_window
 3345              	.LVL412:
1637:Src/ff.c      **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 3346              		.loc 1 1637 5 view .LVU1104
 3347 000a 08B1     		cbz	r0, .L252
1637:Src/ff.c      **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 3348              		.loc 1 1637 39 view .LVU1105
 3349 000c 0120     		movs	r0, #1
 3350              	.LVL413:
 3351              	.L246:
1656:Src/ff.c      **** #endif	/* !FF_FS_READONLY */
 3352              		.loc 1 1656 1 view .LVU1106
 3353 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3354              	.LVL414:
 3355              	.L252:
1638:Src/ff.c      **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 3356              		.loc 1 1638 2 is_stmt 1 view .LVU1107
1638:Src/ff.c      **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 3357              		.loc 1 1638 9 is_stmt 0 view .LVU1108
 3358 0010 2146     		mov	r1, r4
 3359 0012 2846     		mov	r0, r5
 3360 0014 FFF7FEFF 		bl	clst2sect
 3361              	.LVL415:
 3362 0018 0646     		mov	r6, r0
 3363              	.LVL416:
1639:Src/ff.c      **** 	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 3364              		.loc 1 1639 2 is_stmt 1 view .LVU1109
1639:Src/ff.c      **** 	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 3365              		.loc 1 1639 14 is_stmt 0 view .LVU1110
 3366 001a 2863     		str	r0, [r5, #48]
1640:Src/ff.c      **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
 3367              		.loc 1 1640 2 is_stmt 1 view .LVU1111
1640:Src/ff.c      **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
 3368              		.loc 1 1640 11 is_stmt 0 view .LVU1112
 3369 001c 05F13407 		add	r7, r5, #52
1640:Src/ff.c      **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
 3370              		.loc 1 1640 2 view .LVU1113
 3371 0020 4FF40072 		mov	r2, #512
 3372 0024 0021     		movs	r1, #0
 3373 0026 3846     		mov	r0, r7
 3374              	.LVL417:
1640:Src/ff.c      **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
 3375              		.loc 1 1640 2 view .LVU1114
 3376 0028 FFF7FEFF 		bl	memset
 3377              	.LVL418:
1652:Src/ff.c      **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 138


 3378              		.loc 1 1652 3 is_stmt 1 view .LVU1115
1652:Src/ff.c      **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
 3379              		.loc 1 1652 19 view .LVU1116
1653:Src/ff.c      **** 	}
 3380              		.loc 1 1653 3 view .LVU1117
1653:Src/ff.c      **** 	}
 3381              		.loc 1 1653 10 is_stmt 0 view .LVU1118
 3382 002c 0024     		movs	r4, #0
 3383              	.LVL419:
1653:Src/ff.c      **** 	}
 3384              		.loc 1 1653 3 view .LVU1119
 3385 002e 00E0     		b	.L247
 3386              	.LVL420:
 3387              	.L249:
1653:Src/ff.c      **** 	}
 3388              		.loc 1 1653 95 is_stmt 1 discriminator 4 view .LVU1120
1653:Src/ff.c      **** 	}
 3389              		.loc 1 1653 85 discriminator 4 view .LVU1121
1653:Src/ff.c      **** 	}
 3390              		.loc 1 1653 87 is_stmt 0 discriminator 4 view .LVU1122
 3391 0030 0134     		adds	r4, r4, #1
 3392              	.LVL421:
 3393              	.L247:
1653:Src/ff.c      **** 	}
 3394              		.loc 1 1653 15 is_stmt 1 discriminator 1 view .LVU1123
1653:Src/ff.c      **** 	}
 3395              		.loc 1 1653 21 is_stmt 0 discriminator 1 view .LVU1124
 3396 0032 6B89     		ldrh	r3, [r5, #10]
1653:Src/ff.c      **** 	}
 3397              		.loc 1 1653 3 discriminator 1 view .LVU1125
 3398 0034 A342     		cmp	r3, r4
 3399 0036 07D9     		bls	.L248
1653:Src/ff.c      **** 	}
 3400              		.loc 1 1653 32 discriminator 3 view .LVU1126
 3401 0038 0123     		movs	r3, #1
 3402 003a A219     		adds	r2, r4, r6
 3403 003c 3946     		mov	r1, r7
 3404 003e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 3405 0040 FFF7FEFF 		bl	disk_write
 3406              	.LVL422:
1653:Src/ff.c      **** 	}
 3407              		.loc 1 1653 29 discriminator 3 view .LVU1127
 3408 0044 0028     		cmp	r0, #0
 3409 0046 F3D0     		beq	.L249
 3410              	.L248:
1655:Src/ff.c      **** }
 3411              		.loc 1 1655 2 is_stmt 1 view .LVU1128
1655:Src/ff.c      **** }
 3412              		.loc 1 1655 17 is_stmt 0 view .LVU1129
 3413 0048 6889     		ldrh	r0, [r5, #10]
1655:Src/ff.c      **** }
 3414              		.loc 1 1655 34 view .LVU1130
 3415 004a 001B     		subs	r0, r0, r4
 3416 004c 18BF     		it	ne
 3417 004e 0120     		movne	r0, #1
 3418 0050 DDE7     		b	.L246
 3419              		.cfi_endproc
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 139


 3420              	.LFE16:
 3422              		.section	.text.dir_next,"ax",%progbits
 3423              		.align	1
 3424              		.syntax unified
 3425              		.thumb
 3426              		.thumb_func
 3427              		.fpu softvfp
 3429              	dir_next:
 3430              	.LVL423:
 3431              	.LFB18:
1718:Src/ff.c      **** 	DWORD ofs, clst;
 3432              		.loc 1 1718 1 is_stmt 1 view -0
 3433              		.cfi_startproc
 3434              		@ args = 0, pretend = 0, frame = 0
 3435              		@ frame_needed = 0, uses_anonymous_args = 0
1718:Src/ff.c      **** 	DWORD ofs, clst;
 3436              		.loc 1 1718 1 is_stmt 0 view .LVU1132
 3437 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3438              	.LCFI18:
 3439              		.cfi_def_cfa_offset 32
 3440              		.cfi_offset 3, -32
 3441              		.cfi_offset 4, -28
 3442              		.cfi_offset 5, -24
 3443              		.cfi_offset 6, -20
 3444              		.cfi_offset 7, -16
 3445              		.cfi_offset 8, -12
 3446              		.cfi_offset 9, -8
 3447              		.cfi_offset 14, -4
 3448 0004 0446     		mov	r4, r0
 3449 0006 8846     		mov	r8, r1
1719:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 3450              		.loc 1 1719 2 is_stmt 1 view .LVU1133
1720:Src/ff.c      **** 
 3451              		.loc 1 1720 2 view .LVU1134
1720:Src/ff.c      **** 
 3452              		.loc 1 1720 9 is_stmt 0 view .LVU1135
 3453 0008 0768     		ldr	r7, [r0]
 3454              	.LVL424:
1723:Src/ff.c      **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3455              		.loc 1 1723 2 is_stmt 1 view .LVU1136
1723:Src/ff.c      **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3456              		.loc 1 1723 10 is_stmt 0 view .LVU1137
 3457 000a 0569     		ldr	r5, [r0, #16]
1723:Src/ff.c      **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3458              		.loc 1 1723 6 view .LVU1138
 3459 000c 2035     		adds	r5, r5, #32
 3460              	.LVL425:
1724:Src/ff.c      **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3461              		.loc 1 1724 2 is_stmt 1 view .LVU1139
1724:Src/ff.c      **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3462              		.loc 1 1724 5 is_stmt 0 view .LVU1140
 3463 000e B5F5001F 		cmp	r5, #2097152
 3464 0012 01D3     		bcc	.L254
1724:Src/ff.c      **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3465              		.loc 1 1724 87 is_stmt 1 discriminator 1 view .LVU1141
1724:Src/ff.c      **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3466              		.loc 1 1724 96 is_stmt 0 discriminator 1 view .LVU1142
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 140


 3467 0014 0023     		movs	r3, #0
 3468 0016 8361     		str	r3, [r0, #24]
 3469              	.L254:
1725:Src/ff.c      **** 
 3470              		.loc 1 1725 2 is_stmt 1 view .LVU1143
1725:Src/ff.c      **** 
 3471              		.loc 1 1725 8 is_stmt 0 view .LVU1144
 3472 0018 A369     		ldr	r3, [r4, #24]
1725:Src/ff.c      **** 
 3473              		.loc 1 1725 5 view .LVU1145
 3474 001a 002B     		cmp	r3, #0
 3475 001c 46D0     		beq	.L260
1727:Src/ff.c      **** 		dp->sect++;				/* Next sector */
 3476              		.loc 1 1727 2 is_stmt 1 view .LVU1146
1727:Src/ff.c      **** 		dp->sect++;				/* Next sector */
 3477              		.loc 1 1727 10 is_stmt 0 view .LVU1147
 3478 001e C5F30806 		ubfx	r6, r5, #0, #9
1727:Src/ff.c      **** 		dp->sect++;				/* Next sector */
 3479              		.loc 1 1727 5 view .LVU1148
 3480 0022 3EB9     		cbnz	r6, .L256
1728:Src/ff.c      **** 
 3481              		.loc 1 1728 3 is_stmt 1 view .LVU1149
1728:Src/ff.c      **** 
 3482              		.loc 1 1728 11 is_stmt 0 view .LVU1150
 3483 0024 0133     		adds	r3, r3, #1
 3484 0026 A361     		str	r3, [r4, #24]
1730:Src/ff.c      **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3485              		.loc 1 1730 3 is_stmt 1 view .LVU1151
1730:Src/ff.c      **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3486              		.loc 1 1730 9 is_stmt 0 view .LVU1152
 3487 0028 6169     		ldr	r1, [r4, #20]
 3488              	.LVL426:
1730:Src/ff.c      **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3489              		.loc 1 1730 6 view .LVU1153
 3490 002a 79B9     		cbnz	r1, .L257
1731:Src/ff.c      **** 				dp->sect = 0; return FR_NO_FILE;
 3491              		.loc 1 1731 4 is_stmt 1 view .LVU1154
1731:Src/ff.c      **** 				dp->sect = 0; return FR_NO_FILE;
 3492              		.loc 1 1731 26 is_stmt 0 view .LVU1155
 3493 002c 3B89     		ldrh	r3, [r7, #8]
1731:Src/ff.c      **** 				dp->sect = 0; return FR_NO_FILE;
 3494              		.loc 1 1731 7 view .LVU1156
 3495 002e B3EB551F 		cmp	r3, r5, lsr #5
 3496 0032 07D9     		bls	.L268
 3497              	.LVL427:
 3498              	.L256:
1761:Src/ff.c      **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3499              		.loc 1 1761 2 is_stmt 1 view .LVU1157
1761:Src/ff.c      **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3500              		.loc 1 1761 11 is_stmt 0 view .LVU1158
 3501 0034 2561     		str	r5, [r4, #16]
1762:Src/ff.c      **** 
 3502              		.loc 1 1762 2 is_stmt 1 view .LVU1159
1762:Src/ff.c      **** 
 3503              		.loc 1 1762 12 is_stmt 0 view .LVU1160
 3504 0036 07F13403 		add	r3, r7, #52
1762:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 141


 3505              		.loc 1 1762 20 view .LVU1161
 3506 003a 3344     		add	r3, r3, r6
1762:Src/ff.c      **** 
 3507              		.loc 1 1762 10 view .LVU1162
 3508 003c E361     		str	r3, [r4, #28]
1764:Src/ff.c      **** }
 3509              		.loc 1 1764 2 is_stmt 1 view .LVU1163
1764:Src/ff.c      **** }
 3510              		.loc 1 1764 9 is_stmt 0 view .LVU1164
 3511 003e 0020     		movs	r0, #0
 3512              	.L255:
1765:Src/ff.c      **** 
 3513              		.loc 1 1765 1 view .LVU1165
 3514 0040 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3515              	.LVL428:
 3516              	.L268:
1732:Src/ff.c      **** 			}
 3517              		.loc 1 1732 5 is_stmt 1 view .LVU1166
1732:Src/ff.c      **** 			}
 3518              		.loc 1 1732 14 is_stmt 0 view .LVU1167
 3519 0044 0023     		movs	r3, #0
 3520 0046 A361     		str	r3, [r4, #24]
1732:Src/ff.c      **** 			}
 3521              		.loc 1 1732 19 is_stmt 1 view .LVU1168
1732:Src/ff.c      **** 			}
 3522              		.loc 1 1732 26 is_stmt 0 view .LVU1169
 3523 0048 0420     		movs	r0, #4
 3524              	.LVL429:
1732:Src/ff.c      **** 			}
 3525              		.loc 1 1732 26 view .LVU1170
 3526 004a F9E7     		b	.L255
 3527              	.LVL430:
 3528              	.L257:
1736:Src/ff.c      **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3529              		.loc 1 1736 4 is_stmt 1 view .LVU1171
1736:Src/ff.c      **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3530              		.loc 1 1736 27 is_stmt 0 view .LVU1172
 3531 004c 7B89     		ldrh	r3, [r7, #10]
1736:Src/ff.c      **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3532              		.loc 1 1736 35 view .LVU1173
 3533 004e 013B     		subs	r3, r3, #1
1736:Src/ff.c      **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3534              		.loc 1 1736 7 view .LVU1174
 3535 0050 13EA5523 		ands	r3, r3, r5, lsr #9
 3536 0054 EED1     		bne	.L256
1737:Src/ff.c      **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3537              		.loc 1 1737 5 is_stmt 1 view .LVU1175
1737:Src/ff.c      **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3538              		.loc 1 1737 12 is_stmt 0 view .LVU1176
 3539 0056 2046     		mov	r0, r4
 3540              	.LVL431:
1737:Src/ff.c      **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3541              		.loc 1 1737 12 view .LVU1177
 3542 0058 FFF7FEFF 		bl	get_fat
 3543              	.LVL432:
 3544 005c 8146     		mov	r9, r0
 3545              	.LVL433:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 142


1738:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3546              		.loc 1 1738 5 is_stmt 1 view .LVU1178
1738:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3547              		.loc 1 1738 8 is_stmt 0 view .LVU1179
 3548 005e 0128     		cmp	r0, #1
 3549 0060 26D9     		bls	.L261
1739:Src/ff.c      **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3550              		.loc 1 1739 5 is_stmt 1 view .LVU1180
1739:Src/ff.c      **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3551              		.loc 1 1739 8 is_stmt 0 view .LVU1181
 3552 0062 B0F1FF3F 		cmp	r0, #-1
 3553 0066 25D0     		beq	.L262
1740:Src/ff.c      **** #if !FF_FS_READONLY
 3554              		.loc 1 1740 5 is_stmt 1 view .LVU1182
1740:Src/ff.c      **** #if !FF_FS_READONLY
 3555              		.loc 1 1740 19 is_stmt 0 view .LVU1183
 3556 0068 BB69     		ldr	r3, [r7, #24]
1740:Src/ff.c      **** #if !FF_FS_READONLY
 3557              		.loc 1 1740 8 view .LVU1184
 3558 006a 8342     		cmp	r3, r0
 3559 006c 12D8     		bhi	.L258
1742:Src/ff.c      **** 						dp->sect = 0; return FR_NO_FILE;
 3560              		.loc 1 1742 6 is_stmt 1 view .LVU1185
1742:Src/ff.c      **** 						dp->sect = 0; return FR_NO_FILE;
 3561              		.loc 1 1742 9 is_stmt 0 view .LVU1186
 3562 006e B8F1000F 		cmp	r8, #0
 3563 0072 17D0     		beq	.L269
1745:Src/ff.c      **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3564              		.loc 1 1745 6 is_stmt 1 view .LVU1187
1745:Src/ff.c      **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3565              		.loc 1 1745 13 is_stmt 0 view .LVU1188
 3566 0074 6169     		ldr	r1, [r4, #20]
 3567 0076 2046     		mov	r0, r4
 3568              	.LVL434:
1745:Src/ff.c      **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3569              		.loc 1 1745 13 view .LVU1189
 3570 0078 FFF7FEFF 		bl	create_chain
 3571              	.LVL435:
1746:Src/ff.c      **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3572              		.loc 1 1746 6 is_stmt 1 view .LVU1190
1746:Src/ff.c      **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3573              		.loc 1 1746 9 is_stmt 0 view .LVU1191
 3574 007c 8146     		mov	r9, r0
 3575 007e D8B1     		cbz	r0, .L263
1747:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3576              		.loc 1 1747 6 is_stmt 1 view .LVU1192
1747:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3577              		.loc 1 1747 9 is_stmt 0 view .LVU1193
 3578 0080 0128     		cmp	r0, #1
 3579 0082 1BD0     		beq	.L264
1748:Src/ff.c      **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3580              		.loc 1 1748 6 is_stmt 1 view .LVU1194
1748:Src/ff.c      **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3581              		.loc 1 1748 9 is_stmt 0 view .LVU1195
 3582 0084 B0F1FF3F 		cmp	r0, #-1
 3583 0088 1AD0     		beq	.L265
1749:Src/ff.c      **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 143


 3584              		.loc 1 1749 6 is_stmt 1 view .LVU1196
1749:Src/ff.c      **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 3585              		.loc 1 1749 10 is_stmt 0 view .LVU1197
 3586 008a 0146     		mov	r1, r0
 3587 008c 3846     		mov	r0, r7
 3588              	.LVL436:
1749:Src/ff.c      **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 3589              		.loc 1 1749 10 view .LVU1198
 3590 008e FFF7FEFF 		bl	dir_clear
 3591              	.LVL437:
1749:Src/ff.c      **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 3592              		.loc 1 1749 9 view .LVU1199
 3593 0092 B8B9     		cbnz	r0, .L266
 3594              	.L258:
1756:Src/ff.c      **** 				dp->sect = clst2sect(fs, clst);
 3595              		.loc 1 1756 5 is_stmt 1 view .LVU1200
1756:Src/ff.c      **** 				dp->sect = clst2sect(fs, clst);
 3596              		.loc 1 1756 15 is_stmt 0 view .LVU1201
 3597 0094 C4F81490 		str	r9, [r4, #20]
1757:Src/ff.c      **** 			}
 3598              		.loc 1 1757 5 is_stmt 1 view .LVU1202
1757:Src/ff.c      **** 			}
 3599              		.loc 1 1757 16 is_stmt 0 view .LVU1203
 3600 0098 4946     		mov	r1, r9
 3601 009a 3846     		mov	r0, r7
 3602 009c FFF7FEFF 		bl	clst2sect
 3603              	.LVL438:
1757:Src/ff.c      **** 			}
 3604              		.loc 1 1757 14 view .LVU1204
 3605 00a0 A061     		str	r0, [r4, #24]
 3606 00a2 C7E7     		b	.L256
 3607              	.LVL439:
 3608              	.L269:
1743:Src/ff.c      **** 					}
 3609              		.loc 1 1743 7 is_stmt 1 view .LVU1205
1743:Src/ff.c      **** 					}
 3610              		.loc 1 1743 16 is_stmt 0 view .LVU1206
 3611 00a4 0023     		movs	r3, #0
 3612 00a6 A361     		str	r3, [r4, #24]
1743:Src/ff.c      **** 					}
 3613              		.loc 1 1743 21 is_stmt 1 view .LVU1207
1743:Src/ff.c      **** 					}
 3614              		.loc 1 1743 28 is_stmt 0 view .LVU1208
 3615 00a8 0420     		movs	r0, #4
 3616              	.LVL440:
1743:Src/ff.c      **** 					}
 3617              		.loc 1 1743 28 view .LVU1209
 3618 00aa C9E7     		b	.L255
 3619              	.LVL441:
 3620              	.L260:
1725:Src/ff.c      **** 
 3621              		.loc 1 1725 28 view .LVU1210
 3622 00ac 0420     		movs	r0, #4
 3623              	.LVL442:
1725:Src/ff.c      **** 
 3624              		.loc 1 1725 28 view .LVU1211
 3625 00ae C7E7     		b	.L255
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 144


 3626              	.LVL443:
 3627              	.L261:
1738:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3628              		.loc 1 1738 27 view .LVU1212
 3629 00b0 0220     		movs	r0, #2
 3630              	.LVL444:
1738:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3631              		.loc 1 1738 27 view .LVU1213
 3632 00b2 C5E7     		b	.L255
 3633              	.LVL445:
 3634              	.L262:
1739:Src/ff.c      **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3635              		.loc 1 1739 36 view .LVU1214
 3636 00b4 0120     		movs	r0, #1
 3637              	.LVL446:
1739:Src/ff.c      **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3638              		.loc 1 1739 36 view .LVU1215
 3639 00b6 C3E7     		b	.L255
 3640              	.LVL447:
 3641              	.L263:
1746:Src/ff.c      **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3642              		.loc 1 1746 28 view .LVU1216
 3643 00b8 0720     		movs	r0, #7
 3644              	.LVL448:
1746:Src/ff.c      **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3645              		.loc 1 1746 28 view .LVU1217
 3646 00ba C1E7     		b	.L255
 3647              	.LVL449:
 3648              	.L264:
1747:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3649              		.loc 1 1747 28 view .LVU1218
 3650 00bc 0220     		movs	r0, #2
 3651              	.LVL450:
1747:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3652              		.loc 1 1747 28 view .LVU1219
 3653 00be BFE7     		b	.L255
 3654              	.LVL451:
 3655              	.L265:
1748:Src/ff.c      **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3656              		.loc 1 1748 37 view .LVU1220
 3657 00c0 0120     		movs	r0, #1
 3658              	.LVL452:
1748:Src/ff.c      **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3659              		.loc 1 1748 37 view .LVU1221
 3660 00c2 BDE7     		b	.L255
 3661              	.L266:
1749:Src/ff.c      **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 3662              		.loc 1 1749 47 view .LVU1222
 3663 00c4 0120     		movs	r0, #1
 3664 00c6 BBE7     		b	.L255
 3665              		.cfi_endproc
 3666              	.LFE18:
 3668              		.section	.text.dir_alloc,"ax",%progbits
 3669              		.align	1
 3670              		.syntax unified
 3671              		.thumb
 3672              		.thumb_func
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 145


 3673              		.fpu softvfp
 3675              	dir_alloc:
 3676              	.LVL453:
 3677              	.LFB19:
1779:Src/ff.c      **** 	FRESULT res;
 3678              		.loc 1 1779 1 is_stmt 1 view -0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 0
 3681              		@ frame_needed = 0, uses_anonymous_args = 0
1779:Src/ff.c      **** 	FRESULT res;
 3682              		.loc 1 1779 1 is_stmt 0 view .LVU1224
 3683 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3684              	.LCFI19:
 3685              		.cfi_def_cfa_offset 24
 3686              		.cfi_offset 3, -24
 3687              		.cfi_offset 4, -20
 3688              		.cfi_offset 5, -16
 3689              		.cfi_offset 6, -12
 3690              		.cfi_offset 7, -8
 3691              		.cfi_offset 14, -4
 3692 0002 0446     		mov	r4, r0
 3693 0004 0E46     		mov	r6, r1
1780:Src/ff.c      **** 	UINT n;
 3694              		.loc 1 1780 2 is_stmt 1 view .LVU1225
1781:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 3695              		.loc 1 1781 2 view .LVU1226
1782:Src/ff.c      **** 
 3696              		.loc 1 1782 2 view .LVU1227
1782:Src/ff.c      **** 
 3697              		.loc 1 1782 9 is_stmt 0 view .LVU1228
 3698 0006 0768     		ldr	r7, [r0]
 3699              	.LVL454:
1785:Src/ff.c      **** 	if (res == FR_OK) {
 3700              		.loc 1 1785 2 is_stmt 1 view .LVU1229
1785:Src/ff.c      **** 	if (res == FR_OK) {
 3701              		.loc 1 1785 8 is_stmt 0 view .LVU1230
 3702 0008 0021     		movs	r1, #0
 3703              	.LVL455:
1785:Src/ff.c      **** 	if (res == FR_OK) {
 3704              		.loc 1 1785 8 view .LVU1231
 3705 000a FFF7FEFF 		bl	dir_sdi
 3706              	.LVL456:
1786:Src/ff.c      **** 		n = 0;
 3707              		.loc 1 1786 2 is_stmt 1 view .LVU1232
1786:Src/ff.c      **** 		n = 0;
 3708              		.loc 1 1786 5 is_stmt 0 view .LVU1233
 3709 000e 0246     		mov	r2, r0
 3710 0010 C0B9     		cbnz	r0, .L271
1787:Src/ff.c      **** 		do {
 3711              		.loc 1 1787 5 view .LVU1234
 3712 0012 0025     		movs	r5, #0
 3713 0014 08E0     		b	.L274
 3714              	.LVL457:
 3715              	.L272:
1796:Src/ff.c      **** 			} else {
 3716              		.loc 1 1796 5 is_stmt 1 view .LVU1235
1796:Src/ff.c      **** 			} else {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 146


 3717              		.loc 1 1796 8 is_stmt 0 view .LVU1236
 3718 0016 0135     		adds	r5, r5, #1
 3719              	.LVL458:
1796:Src/ff.c      **** 			} else {
 3720              		.loc 1 1796 8 view .LVU1237
 3721 0018 B542     		cmp	r5, r6
 3722 001a 13D0     		beq	.L271
 3723              	.LVL459:
 3724              	.L273:
1800:Src/ff.c      **** 		} while (res == FR_OK);
 3725              		.loc 1 1800 4 is_stmt 1 view .LVU1238
1800:Src/ff.c      **** 		} while (res == FR_OK);
 3726              		.loc 1 1800 10 is_stmt 0 view .LVU1239
 3727 001c 0121     		movs	r1, #1
 3728 001e 2046     		mov	r0, r4
 3729              	.LVL460:
1800:Src/ff.c      **** 		} while (res == FR_OK);
 3730              		.loc 1 1800 10 view .LVU1240
 3731 0020 FFF7FEFF 		bl	dir_next
 3732              	.LVL461:
1801:Src/ff.c      **** 	}
 3733              		.loc 1 1801 11 is_stmt 1 view .LVU1241
1801:Src/ff.c      **** 	}
 3734              		.loc 1 1801 3 is_stmt 0 view .LVU1242
 3735 0024 0246     		mov	r2, r0
 3736 0026 68B9     		cbnz	r0, .L271
 3737              	.LVL462:
 3738              	.L274:
1788:Src/ff.c      **** 			res = move_window(fs, dp->sect);
 3739              		.loc 1 1788 3 is_stmt 1 view .LVU1243
1789:Src/ff.c      **** 			if (res != FR_OK) break;
 3740              		.loc 1 1789 4 view .LVU1244
1789:Src/ff.c      **** 			if (res != FR_OK) break;
 3741              		.loc 1 1789 10 is_stmt 0 view .LVU1245
 3742 0028 A169     		ldr	r1, [r4, #24]
 3743 002a 3846     		mov	r0, r7
 3744              	.LVL463:
1789:Src/ff.c      **** 			if (res != FR_OK) break;
 3745              		.loc 1 1789 10 view .LVU1246
 3746 002c FFF7FEFF 		bl	move_window
 3747              	.LVL464:
1790:Src/ff.c      **** #if FF_FS_EXFAT
 3748              		.loc 1 1790 4 is_stmt 1 view .LVU1247
1790:Src/ff.c      **** #if FF_FS_EXFAT
 3749              		.loc 1 1790 7 is_stmt 0 view .LVU1248
 3750 0030 0246     		mov	r2, r0
 3751 0032 38B9     		cbnz	r0, .L271
1794:Src/ff.c      **** #endif
 3752              		.loc 1 1794 4 is_stmt 1 view .LVU1249
1794:Src/ff.c      **** #endif
 3753              		.loc 1 1794 10 is_stmt 0 view .LVU1250
 3754 0034 E369     		ldr	r3, [r4, #28]
1794:Src/ff.c      **** #endif
 3755              		.loc 1 1794 15 view .LVU1251
 3756 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1794:Src/ff.c      **** #endif
 3757              		.loc 1 1794 7 view .LVU1252
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 147


 3758 0038 E52B     		cmp	r3, #229
 3759 003a ECD0     		beq	.L272
1794:Src/ff.c      **** #endif
 3760              		.loc 1 1794 34 discriminator 1 view .LVU1253
 3761 003c 002B     		cmp	r3, #0
 3762 003e EAD0     		beq	.L272
1798:Src/ff.c      **** 			}
 3763              		.loc 1 1798 7 view .LVU1254
 3764 0040 0025     		movs	r5, #0
 3765              	.LVL465:
1798:Src/ff.c      **** 			}
 3766              		.loc 1 1798 7 view .LVU1255
 3767 0042 EBE7     		b	.L273
 3768              	.L271:
 3769              	.LVL466:
1804:Src/ff.c      **** 	return res;
 3770              		.loc 1 1804 2 is_stmt 1 view .LVU1256
1804:Src/ff.c      **** 	return res;
 3771              		.loc 1 1804 5 is_stmt 0 view .LVU1257
 3772 0044 042A     		cmp	r2, #4
 3773 0046 01D0     		beq	.L279
 3774              	.LVL467:
 3775              	.L275:
1805:Src/ff.c      **** }
 3776              		.loc 1 1805 2 is_stmt 1 view .LVU1258
1806:Src/ff.c      **** 
 3777              		.loc 1 1806 1 is_stmt 0 view .LVU1259
 3778 0048 1046     		mov	r0, r2
 3779 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3780              	.LVL468:
 3781              	.L279:
1804:Src/ff.c      **** 	return res;
 3782              		.loc 1 1804 29 view .LVU1260
 3783 004c 0722     		movs	r2, #7
 3784              	.LVL469:
1804:Src/ff.c      **** 	return res;
 3785              		.loc 1 1804 29 view .LVU1261
 3786 004e FBE7     		b	.L275
 3787              		.cfi_endproc
 3788              	.LFE19:
 3790              		.section	.text.dir_read,"ax",%progbits
 3791              		.align	1
 3792              		.syntax unified
 3793              		.thumb
 3794              		.thumb_func
 3795              		.fpu softvfp
 3797              	dir_read:
 3798              	.LVL470:
 3799              	.LFB27:
2279:Src/ff.c      **** 	FRESULT res = FR_NO_FILE;
 3800              		.loc 1 2279 1 is_stmt 1 view -0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 0
 3803              		@ frame_needed = 0, uses_anonymous_args = 0
2279:Src/ff.c      **** 	FRESULT res = FR_NO_FILE;
 3804              		.loc 1 2279 1 is_stmt 0 view .LVU1263
 3805 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 148


 3806              	.LCFI20:
 3807              		.cfi_def_cfa_offset 32
 3808              		.cfi_offset 3, -32
 3809              		.cfi_offset 4, -28
 3810              		.cfi_offset 5, -24
 3811              		.cfi_offset 6, -20
 3812              		.cfi_offset 7, -16
 3813              		.cfi_offset 8, -12
 3814              		.cfi_offset 9, -8
 3815              		.cfi_offset 14, -4
 3816 0004 0446     		mov	r4, r0
 3817 0006 8846     		mov	r8, r1
2280:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 3818              		.loc 1 2280 2 is_stmt 1 view .LVU1264
 3819              	.LVL471:
2281:Src/ff.c      **** 	BYTE attr, b;
 3820              		.loc 1 2281 2 view .LVU1265
2281:Src/ff.c      **** 	BYTE attr, b;
 3821              		.loc 1 2281 9 is_stmt 0 view .LVU1266
 3822 0008 0768     		ldr	r7, [r0]
 3823              	.LVL472:
2282:Src/ff.c      **** #if FF_USE_LFN
 3824              		.loc 1 2282 2 is_stmt 1 view .LVU1267
2284:Src/ff.c      **** #endif
 3825              		.loc 1 2284 2 view .LVU1268
2287:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 3826              		.loc 1 2287 2 view .LVU1269
2284:Src/ff.c      **** #endif
 3827              		.loc 1 2284 19 is_stmt 0 view .LVU1270
 3828 000a 4FF0FF09 		mov	r9, #255
2284:Src/ff.c      **** #endif
 3829              		.loc 1 2284 7 view .LVU1271
 3830 000e 4E46     		mov	r6, r9
2280:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 3831              		.loc 1 2280 10 view .LVU1272
 3832 0010 0425     		movs	r5, #4
2287:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 3833              		.loc 1 2287 8 view .LVU1273
 3834 0012 2EE0     		b	.L281
 3835              	.LVL473:
 3836              	.L299:
2316:Src/ff.c      **** 					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 3837              		.loc 1 2316 5 is_stmt 1 view .LVU1274
2316:Src/ff.c      **** 					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 3838              		.loc 1 2316 8 is_stmt 0 view .LVU1275
 3839 0014 0F2B     		cmp	r3, #15
 3840 0016 19D1     		bne	.L284
2317:Src/ff.c      **** 						sum = dp->dir[LDIR_Chksum];
 3841              		.loc 1 2317 6 is_stmt 1 view .LVU1276
2317:Src/ff.c      **** 						sum = dp->dir[LDIR_Chksum];
 3842              		.loc 1 2317 9 is_stmt 0 view .LVU1277
 3843 0018 12F0400F 		tst	r2, #64
 3844 001c 06D0     		beq	.L285
2318:Src/ff.c      **** 						b &= (BYTE)~LLEF; ord = b;
 3845              		.loc 1 2318 7 is_stmt 1 view .LVU1278
2318:Src/ff.c      **** 						b &= (BYTE)~LLEF; ord = b;
 3846              		.loc 1 2318 11 is_stmt 0 view .LVU1279
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 149


 3847 001e 91F80D90 		ldrb	r9, [r1, #13]	@ zero_extendqisi2
 3848              	.LVL474:
2319:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;
 3849              		.loc 1 2319 7 is_stmt 1 view .LVU1280
2319:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;
 3850              		.loc 1 2319 9 is_stmt 0 view .LVU1281
 3851 0022 02F0BF02 		and	r2, r2, #191
 3852              	.LVL475:
2319:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;
 3853              		.loc 1 2319 25 is_stmt 1 view .LVU1282
2320:Src/ff.c      **** 					}
 3854              		.loc 1 2320 7 view .LVU1283
2320:Src/ff.c      **** 					}
 3855              		.loc 1 2320 23 is_stmt 0 view .LVU1284
 3856 0026 2369     		ldr	r3, [r4, #16]
 3857              	.LVL476:
2320:Src/ff.c      **** 					}
 3858              		.loc 1 2320 19 view .LVU1285
 3859 0028 E362     		str	r3, [r4, #44]
2319:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;
 3860              		.loc 1 2319 29 view .LVU1286
 3861 002a 1646     		mov	r6, r2
 3862              	.LVL477:
 3863              	.L285:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3864              		.loc 1 2323 6 is_stmt 1 view .LVU1287
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3865              		.loc 1 2323 10 is_stmt 0 view .LVU1288
 3866 002c B242     		cmp	r2, r6
 3867 002e 01D0     		beq	.L297
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3868              		.loc 1 2323 10 view .LVU1289
 3869 0030 FF26     		movs	r6, #255
 3870              	.LVL478:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3871              		.loc 1 2323 10 view .LVU1290
 3872 0032 18E0     		b	.L283
 3873              	.LVL479:
 3874              	.L297:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3875              		.loc 1 2323 39 discriminator 1 view .LVU1291
 3876 0034 4B7B     		ldrb	r3, [r1, #13]	@ zero_extendqisi2
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3877              		.loc 1 2323 22 discriminator 1 view .LVU1292
 3878 0036 4B45     		cmp	r3, r9
 3879 0038 01D0     		beq	.L298
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3880              		.loc 1 2323 10 view .LVU1293
 3881 003a FF26     		movs	r6, #255
 3882              	.LVL480:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3883              		.loc 1 2323 10 view .LVU1294
 3884 003c 13E0     		b	.L283
 3885              	.LVL481:
 3886              	.L298:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3887              		.loc 1 2323 56 discriminator 3 view .LVU1295
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 150


 3888 003e F868     		ldr	r0, [r7, #12]
 3889 0040 FFF7FEFF 		bl	pick_lfn
 3890              	.LVL482:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3891              		.loc 1 2323 53 discriminator 3 view .LVU1296
 3892 0044 88B3     		cbz	r0, .L295
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3893              		.loc 1 2323 10 discriminator 5 view .LVU1297
 3894 0046 013E     		subs	r6, r6, #1
 3895              	.LVL483:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3896              		.loc 1 2323 10 discriminator 5 view .LVU1298
 3897 0048 F6B2     		uxtb	r6, r6
 3898 004a 0CE0     		b	.L283
 3899              	.LVL484:
 3900              	.L284:
2325:Src/ff.c      **** 						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 3901              		.loc 1 2325 6 is_stmt 1 view .LVU1299
2325:Src/ff.c      **** 						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 3902              		.loc 1 2325 9 is_stmt 0 view .LVU1300
 3903 004c 26B9     		cbnz	r6, .L286
2325:Src/ff.c      **** 						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 3904              		.loc 1 2325 29 discriminator 1 view .LVU1301
 3905 004e 0846     		mov	r0, r1
 3906 0050 FFF7FEFF 		bl	sum_sfn
 3907              	.LVL485:
2325:Src/ff.c      **** 						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 3908              		.loc 1 2325 19 discriminator 1 view .LVU1302
 3909 0054 4845     		cmp	r0, r9
 3910 0056 2BD0     		beq	.L282
 3911              	.L286:
2326:Src/ff.c      **** 					}
 3912              		.loc 1 2326 7 is_stmt 1 view .LVU1303
2326:Src/ff.c      **** 					}
 3913              		.loc 1 2326 19 is_stmt 0 view .LVU1304
 3914 0058 4FF0FF33 		mov	r3, #-1
 3915 005c E362     		str	r3, [r4, #44]
 3916 005e 27E0     		b	.L282
 3917              	.LVL486:
 3918              	.L290:
2314:Src/ff.c      **** 			} else {
 3919              		.loc 1 2314 9 view .LVU1305
 3920 0060 FF26     		movs	r6, #255
 3921              	.LVL487:
2314:Src/ff.c      **** 			} else {
 3922              		.loc 1 2314 9 view .LVU1306
 3923 0062 00E0     		b	.L283
 3924              	.LVL488:
 3925              	.L291:
2314:Src/ff.c      **** 			} else {
 3926              		.loc 1 2314 9 view .LVU1307
 3927 0064 FF26     		movs	r6, #255
 3928              	.LVL489:
 3929              	.L283:
2337:Src/ff.c      **** 		if (res != FR_OK) break;
 3930              		.loc 1 2337 3 is_stmt 1 view .LVU1308
2337:Src/ff.c      **** 		if (res != FR_OK) break;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 151


 3931              		.loc 1 2337 9 is_stmt 0 view .LVU1309
 3932 0066 0021     		movs	r1, #0
 3933 0068 2046     		mov	r0, r4
 3934 006a FFF7FEFF 		bl	dir_next
 3935              	.LVL490:
2338:Src/ff.c      **** 	}
 3936              		.loc 1 2338 3 is_stmt 1 view .LVU1310
2338:Src/ff.c      **** 	}
 3937              		.loc 1 2338 6 is_stmt 0 view .LVU1311
 3938 006e 0546     		mov	r5, r0
 3939 0070 F0B9     		cbnz	r0, .L282
 3940              	.LVL491:
 3941              	.L281:
2287:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 3942              		.loc 1 2287 8 is_stmt 1 view .LVU1312
2287:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 3943              		.loc 1 2287 11 is_stmt 0 view .LVU1313
 3944 0072 A169     		ldr	r1, [r4, #24]
2287:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 3945              		.loc 1 2287 8 view .LVU1314
 3946 0074 E1B1     		cbz	r1, .L282
2288:Src/ff.c      **** 		if (res != FR_OK) break;
 3947              		.loc 1 2288 3 is_stmt 1 view .LVU1315
2288:Src/ff.c      **** 		if (res != FR_OK) break;
 3948              		.loc 1 2288 9 is_stmt 0 view .LVU1316
 3949 0076 3846     		mov	r0, r7
 3950 0078 FFF7FEFF 		bl	move_window
 3951              	.LVL492:
2289:Src/ff.c      **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
 3952              		.loc 1 2289 3 is_stmt 1 view .LVU1317
2289:Src/ff.c      **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
 3953              		.loc 1 2289 6 is_stmt 0 view .LVU1318
 3954 007c 0546     		mov	r5, r0
 3955 007e B8B9     		cbnz	r0, .L282
2290:Src/ff.c      **** 		if (b == 0) {
 3956              		.loc 1 2290 3 is_stmt 1 view .LVU1319
2290:Src/ff.c      **** 		if (b == 0) {
 3957              		.loc 1 2290 9 is_stmt 0 view .LVU1320
 3958 0080 E169     		ldr	r1, [r4, #28]
2290:Src/ff.c      **** 		if (b == 0) {
 3959              		.loc 1 2290 5 view .LVU1321
 3960 0082 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 3961              	.LVL493:
2291:Src/ff.c      **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3962              		.loc 1 2291 3 is_stmt 1 view .LVU1322
2291:Src/ff.c      **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3963              		.loc 1 2291 6 is_stmt 0 view .LVU1323
 3964 0084 9AB1     		cbz	r2, .L289
2311:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 3965              		.loc 1 2311 4 is_stmt 1 view .LVU1324
2311:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 3966              		.loc 1 2311 33 is_stmt 0 view .LVU1325
 3967 0086 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
2311:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 3968              		.loc 1 2311 24 view .LVU1326
 3969 0088 03F03F03 		and	r3, r3, #63
 3970              	.LVL494:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 152


2311:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 3971              		.loc 1 2311 17 view .LVU1327
 3972 008c A371     		strb	r3, [r4, #6]
2313:Src/ff.c      **** 				ord = 0xFF;
 3973              		.loc 1 2313 4 is_stmt 1 view .LVU1328
2313:Src/ff.c      **** 				ord = 0xFF;
 3974              		.loc 1 2313 7 is_stmt 0 view .LVU1329
 3975 008e E52A     		cmp	r2, #229
 3976 0090 E6D0     		beq	.L290
2313:Src/ff.c      **** 				ord = 0xFF;
 3977              		.loc 1 2313 18 discriminator 1 view .LVU1330
 3978 0092 2E2A     		cmp	r2, #46
 3979 0094 E6D0     		beq	.L291
2313:Src/ff.c      **** 				ord = 0xFF;
 3980              		.loc 1 2313 45 discriminator 2 view .LVU1331
 3981 0096 23F02000 		bic	r0, r3, #32
 3982              	.LVL495:
2313:Src/ff.c      **** 				ord = 0xFF;
 3983              		.loc 1 2313 33 discriminator 2 view .LVU1332
 3984 009a 0828     		cmp	r0, #8
 3985 009c 14BF     		ite	ne
 3986 009e 0020     		movne	r0, #0
 3987 00a0 0120     		moveq	r0, #1
2313:Src/ff.c      **** 				ord = 0xFF;
 3988              		.loc 1 2313 30 discriminator 2 view .LVU1333
 3989 00a2 4045     		cmp	r0, r8
 3990 00a4 B6D0     		beq	.L299
2314:Src/ff.c      **** 			} else {
 3991              		.loc 1 2314 9 view .LVU1334
 3992 00a6 FF26     		movs	r6, #255
 3993              	.LVL496:
2314:Src/ff.c      **** 			} else {
 3994              		.loc 1 2314 9 view .LVU1335
 3995 00a8 DDE7     		b	.L283
 3996              	.LVL497:
 3997              	.L295:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 3998              		.loc 1 2323 10 view .LVU1336
 3999 00aa FF26     		movs	r6, #255
 4000              	.LVL498:
2323:Src/ff.c      **** 				} else {				/* An SFN entry is found */
 4001              		.loc 1 2323 10 view .LVU1337
 4002 00ac DBE7     		b	.L283
 4003              	.LVL499:
 4004              	.L289:
2292:Src/ff.c      **** 		}
 4005              		.loc 1 2292 8 view .LVU1338
 4006 00ae 0425     		movs	r5, #4
 4007              	.LVL500:
 4008              	.L282:
2341:Src/ff.c      **** 	return res;
 4009              		.loc 1 2341 2 is_stmt 1 view .LVU1339
2341:Src/ff.c      **** 	return res;
 4010              		.loc 1 2341 5 is_stmt 0 view .LVU1340
 4011 00b0 0DB1     		cbz	r5, .L288
2341:Src/ff.c      **** 	return res;
 4012              		.loc 1 2341 20 is_stmt 1 discriminator 1 view .LVU1341
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 153


2341:Src/ff.c      **** 	return res;
 4013              		.loc 1 2341 29 is_stmt 0 discriminator 1 view .LVU1342
 4014 00b2 0023     		movs	r3, #0
 4015 00b4 A361     		str	r3, [r4, #24]
 4016              	.L288:
2342:Src/ff.c      **** }
 4017              		.loc 1 2342 2 is_stmt 1 view .LVU1343
2343:Src/ff.c      **** 
 4018              		.loc 1 2343 1 is_stmt 0 view .LVU1344
 4019 00b6 2846     		mov	r0, r5
 4020 00b8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
2343:Src/ff.c      **** 
 4021              		.loc 1 2343 1 view .LVU1345
 4022              		.cfi_endproc
 4023              	.LFE27:
 4025              		.section	.text.dir_remove,"ax",%progbits
 4026              		.align	1
 4027              		.syntax unified
 4028              		.thumb
 4029              		.thumb_func
 4030              		.fpu softvfp
 4032              	dir_remove:
 4033              	.LVL501:
 4034              	.LFB30:
2543:Src/ff.c      **** 	FRESULT res;
 4035              		.loc 1 2543 1 is_stmt 1 view -0
 4036              		.cfi_startproc
 4037              		@ args = 0, pretend = 0, frame = 0
 4038              		@ frame_needed = 0, uses_anonymous_args = 0
2543:Src/ff.c      **** 	FRESULT res;
 4039              		.loc 1 2543 1 is_stmt 0 view .LVU1347
 4040 0000 70B5     		push	{r4, r5, r6, lr}
 4041              	.LCFI21:
 4042              		.cfi_def_cfa_offset 16
 4043              		.cfi_offset 4, -16
 4044              		.cfi_offset 5, -12
 4045              		.cfi_offset 6, -8
 4046              		.cfi_offset 14, -4
 4047 0002 0446     		mov	r4, r0
2544:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 4048              		.loc 1 2544 2 is_stmt 1 view .LVU1348
2545:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 4049              		.loc 1 2545 2 view .LVU1349
2545:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 4050              		.loc 1 2545 9 is_stmt 0 view .LVU1350
 4051 0004 0568     		ldr	r5, [r0]
 4052              	.LVL502:
2547:Src/ff.c      **** 
 4053              		.loc 1 2547 2 is_stmt 1 view .LVU1351
2547:Src/ff.c      **** 
 4054              		.loc 1 2547 8 is_stmt 0 view .LVU1352
 4055 0006 0669     		ldr	r6, [r0, #16]
 4056              	.LVL503:
2549:Src/ff.c      **** 	if (res == FR_OK) {
 4057              		.loc 1 2549 2 is_stmt 1 view .LVU1353
2549:Src/ff.c      **** 	if (res == FR_OK) {
 4058              		.loc 1 2549 11 is_stmt 0 view .LVU1354
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 154


 4059 0008 C16A     		ldr	r1, [r0, #44]
2549:Src/ff.c      **** 	if (res == FR_OK) {
 4060              		.loc 1 2549 44 view .LVU1355
 4061 000a B1F1FF3F 		cmp	r1, #-1
 4062 000e 18D1     		bne	.L307
 4063              	.LVL504:
 4064              	.L304:
2551:Src/ff.c      **** 			res = move_window(fs, dp->sect);
 4065              		.loc 1 2551 3 is_stmt 1 view .LVU1356
2552:Src/ff.c      **** 			if (res != FR_OK) break;
 4066              		.loc 1 2552 4 view .LVU1357
2552:Src/ff.c      **** 			if (res != FR_OK) break;
 4067              		.loc 1 2552 10 is_stmt 0 view .LVU1358
 4068 0010 A169     		ldr	r1, [r4, #24]
 4069 0012 2846     		mov	r0, r5
 4070 0014 FFF7FEFF 		bl	move_window
 4071              	.LVL505:
2553:Src/ff.c      **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 4072              		.loc 1 2553 4 is_stmt 1 view .LVU1359
2553:Src/ff.c      **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 4073              		.loc 1 2553 7 is_stmt 0 view .LVU1360
 4074 0018 0346     		mov	r3, r0
 4075 001a 70B9     		cbnz	r0, .L303
2554:Src/ff.c      **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 4076              		.loc 1 2554 4 is_stmt 1 view .LVU1361
2557:Src/ff.c      **** 			}
 4077              		.loc 1 2557 5 view .LVU1362
2557:Src/ff.c      **** 			}
 4078              		.loc 1 2557 7 is_stmt 0 view .LVU1363
 4079 001c E269     		ldr	r2, [r4, #28]
2557:Src/ff.c      **** 			}
 4080              		.loc 1 2557 23 view .LVU1364
 4081 001e E521     		movs	r1, #229
 4082 0020 1170     		strb	r1, [r2]
2559:Src/ff.c      **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
 4083              		.loc 1 2559 4 is_stmt 1 view .LVU1365
2559:Src/ff.c      **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
 4084              		.loc 1 2559 14 is_stmt 0 view .LVU1366
 4085 0022 0122     		movs	r2, #1
 4086 0024 EA70     		strb	r2, [r5, #3]
2560:Src/ff.c      **** 			res = dir_next(dp, 0);	/* Next entry */
 4087              		.loc 1 2560 4 is_stmt 1 view .LVU1367
2560:Src/ff.c      **** 			res = dir_next(dp, 0);	/* Next entry */
 4088              		.loc 1 2560 10 is_stmt 0 view .LVU1368
 4089 0026 2269     		ldr	r2, [r4, #16]
2560:Src/ff.c      **** 			res = dir_next(dp, 0);	/* Next entry */
 4090              		.loc 1 2560 7 view .LVU1369
 4091 0028 B242     		cmp	r2, r6
 4092 002a 06D2     		bcs	.L303
2561:Src/ff.c      **** 		} while (res == FR_OK);
 4093              		.loc 1 2561 4 is_stmt 1 view .LVU1370
2561:Src/ff.c      **** 		} while (res == FR_OK);
 4094              		.loc 1 2561 10 is_stmt 0 view .LVU1371
 4095 002c 0021     		movs	r1, #0
 4096 002e 2046     		mov	r0, r4
 4097              	.LVL506:
2561:Src/ff.c      **** 		} while (res == FR_OK);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 155


 4098              		.loc 1 2561 10 view .LVU1372
 4099 0030 FFF7FEFF 		bl	dir_next
 4100              	.LVL507:
2562:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 4101              		.loc 1 2562 11 is_stmt 1 view .LVU1373
2562:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 4102              		.loc 1 2562 3 is_stmt 0 view .LVU1374
 4103 0034 0346     		mov	r3, r0
 4104 0036 0028     		cmp	r0, #0
 4105 0038 EAD0     		beq	.L304
 4106              	.L303:
 4107              	.LVL508:
2563:Src/ff.c      **** 	}
 4108              		.loc 1 2563 3 is_stmt 1 view .LVU1375
2563:Src/ff.c      **** 	}
 4109              		.loc 1 2563 6 is_stmt 0 view .LVU1376
 4110 003a 042B     		cmp	r3, #4
 4111 003c 07D0     		beq	.L308
 4112              	.LVL509:
 4113              	.L302:
2574:Src/ff.c      **** }
 4114              		.loc 1 2574 2 is_stmt 1 view .LVU1377
2575:Src/ff.c      **** 
 4115              		.loc 1 2575 1 is_stmt 0 view .LVU1378
 4116 003e 1846     		mov	r0, r3
 4117 0040 70BD     		pop	{r4, r5, r6, pc}
 4118              	.LVL510:
 4119              	.L307:
2549:Src/ff.c      **** 	if (res == FR_OK) {
 4120              		.loc 1 2549 46 discriminator 1 view .LVU1379
 4121 0042 FFF7FEFF 		bl	dir_sdi
 4122              	.LVL511:
2550:Src/ff.c      **** 		do {
 4123              		.loc 1 2550 2 is_stmt 1 discriminator 1 view .LVU1380
2550:Src/ff.c      **** 		do {
 4124              		.loc 1 2550 5 is_stmt 0 discriminator 1 view .LVU1381
 4125 0046 0346     		mov	r3, r0
 4126 0048 0028     		cmp	r0, #0
 4127 004a F8D1     		bne	.L302
 4128 004c E0E7     		b	.L304
 4129              	.LVL512:
 4130              	.L308:
2563:Src/ff.c      **** 	}
 4131              		.loc 1 2563 30 view .LVU1382
 4132 004e 0223     		movs	r3, #2
 4133              	.LVL513:
2563:Src/ff.c      **** 	}
 4134              		.loc 1 2563 30 view .LVU1383
 4135 0050 F5E7     		b	.L302
 4136              		.cfi_endproc
 4137              	.LFE30:
 4139              		.section	.text.cmp_lfn,"ax",%progbits
 4140              		.align	1
 4141              		.syntax unified
 4142              		.thumb
 4143              		.thumb_func
 4144              		.fpu softvfp
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 156


 4146              	cmp_lfn:
 4147              	.LVL514:
 4148              	.LFB22:
1858:Src/ff.c      **** 	UINT i, s;
 4149              		.loc 1 1858 1 is_stmt 1 view -0
 4150              		.cfi_startproc
 4151              		@ args = 0, pretend = 0, frame = 0
 4152              		@ frame_needed = 0, uses_anonymous_args = 0
1858:Src/ff.c      **** 	UINT i, s;
 4153              		.loc 1 1858 1 is_stmt 0 view .LVU1385
 4154 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4155              	.LCFI22:
 4156              		.cfi_def_cfa_offset 32
 4157              		.cfi_offset 4, -32
 4158              		.cfi_offset 5, -28
 4159              		.cfi_offset 6, -24
 4160              		.cfi_offset 7, -20
 4161              		.cfi_offset 8, -16
 4162              		.cfi_offset 9, -12
 4163              		.cfi_offset 10, -8
 4164              		.cfi_offset 14, -4
 4165 0004 8146     		mov	r9, r0
 4166 0006 0F46     		mov	r7, r1
1859:Src/ff.c      **** 	WCHAR wc, uc;
 4167              		.loc 1 1859 2 is_stmt 1 view .LVU1386
1860:Src/ff.c      **** 
 4168              		.loc 1 1860 2 view .LVU1387
1863:Src/ff.c      **** 
 4169              		.loc 1 1863 2 view .LVU1388
1863:Src/ff.c      **** 
 4170              		.loc 1 1863 6 is_stmt 0 view .LVU1389
 4171 0008 01F11A00 		add	r0, r1, #26
 4172              	.LVL515:
1863:Src/ff.c      **** 
 4173              		.loc 1 1863 6 view .LVU1390
 4174 000c FFF7FEFF 		bl	ld_word
 4175              	.LVL516:
1863:Src/ff.c      **** 
 4176              		.loc 1 1863 5 view .LVU1391
 4177 0010 C8BB     		cbnz	r0, .L316
1865:Src/ff.c      **** 
 4178              		.loc 1 1865 2 is_stmt 1 view .LVU1392
1865:Src/ff.c      **** 
 4179              		.loc 1 1865 11 is_stmt 0 view .LVU1393
 4180 0012 3E78     		ldrb	r6, [r7]	@ zero_extendqisi2
1865:Src/ff.c      **** 
 4181              		.loc 1 1865 22 view .LVU1394
 4182 0014 06F03F06 		and	r6, r6, #63
1865:Src/ff.c      **** 
 4183              		.loc 1 1865 30 view .LVU1395
 4184 0018 013E     		subs	r6, r6, #1
1865:Src/ff.c      **** 
 4185              		.loc 1 1865 35 view .LVU1396
 4186 001a 06EB4603 		add	r3, r6, r6, lsl #1
1865:Src/ff.c      **** 
 4187              		.loc 1 1865 4 view .LVU1397
 4188 001e 06EB8306 		add	r6, r6, r3, lsl #2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 157


 4189              	.LVL517:
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4190              		.loc 1 1867 2 is_stmt 1 view .LVU1398
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4191              		.loc 1 1867 10 is_stmt 0 view .LVU1399
 4192 0022 4FF00108 		mov	r8, #1
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4193              		.loc 1 1867 17 view .LVU1400
 4194 0026 0025     		movs	r5, #0
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4195              		.loc 1 1867 2 view .LVU1401
 4196 0028 06E0     		b	.L311
 4197              	.LVL518:
 4198              	.L313:
1871:Src/ff.c      **** 			}
 4199              		.loc 1 1871 5 is_stmt 1 view .LVU1402
1871:Src/ff.c      **** 			}
 4200              		.loc 1 1871 12 is_stmt 0 view .LVU1403
 4201 002a 0020     		movs	r0, #0
 4202 002c 2CE0     		b	.L309
 4203              	.LVL519:
 4204              	.L312:
1875:Src/ff.c      **** 		}
 4205              		.loc 1 1875 4 is_stmt 1 view .LVU1404
1875:Src/ff.c      **** 		}
 4206              		.loc 1 1875 7 is_stmt 0 view .LVU1405
 4207 002e 4FF6FF73 		movw	r3, #65535
 4208 0032 9842     		cmp	r0, r3
 4209 0034 2AD1     		bne	.L323
 4210              	.LVL520:
 4211              	.L314:
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4212              		.loc 1 1867 30 is_stmt 1 discriminator 2 view .LVU1406
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4213              		.loc 1 1867 31 is_stmt 0 discriminator 2 view .LVU1407
 4214 0036 0135     		adds	r5, r5, #1
 4215              	.LVL521:
 4216              	.L311:
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4217              		.loc 1 1867 22 is_stmt 1 discriminator 1 view .LVU1408
1867:Src/ff.c      **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4218              		.loc 1 1867 2 is_stmt 0 discriminator 1 view .LVU1409
 4219 0038 0C2D     		cmp	r5, #12
 4220 003a 18D8     		bhi	.L324
1868:Src/ff.c      **** 		if (wc != 0) {
 4221              		.loc 1 1868 3 is_stmt 1 view .LVU1410
1868:Src/ff.c      **** 		if (wc != 0) {
 4222              		.loc 1 1868 28 is_stmt 0 view .LVU1411
 4223 003c 174B     		ldr	r3, .L325
 4224 003e 585D     		ldrb	r0, [r3, r5]	@ zero_extendqisi2
1868:Src/ff.c      **** 		if (wc != 0) {
 4225              		.loc 1 1868 8 view .LVU1412
 4226 0040 3844     		add	r0, r0, r7
 4227 0042 FFF7FEFF 		bl	ld_word
 4228              	.LVL522:
 4229 0046 0446     		mov	r4, r0
 4230              	.LVL523:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 158


1869:Src/ff.c      **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 4231              		.loc 1 1869 3 is_stmt 1 view .LVU1413
1869:Src/ff.c      **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 4232              		.loc 1 1869 6 is_stmt 0 view .LVU1414
 4233 0048 B8F1000F 		cmp	r8, #0
 4234 004c EFD0     		beq	.L312
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4235              		.loc 1 1870 4 is_stmt 1 view .LVU1415
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4236              		.loc 1 1870 7 is_stmt 0 view .LVU1416
 4237 004e 802E     		cmp	r6, #128
 4238 0050 EBD8     		bhi	.L313
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4239              		.loc 1 1870 31 discriminator 1 view .LVU1417
 4240 0052 FFF7FEFF 		bl	ff_wtoupper
 4241              	.LVL524:
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4242              		.loc 1 1870 31 discriminator 1 view .LVU1418
 4243 0056 8046     		mov	r8, r0
 4244              	.LVL525:
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4245              		.loc 1 1870 70 discriminator 1 view .LVU1419
 4246 0058 06F1010A 		add	r10, r6, #1
 4247              	.LVL526:
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4248              		.loc 1 1870 50 discriminator 1 view .LVU1420
 4249 005c 39F81600 		ldrh	r0, [r9, r6, lsl #1]
 4250 0060 FFF7FEFF 		bl	ff_wtoupper
 4251              	.LVL527:
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4252              		.loc 1 1870 28 discriminator 1 view .LVU1421
 4253 0064 8045     		cmp	r8, r0
 4254 0066 E0D1     		bne	.L313
1873:Src/ff.c      **** 		} else {
 4255              		.loc 1 1873 7 view .LVU1422
 4256 0068 A046     		mov	r8, r4
1870:Src/ff.c      **** 				return 0;					/* Not matched */
 4257              		.loc 1 1870 70 view .LVU1423
 4258 006a 5646     		mov	r6, r10
 4259 006c E3E7     		b	.L314
 4260              	.LVL528:
 4261              	.L324:
1879:Src/ff.c      **** 
 4262              		.loc 1 1879 2 is_stmt 1 view .LVU1424
1879:Src/ff.c      **** 
 4263              		.loc 1 1879 10 is_stmt 0 view .LVU1425
 4264 006e 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
1879:Src/ff.c      **** 
 4265              		.loc 1 1879 5 view .LVU1426
 4266 0070 13F0400F 		tst	r3, #64
 4267 0074 0CD0     		beq	.L319
1879:Src/ff.c      **** 
 4268              		.loc 1 1879 29 discriminator 1 view .LVU1427
 4269 0076 B8F1000F 		cmp	r8, #0
 4270 007a 0BD0     		beq	.L320
1879:Src/ff.c      **** 
 4271              		.loc 1 1879 44 discriminator 2 view .LVU1428
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 159


 4272 007c 39F81630 		ldrh	r3, [r9, r6, lsl #1]
1879:Src/ff.c      **** 
 4273              		.loc 1 1879 35 discriminator 2 view .LVU1429
 4274 0080 53B9     		cbnz	r3, .L321
1881:Src/ff.c      **** }
 4275              		.loc 1 1881 9 view .LVU1430
 4276 0082 0120     		movs	r0, #1
 4277 0084 00E0     		b	.L309
 4278              	.LVL529:
 4279              	.L316:
1863:Src/ff.c      **** 
 4280              		.loc 1 1863 49 view .LVU1431
 4281 0086 0020     		movs	r0, #0
 4282              	.L309:
1882:Src/ff.c      **** 
 4283              		.loc 1 1882 1 view .LVU1432
 4284 0088 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4285              	.LVL530:
 4286              	.L323:
1875:Src/ff.c      **** 		}
 4287              		.loc 1 1875 29 view .LVU1433
 4288 008c 0020     		movs	r0, #0
 4289              	.LVL531:
1875:Src/ff.c      **** 		}
 4290              		.loc 1 1875 29 view .LVU1434
 4291 008e FBE7     		b	.L309
 4292              	.L319:
1881:Src/ff.c      **** }
 4293              		.loc 1 1881 9 view .LVU1435
 4294 0090 0120     		movs	r0, #1
 4295 0092 F9E7     		b	.L309
 4296              	.L320:
 4297 0094 0120     		movs	r0, #1
 4298 0096 F7E7     		b	.L309
 4299              	.L321:
1879:Src/ff.c      **** 
 4300              		.loc 1 1879 56 view .LVU1436
 4301 0098 0020     		movs	r0, #0
 4302 009a F5E7     		b	.L309
 4303              	.L326:
 4304              		.align	2
 4305              	.L325:
 4306 009c 00000000 		.word	.LANCHOR0
 4307              		.cfi_endproc
 4308              	.LFE22:
 4310              		.section	.text.dir_find,"ax",%progbits
 4311              		.align	1
 4312              		.syntax unified
 4313              		.thumb
 4314              		.thumb_func
 4315              		.fpu softvfp
 4317              	dir_find:
 4318              	.LVL532:
 4319              	.LFB28:
2356:Src/ff.c      **** 	FRESULT res;
 4320              		.loc 1 2356 1 is_stmt 1 view -0
 4321              		.cfi_startproc
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 160


 4322              		@ args = 0, pretend = 0, frame = 0
 4323              		@ frame_needed = 0, uses_anonymous_args = 0
2356:Src/ff.c      **** 	FRESULT res;
 4324              		.loc 1 2356 1 is_stmt 0 view .LVU1438
 4325 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4326              	.LCFI23:
 4327              		.cfi_def_cfa_offset 32
 4328              		.cfi_offset 3, -32
 4329              		.cfi_offset 4, -28
 4330              		.cfi_offset 5, -24
 4331              		.cfi_offset 6, -20
 4332              		.cfi_offset 7, -16
 4333              		.cfi_offset 8, -12
 4334              		.cfi_offset 9, -8
 4335              		.cfi_offset 14, -4
 4336 0004 0446     		mov	r4, r0
2357:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 4337              		.loc 1 2357 2 is_stmt 1 view .LVU1439
2358:Src/ff.c      **** 	BYTE c;
 4338              		.loc 1 2358 2 view .LVU1440
2358:Src/ff.c      **** 	BYTE c;
 4339              		.loc 1 2358 9 is_stmt 0 view .LVU1441
 4340 0006 D0F80080 		ldr	r8, [r0]
 4341              	.LVL533:
2359:Src/ff.c      **** #if FF_USE_LFN
 4342              		.loc 1 2359 2 is_stmt 1 view .LVU1442
2361:Src/ff.c      **** #endif
 4343              		.loc 1 2361 2 view .LVU1443
2364:Src/ff.c      **** 	if (res != FR_OK) return res;
 4344              		.loc 1 2364 2 view .LVU1444
2364:Src/ff.c      **** 	if (res != FR_OK) return res;
 4345              		.loc 1 2364 8 is_stmt 0 view .LVU1445
 4346 000a 0021     		movs	r1, #0
 4347 000c FFF7FEFF 		bl	dir_sdi
 4348              	.LVL534:
2365:Src/ff.c      **** #if FF_FS_EXFAT
 4349              		.loc 1 2365 2 is_stmt 1 view .LVU1446
2365:Src/ff.c      **** #if FF_FS_EXFAT
 4350              		.loc 1 2365 5 is_stmt 0 view .LVU1447
 4351 0010 0646     		mov	r6, r0
 4352 0012 0028     		cmp	r0, #0
 4353 0014 64D1     		bne	.L328
2388:Src/ff.c      **** #endif
 4354              		.loc 1 2388 2 is_stmt 1 view .LVU1448
 4355              	.LVL535:
2388:Src/ff.c      **** #endif
 4356              		.loc 1 2388 20 view .LVU1449
2388:Src/ff.c      **** #endif
 4357              		.loc 1 2388 32 is_stmt 0 view .LVU1450
 4358 0016 4FF0FF33 		mov	r3, #-1
 4359 001a E362     		str	r3, [r4, #44]
2388:Src/ff.c      **** #endif
 4360              		.loc 1 2388 12 view .LVU1451
 4361 001c 4FF0FF09 		mov	r9, #255
2388:Src/ff.c      **** #endif
 4362              		.loc 1 2388 6 view .LVU1452
 4363 0020 4F46     		mov	r7, r9
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 161


 4364 0022 0AE0     		b	.L336
 4365              	.LVL536:
 4366              	.L329:
2398:Src/ff.c      **** 		} else {
 4367              		.loc 1 2398 4 is_stmt 1 view .LVU1453
2398:Src/ff.c      **** 		} else {
 4368              		.loc 1 2398 16 view .LVU1454
2398:Src/ff.c      **** 		} else {
 4369              		.loc 1 2398 28 is_stmt 0 view .LVU1455
 4370 0024 4FF0FF33 		mov	r3, #-1
 4371              	.LVL537:
2398:Src/ff.c      **** 		} else {
 4372              		.loc 1 2398 28 view .LVU1456
 4373 0028 E362     		str	r3, [r4, #44]
2398:Src/ff.c      **** 		} else {
 4374              		.loc 1 2398 8 view .LVU1457
 4375 002a FF27     		movs	r7, #255
 4376              	.LVL538:
 4377              	.L331:
2420:Src/ff.c      **** 	} while (res == FR_OK);
 4378              		.loc 1 2420 3 is_stmt 1 view .LVU1458
2420:Src/ff.c      **** 	} while (res == FR_OK);
 4379              		.loc 1 2420 9 is_stmt 0 view .LVU1459
 4380 002c 0021     		movs	r1, #0
 4381 002e 2046     		mov	r0, r4
 4382 0030 FFF7FEFF 		bl	dir_next
 4383              	.LVL539:
2421:Src/ff.c      **** 
 4384              		.loc 1 2421 10 is_stmt 1 view .LVU1460
2421:Src/ff.c      **** 
 4385              		.loc 1 2421 2 is_stmt 0 view .LVU1461
 4386 0034 0646     		mov	r6, r0
 4387 0036 0028     		cmp	r0, #0
 4388 0038 52D1     		bne	.L328
 4389              	.LVL540:
 4390              	.L336:
2390:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 4391              		.loc 1 2390 2 is_stmt 1 view .LVU1462
2391:Src/ff.c      **** 		if (res != FR_OK) break;
 4392              		.loc 1 2391 3 view .LVU1463
2391:Src/ff.c      **** 		if (res != FR_OK) break;
 4393              		.loc 1 2391 9 is_stmt 0 view .LVU1464
 4394 003a A169     		ldr	r1, [r4, #24]
 4395 003c 4046     		mov	r0, r8
 4396              	.LVL541:
2391:Src/ff.c      **** 		if (res != FR_OK) break;
 4397              		.loc 1 2391 9 view .LVU1465
 4398 003e FFF7FEFF 		bl	move_window
 4399              	.LVL542:
2392:Src/ff.c      **** 		c = dp->dir[DIR_Name];
 4400              		.loc 1 2392 3 is_stmt 1 view .LVU1466
2392:Src/ff.c      **** 		c = dp->dir[DIR_Name];
 4401              		.loc 1 2392 6 is_stmt 0 view .LVU1467
 4402 0042 0646     		mov	r6, r0
 4403 0044 0028     		cmp	r0, #0
 4404 0046 4BD1     		bne	.L328
2393:Src/ff.c      **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 162


 4405              		.loc 1 2393 3 is_stmt 1 view .LVU1468
2393:Src/ff.c      **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 4406              		.loc 1 2393 9 is_stmt 0 view .LVU1469
 4407 0048 E569     		ldr	r5, [r4, #28]
2393:Src/ff.c      **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 4408              		.loc 1 2393 5 view .LVU1470
 4409 004a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 4410              	.LVL543:
2394:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 4411              		.loc 1 2394 3 is_stmt 1 view .LVU1471
2394:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 4412              		.loc 1 2394 6 is_stmt 0 view .LVU1472
 4413 004c 002B     		cmp	r3, #0
 4414 004e 46D0     		beq	.L337
2396:Src/ff.c      **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 4415              		.loc 1 2396 3 is_stmt 1 view .LVU1473
2396:Src/ff.c      **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 4416              		.loc 1 2396 29 is_stmt 0 view .LVU1474
 4417 0050 E97A     		ldrb	r1, [r5, #11]	@ zero_extendqisi2
2396:Src/ff.c      **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 4418              		.loc 1 2396 20 view .LVU1475
 4419 0052 01F03F02 		and	r2, r1, #63
 4420              	.LVL544:
2396:Src/ff.c      **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 4421              		.loc 1 2396 16 view .LVU1476
 4422 0056 A271     		strb	r2, [r4, #6]
2397:Src/ff.c      **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4423              		.loc 1 2397 3 is_stmt 1 view .LVU1477
2397:Src/ff.c      **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4424              		.loc 1 2397 6 is_stmt 0 view .LVU1478
 4425 0058 E52B     		cmp	r3, #229
 4426 005a E3D0     		beq	.L329
2397:Src/ff.c      **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4427              		.loc 1 2397 17 discriminator 1 view .LVU1479
 4428 005c 11F0080F 		tst	r1, #8
 4429 0060 01D0     		beq	.L330
2397:Src/ff.c      **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4430              		.loc 1 2397 34 discriminator 2 view .LVU1480
 4431 0062 0F2A     		cmp	r2, #15
 4432 0064 DED1     		bne	.L329
 4433              	.L330:
2400:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 4434              		.loc 1 2400 4 is_stmt 1 view .LVU1481
2400:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 4435              		.loc 1 2400 7 is_stmt 0 view .LVU1482
 4436 0066 0F2A     		cmp	r2, #15
 4437 0068 16D0     		beq	.L342
2411:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 4438              		.loc 1 2411 5 is_stmt 1 view .LVU1483
2411:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 4439              		.loc 1 2411 8 is_stmt 0 view .LVU1484
 4440 006a 27B9     		cbnz	r7, .L334
2411:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 4441              		.loc 1 2411 28 discriminator 1 view .LVU1485
 4442 006c 2846     		mov	r0, r5
 4443              	.LVL545:
2411:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 163


 4444              		.loc 1 2411 28 discriminator 1 view .LVU1486
 4445 006e FFF7FEFF 		bl	sum_sfn
 4446              	.LVL546:
2411:Src/ff.c      **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 4447              		.loc 1 2411 18 discriminator 1 view .LVU1487
 4448 0072 4845     		cmp	r0, r9
 4449 0074 34D0     		beq	.L328
 4450              	.L334:
2412:Src/ff.c      **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4451              		.loc 1 2412 5 is_stmt 1 view .LVU1488
2412:Src/ff.c      **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4452              		.loc 1 2412 17 is_stmt 0 view .LVU1489
 4453 0076 94F82B30 		ldrb	r3, [r4, #43]	@ zero_extendqisi2
2412:Src/ff.c      **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4454              		.loc 1 2412 8 view .LVU1490
 4455 007a 13F0010F 		tst	r3, #1
 4456 007e 06D1     		bne	.L335
2412:Src/ff.c      **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4457              		.loc 1 2412 41 discriminator 1 view .LVU1491
 4458 0080 0B22     		movs	r2, #11
 4459 0082 04F12001 		add	r1, r4, #32
 4460 0086 2846     		mov	r0, r5
 4461 0088 FFF7FEFF 		bl	memcmp
 4462              	.LVL547:
2412:Src/ff.c      **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4463              		.loc 1 2412 37 discriminator 1 view .LVU1492
 4464 008c 40B3     		cbz	r0, .L328
 4465              	.L335:
2413:Src/ff.c      **** 			}
 4466              		.loc 1 2413 5 is_stmt 1 view .LVU1493
 4467              	.LVL548:
2413:Src/ff.c      **** 			}
 4468              		.loc 1 2413 17 view .LVU1494
2413:Src/ff.c      **** 			}
 4469              		.loc 1 2413 29 is_stmt 0 view .LVU1495
 4470 008e 4FF0FF33 		mov	r3, #-1
 4471 0092 E362     		str	r3, [r4, #44]
2413:Src/ff.c      **** 			}
 4472              		.loc 1 2413 9 view .LVU1496
 4473 0094 FF27     		movs	r7, #255
 4474 0096 C9E7     		b	.L331
 4475              	.LVL549:
 4476              	.L342:
2401:Src/ff.c      **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 4477              		.loc 1 2401 5 is_stmt 1 view .LVU1497
2401:Src/ff.c      **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 4478              		.loc 1 2401 17 is_stmt 0 view .LVU1498
 4479 0098 94F82B20 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 4480              	.LVL550:
2401:Src/ff.c      **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 4481              		.loc 1 2401 8 view .LVU1499
 4482 009c 12F0400F 		tst	r2, #64
 4483 00a0 C4D1     		bne	.L331
2402:Src/ff.c      **** 						sum = dp->dir[LDIR_Chksum];
 4484              		.loc 1 2402 6 is_stmt 1 view .LVU1500
2402:Src/ff.c      **** 						sum = dp->dir[LDIR_Chksum];
 4485              		.loc 1 2402 9 is_stmt 0 view .LVU1501
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 164


 4486 00a2 13F0400F 		tst	r3, #64
 4487 00a6 06D0     		beq	.L333
2403:Src/ff.c      **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 4488              		.loc 1 2403 7 is_stmt 1 view .LVU1502
2403:Src/ff.c      **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 4489              		.loc 1 2403 11 is_stmt 0 view .LVU1503
 4490 00a8 95F80D90 		ldrb	r9, [r5, #13]	@ zero_extendqisi2
 4491              	.LVL551:
2404:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 4492              		.loc 1 2404 7 is_stmt 1 view .LVU1504
2404:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 4493              		.loc 1 2404 9 is_stmt 0 view .LVU1505
 4494 00ac 03F0BF03 		and	r3, r3, #191
 4495              	.LVL552:
2404:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 4496              		.loc 1 2404 25 is_stmt 1 view .LVU1506
2405:Src/ff.c      **** 					}
 4497              		.loc 1 2405 7 view .LVU1507
2405:Src/ff.c      **** 					}
 4498              		.loc 1 2405 23 is_stmt 0 view .LVU1508
 4499 00b0 2269     		ldr	r2, [r4, #16]
2405:Src/ff.c      **** 					}
 4500              		.loc 1 2405 19 view .LVU1509
 4501 00b2 E262     		str	r2, [r4, #44]
2404:Src/ff.c      **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 4502              		.loc 1 2404 29 view .LVU1510
 4503 00b4 1F46     		mov	r7, r3
 4504              	.LVL553:
 4505              	.L333:
2408:Src/ff.c      **** 				}
 4506              		.loc 1 2408 6 is_stmt 1 view .LVU1511
2408:Src/ff.c      **** 				}
 4507              		.loc 1 2408 10 is_stmt 0 view .LVU1512
 4508 00b6 BB42     		cmp	r3, r7
 4509 00b8 01D0     		beq	.L343
2408:Src/ff.c      **** 				}
 4510              		.loc 1 2408 10 view .LVU1513
 4511 00ba FF27     		movs	r7, #255
 4512              	.LVL554:
2408:Src/ff.c      **** 				}
 4513              		.loc 1 2408 10 view .LVU1514
 4514 00bc B6E7     		b	.L331
 4515              	.LVL555:
 4516              	.L343:
2408:Src/ff.c      **** 				}
 4517              		.loc 1 2408 39 discriminator 1 view .LVU1515
 4518 00be 6B7B     		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 4519              	.LVL556:
2408:Src/ff.c      **** 				}
 4520              		.loc 1 2408 22 discriminator 1 view .LVU1516
 4521 00c0 4B45     		cmp	r3, r9
 4522 00c2 01D0     		beq	.L344
2408:Src/ff.c      **** 				}
 4523              		.loc 1 2408 10 view .LVU1517
 4524 00c4 FF27     		movs	r7, #255
 4525              	.LVL557:
2408:Src/ff.c      **** 				}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 165


 4526              		.loc 1 2408 10 view .LVU1518
 4527 00c6 B1E7     		b	.L331
 4528              	.LVL558:
 4529              	.L344:
2408:Src/ff.c      **** 				}
 4530              		.loc 1 2408 56 discriminator 3 view .LVU1519
 4531 00c8 2946     		mov	r1, r5
 4532 00ca D8F80C00 		ldr	r0, [r8, #12]
 4533              	.LVL559:
2408:Src/ff.c      **** 				}
 4534              		.loc 1 2408 56 discriminator 3 view .LVU1520
 4535 00ce FFF7FEFF 		bl	cmp_lfn
 4536              	.LVL560:
2408:Src/ff.c      **** 				}
 4537              		.loc 1 2408 53 discriminator 3 view .LVU1521
 4538 00d2 10B1     		cbz	r0, .L340
2408:Src/ff.c      **** 				}
 4539              		.loc 1 2408 10 discriminator 5 view .LVU1522
 4540 00d4 013F     		subs	r7, r7, #1
 4541              	.LVL561:
2408:Src/ff.c      **** 				}
 4542              		.loc 1 2408 10 discriminator 5 view .LVU1523
 4543 00d6 FFB2     		uxtb	r7, r7
 4544 00d8 A8E7     		b	.L331
 4545              	.LVL562:
 4546              	.L340:
2408:Src/ff.c      **** 				}
 4547              		.loc 1 2408 10 view .LVU1524
 4548 00da FF27     		movs	r7, #255
 4549              	.LVL563:
2408:Src/ff.c      **** 				}
 4550              		.loc 1 2408 10 view .LVU1525
 4551 00dc A6E7     		b	.L331
 4552              	.LVL564:
 4553              	.L337:
2394:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 4554              		.loc 1 2394 21 view .LVU1526
 4555 00de 0426     		movs	r6, #4
 4556              	.LVL565:
 4557              	.L328:
2424:Src/ff.c      **** 
 4558              		.loc 1 2424 1 view .LVU1527
 4559 00e0 3046     		mov	r0, r6
 4560 00e2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
2424:Src/ff.c      **** 
 4561              		.loc 1 2424 1 view .LVU1528
 4562              		.cfi_endproc
 4563              	.LFE28:
 4565              		.section	.text.put_utf,"ax",%progbits
 4566              		.align	1
 4567              		.syntax unified
 4568              		.thumb
 4569              		.thumb_func
 4570              		.fpu softvfp
 4572              	put_utf:
 4573              	.LVL566:
 4574              	.LFB7:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 166


 806:Src/ff.c      **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 4575              		.loc 1 806 1 is_stmt 1 view -0
 4576              		.cfi_startproc
 4577              		@ args = 0, pretend = 0, frame = 0
 4578              		@ frame_needed = 0, uses_anonymous_args = 0
 806:Src/ff.c      **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 4579              		.loc 1 806 1 is_stmt 0 view .LVU1530
 4580 0000 38B5     		push	{r3, r4, r5, lr}
 4581              	.LCFI24:
 4582              		.cfi_def_cfa_offset 16
 4583              		.cfi_offset 3, -16
 4584              		.cfi_offset 4, -12
 4585              		.cfi_offset 5, -8
 4586              		.cfi_offset 14, -4
 4587 0002 0D46     		mov	r5, r1
 4588 0004 1446     		mov	r4, r2
 869:Src/ff.c      **** 
 4589              		.loc 1 869 2 is_stmt 1 view .LVU1531
 871:Src/ff.c      **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 4590              		.loc 1 871 2 view .LVU1532
 871:Src/ff.c      **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 4591              		.loc 1 871 7 is_stmt 0 view .LVU1533
 4592 0006 4FF46971 		mov	r1, #932
 4593              	.LVL567:
 871:Src/ff.c      **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 4594              		.loc 1 871 7 view .LVU1534
 4595 000a FFF7FEFF 		bl	ff_uni2oem
 4596              	.LVL568:
 872:Src/ff.c      **** 		if (szb < 2) return 0;
 4597              		.loc 1 872 2 is_stmt 1 view .LVU1535
 872:Src/ff.c      **** 		if (szb < 2) return 0;
 4598              		.loc 1 872 5 is_stmt 0 view .LVU1536
 4599 000e FF28     		cmp	r0, #255
 4600 0010 09D9     		bls	.L346
 873:Src/ff.c      **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 4601              		.loc 1 873 3 is_stmt 1 view .LVU1537
 873:Src/ff.c      **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 4602              		.loc 1 873 6 is_stmt 0 view .LVU1538
 4603 0012 012C     		cmp	r4, #1
 4604 0014 01D8     		bhi	.L352
 873:Src/ff.c      **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 4605              		.loc 1 873 23 view .LVU1539
 4606 0016 0020     		movs	r0, #0
 4607              	.LVL569:
 4608              	.L345:
 882:Src/ff.c      **** #endif	/* FF_USE_LFN */
 4609              		.loc 1 882 1 view .LVU1540
 4610 0018 38BD     		pop	{r3, r4, r5, pc}
 4611              	.LVL570:
 4612              	.L352:
 874:Src/ff.c      **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 4613              		.loc 1 874 3 is_stmt 1 view .LVU1541
 874:Src/ff.c      **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 4614              		.loc 1 874 12 is_stmt 0 view .LVU1542
 4615 001a C0F30723 		ubfx	r3, r0, #8, #8
 874:Src/ff.c      **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 4616              		.loc 1 874 10 view .LVU1543
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 167


 4617 001e 2B70     		strb	r3, [r5]
 875:Src/ff.c      **** 		return 2;
 4618              		.loc 1 875 3 is_stmt 1 view .LVU1544
 4619              	.LVL571:
 875:Src/ff.c      **** 		return 2;
 4620              		.loc 1 875 10 is_stmt 0 view .LVU1545
 4621 0020 6870     		strb	r0, [r5, #1]
 876:Src/ff.c      **** 	}
 4622              		.loc 1 876 3 is_stmt 1 view .LVU1546
 876:Src/ff.c      **** 	}
 4623              		.loc 1 876 10 is_stmt 0 view .LVU1547
 4624 0022 0220     		movs	r0, #2
 4625              	.LVL572:
 876:Src/ff.c      **** 	}
 4626              		.loc 1 876 10 view .LVU1548
 4627 0024 F8E7     		b	.L345
 4628              	.LVL573:
 4629              	.L346:
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 4630              		.loc 1 878 2 is_stmt 1 view .LVU1549
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 4631              		.loc 1 878 5 is_stmt 0 view .LVU1550
 4632 0026 18B1     		cbz	r0, .L349
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 4633              		.loc 1 878 14 discriminator 2 view .LVU1551
 4634 0028 24B1     		cbz	r4, .L350
 879:Src/ff.c      **** 	return 1;
 4635              		.loc 1 879 2 is_stmt 1 view .LVU1552
 4636              	.LVL574:
 879:Src/ff.c      **** 	return 1;
 4637              		.loc 1 879 9 is_stmt 0 view .LVU1553
 4638 002a 2870     		strb	r0, [r5]
 880:Src/ff.c      **** #endif
 4639              		.loc 1 880 2 is_stmt 1 view .LVU1554
 880:Src/ff.c      **** #endif
 4640              		.loc 1 880 9 is_stmt 0 view .LVU1555
 4641 002c 0120     		movs	r0, #1
 4642              	.LVL575:
 880:Src/ff.c      **** #endif
 4643              		.loc 1 880 9 view .LVU1556
 4644 002e F3E7     		b	.L345
 4645              	.LVL576:
 4646              	.L349:
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 4647              		.loc 1 878 33 view .LVU1557
 4648 0030 0020     		movs	r0, #0
 4649              	.LVL577:
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 4650              		.loc 1 878 33 view .LVU1558
 4651 0032 F1E7     		b	.L345
 4652              	.LVL578:
 4653              	.L350:
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 4654              		.loc 1 878 33 view .LVU1559
 4655 0034 2046     		mov	r0, r4
 4656              	.LVL579:
 878:Src/ff.c      **** 	*buf++ = (TCHAR)wc;					/* Store the character */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 168


 4657              		.loc 1 878 33 view .LVU1560
 4658 0036 EFE7     		b	.L345
 4659              		.cfi_endproc
 4660              	.LFE7:
 4662              		.section	.text.get_fileinfo,"ax",%progbits
 4663              		.align	1
 4664              		.syntax unified
 4665              		.thumb
 4666              		.thumb_func
 4667              		.fpu softvfp
 4669              	get_fileinfo:
 4670              	.LVL580:
 4671              	.LFB31:
2590:Src/ff.c      **** 	UINT si, di;
 4672              		.loc 1 2590 1 is_stmt 1 view -0
 4673              		.cfi_startproc
 4674              		@ args = 0, pretend = 0, frame = 0
 4675              		@ frame_needed = 0, uses_anonymous_args = 0
2590:Src/ff.c      **** 	UINT si, di;
 4676              		.loc 1 2590 1 is_stmt 0 view .LVU1562
 4677 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4678              	.LCFI25:
 4679              		.cfi_def_cfa_offset 32
 4680              		.cfi_offset 3, -32
 4681              		.cfi_offset 4, -28
 4682              		.cfi_offset 5, -24
 4683              		.cfi_offset 6, -20
 4684              		.cfi_offset 7, -16
 4685              		.cfi_offset 8, -12
 4686              		.cfi_offset 9, -8
 4687              		.cfi_offset 14, -4
2591:Src/ff.c      **** #if FF_USE_LFN
 4688              		.loc 1 2591 2 is_stmt 1 view .LVU1563
2593:Src/ff.c      **** 	WCHAR wc, hs;
 4689              		.loc 1 2593 2 view .LVU1564
2594:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 4690              		.loc 1 2594 2 view .LVU1565
2595:Src/ff.c      **** 	UINT nw;
 4691              		.loc 1 2595 2 view .LVU1566
2595:Src/ff.c      **** 	UINT nw;
 4692              		.loc 1 2595 9 is_stmt 0 view .LVU1567
 4693 0004 D0F80090 		ldr	r9, [r0]
 4694              	.LVL581:
2596:Src/ff.c      **** #else
 4695              		.loc 1 2596 2 is_stmt 1 view .LVU1568
2602:Src/ff.c      **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 4696              		.loc 1 2602 2 view .LVU1569
2602:Src/ff.c      **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 4697              		.loc 1 2602 16 is_stmt 0 view .LVU1570
 4698 0008 0023     		movs	r3, #0
 4699 000a 8B75     		strb	r3, [r1, #22]
2603:Src/ff.c      **** 
 4700              		.loc 1 2603 2 is_stmt 1 view .LVU1571
2603:Src/ff.c      **** 
 4701              		.loc 1 2603 8 is_stmt 0 view .LVU1572
 4702 000c 8369     		ldr	r3, [r0, #24]
2603:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 169


 4703              		.loc 1 2603 5 view .LVU1573
 4704 000e 002B     		cmp	r3, #0
 4705 0010 72D0     		beq	.L353
 4706 0012 0546     		mov	r5, r0
 4707 0014 0C46     		mov	r4, r1
2637:Src/ff.c      **** 			si = di = 0;
 4708              		.loc 1 2637 3 is_stmt 1 view .LVU1574
2637:Src/ff.c      **** 			si = di = 0;
 4709              		.loc 1 2637 9 is_stmt 0 view .LVU1575
 4710 0016 C36A     		ldr	r3, [r0, #44]
2637:Src/ff.c      **** 			si = di = 0;
 4711              		.loc 1 2637 6 view .LVU1576
 4712 0018 B3F1FF3F 		cmp	r3, #-1
 4713 001c 2BD0     		beq	.L356
2639:Src/ff.c      **** 			while (fs->lfnbuf[si] != 0) {
 4714              		.loc 1 2639 7 view .LVU1577
 4715 001e 4FF00008 		mov	r8, #0
2638:Src/ff.c      **** 			hs = 0;
 4716              		.loc 1 2638 12 view .LVU1578
 4717 0022 4646     		mov	r6, r8
2638:Src/ff.c      **** 			hs = 0;
 4718              		.loc 1 2638 7 view .LVU1579
 4719 0024 4746     		mov	r7, r8
 4720 0026 0DE0     		b	.L355
 4721              	.LVL582:
 4722              	.L357:
2645:Src/ff.c      **** 				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
 4723              		.loc 1 2645 5 is_stmt 1 view .LVU1580
2645:Src/ff.c      **** 				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
 4724              		.loc 1 2645 10 is_stmt 0 view .LVU1581
 4725 0028 06F11001 		add	r1, r6, #16
 4726 002c 2144     		add	r1, r1, r4
 4727 002e C6F1FF02 		rsb	r2, r6, #255
 4728 0032 0631     		adds	r1, r1, #6
 4729 0034 40EA0840 		orr	r0, r0, r8, lsl #16
 4730              	.LVL583:
2645:Src/ff.c      **** 				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
 4731              		.loc 1 2645 10 view .LVU1582
 4732 0038 FFF7FEFF 		bl	put_utf
 4733              	.LVL584:
2646:Src/ff.c      **** 				di += nw;
 4734              		.loc 1 2646 5 is_stmt 1 view .LVU1583
2646:Src/ff.c      **** 				di += nw;
 4735              		.loc 1 2646 8 is_stmt 0 view .LVU1584
 4736 003c 98B1     		cbz	r0, .L375
2647:Src/ff.c      **** 				hs = 0;
 4737              		.loc 1 2647 5 is_stmt 1 view .LVU1585
2647:Src/ff.c      **** 				hs = 0;
 4738              		.loc 1 2647 8 is_stmt 0 view .LVU1586
 4739 003e 0644     		add	r6, r6, r0
 4740              	.LVL585:
2648:Src/ff.c      **** 			}
 4741              		.loc 1 2648 5 is_stmt 1 view .LVU1587
2648:Src/ff.c      **** 			}
 4742              		.loc 1 2648 8 is_stmt 0 view .LVU1588
 4743 0040 4FF00008 		mov	r8, #0
 4744              	.LVL586:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 170


 4745              	.L355:
2640:Src/ff.c      **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 4746              		.loc 1 2640 10 is_stmt 1 view .LVU1589
2640:Src/ff.c      **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 4747              		.loc 1 2640 13 is_stmt 0 view .LVU1590
 4748 0044 D9F80C30 		ldr	r3, [r9, #12]
2640:Src/ff.c      **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 4749              		.loc 1 2640 21 view .LVU1591
 4750 0048 33F81700 		ldrh	r0, [r3, r7, lsl #1]
2640:Src/ff.c      **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 4751              		.loc 1 2640 10 view .LVU1592
 4752 004c 60B1     		cbz	r0, .L359
2641:Src/ff.c      **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 4753              		.loc 1 2641 5 is_stmt 1 view .LVU1593
2641:Src/ff.c      **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 4754              		.loc 1 2641 23 is_stmt 0 view .LVU1594
 4755 004e 0137     		adds	r7, r7, #1
 4756              	.LVL587:
2642:Src/ff.c      **** 					hs = wc; continue;		/* Get low surrogate */
 4757              		.loc 1 2642 5 is_stmt 1 view .LVU1595
2642:Src/ff.c      **** 					hs = wc; continue;		/* Get low surrogate */
 4758              		.loc 1 2642 8 is_stmt 0 view .LVU1596
 4759 0050 B8F1000F 		cmp	r8, #0
 4760 0054 E8D1     		bne	.L357
2642:Src/ff.c      **** 					hs = wc; continue;		/* Get low surrogate */
 4761              		.loc 1 2642 20 discriminator 1 view .LVU1597
 4762 0056 00F52053 		add	r3, r0, #10240
 4763 005a 9BB2     		uxth	r3, r3
2642:Src/ff.c      **** 					hs = wc; continue;		/* Get low surrogate */
 4764              		.loc 1 2642 17 discriminator 1 view .LVU1598
 4765 005c B3F5006F 		cmp	r3, #2048
 4766 0060 E2D2     		bcs	.L357
2643:Src/ff.c      **** 				}
 4767              		.loc 1 2643 9 view .LVU1599
 4768 0062 8046     		mov	r8, r0
 4769              	.LVL588:
2643:Src/ff.c      **** 				}
 4770              		.loc 1 2643 9 view .LVU1600
 4771 0064 EEE7     		b	.L355
 4772              	.LVL589:
 4773              	.L375:
2646:Src/ff.c      **** 				di += nw;
 4774              		.loc 1 2646 23 view .LVU1601
 4775 0066 0646     		mov	r6, r0
 4776              	.LVL590:
 4777              	.L359:
2650:Src/ff.c      **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 4778              		.loc 1 2650 4 is_stmt 1 view .LVU1602
2650:Src/ff.c      **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 4779              		.loc 1 2650 7 is_stmt 0 view .LVU1603
 4780 0068 B8F1000F 		cmp	r8, #0
 4781 006c 00D0     		beq	.L361
2650:Src/ff.c      **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 4782              		.loc 1 2650 20 view .LVU1604
 4783 006e 0026     		movs	r6, #0
 4784              	.LVL591:
 4785              	.L361:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 171


2651:Src/ff.c      **** 		}
 4786              		.loc 1 2651 4 is_stmt 1 view .LVU1605
2651:Src/ff.c      **** 		}
 4787              		.loc 1 2651 19 is_stmt 0 view .LVU1606
 4788 0070 2644     		add	r6, r6, r4
 4789              	.LVL592:
2651:Src/ff.c      **** 		}
 4790              		.loc 1 2651 19 view .LVU1607
 4791 0072 0023     		movs	r3, #0
 4792 0074 B375     		strb	r3, [r6, #22]
 4793              	.LVL593:
 4794              	.L356:
2671:Src/ff.c      **** #endif
 4795              		.loc 1 2671 18 view .LVU1608
 4796 0076 0022     		movs	r2, #0
 4797 0078 1346     		mov	r3, r2
 4798 007a 05E0     		b	.L362
 4799              	.LVL594:
 4800              	.L364:
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4801              		.loc 1 2660 3 is_stmt 1 view .LVU1609
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4802              		.loc 1 2660 6 is_stmt 0 view .LVU1610
 4803 007c 0929     		cmp	r1, #9
 4804 007e 0ED0     		beq	.L381
 4805              	.L365:
2671:Src/ff.c      **** #endif
 4806              		.loc 1 2671 3 is_stmt 1 view .LVU1611
 4807              	.LVL595:
2671:Src/ff.c      **** #endif
 4808              		.loc 1 2671 22 is_stmt 0 view .LVU1612
 4809 0080 A018     		adds	r0, r4, r2
 4810 0082 4372     		strb	r3, [r0, #9]
2671:Src/ff.c      **** #endif
 4811              		.loc 1 2671 18 view .LVU1613
 4812 0084 0132     		adds	r2, r2, #1
 4813              	.LVL596:
 4814              	.L363:
2671:Src/ff.c      **** #endif
 4815              		.loc 1 2671 18 view .LVU1614
 4816 0086 0B46     		mov	r3, r1
 4817              	.LVL597:
 4818              	.L362:
2656:Src/ff.c      **** 		wc = dp->dir[si++];			/* Get a char */
 4819              		.loc 1 2656 8 is_stmt 1 view .LVU1615
 4820 0088 0A2B     		cmp	r3, #10
 4821 008a 0FD8     		bhi	.L382
2657:Src/ff.c      **** 		if (wc == ' ') continue;	/* Skip padding spaces */
 4822              		.loc 1 2657 3 view .LVU1616
2657:Src/ff.c      **** 		if (wc == ' ') continue;	/* Skip padding spaces */
 4823              		.loc 1 2657 10 is_stmt 0 view .LVU1617
 4824 008c E869     		ldr	r0, [r5, #28]
2657:Src/ff.c      **** 		if (wc == ' ') continue;	/* Skip padding spaces */
 4825              		.loc 1 2657 18 view .LVU1618
 4826 008e 591C     		adds	r1, r3, #1
 4827              	.LVL598:
2657:Src/ff.c      **** 		if (wc == ' ') continue;	/* Skip padding spaces */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 172


 4828              		.loc 1 2657 6 view .LVU1619
 4829 0090 C35C     		ldrb	r3, [r0, r3]	@ zero_extendqisi2
 4830              	.LVL599:
2658:Src/ff.c      **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 4831              		.loc 1 2658 3 is_stmt 1 view .LVU1620
2658:Src/ff.c      **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 4832              		.loc 1 2658 6 is_stmt 0 view .LVU1621
 4833 0092 202B     		cmp	r3, #32
 4834 0094 F7D0     		beq	.L363
2659:Src/ff.c      **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 4835              		.loc 1 2659 3 is_stmt 1 view .LVU1622
2659:Src/ff.c      **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 4836              		.loc 1 2659 6 is_stmt 0 view .LVU1623
 4837 0096 052B     		cmp	r3, #5
 4838 0098 F0D1     		bne	.L364
2659:Src/ff.c      **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 4839              		.loc 1 2659 23 view .LVU1624
 4840 009a E523     		movs	r3, #229
 4841              	.LVL600:
2659:Src/ff.c      **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 4842              		.loc 1 2659 23 view .LVU1625
 4843 009c EEE7     		b	.L364
 4844              	.LVL601:
 4845              	.L381:
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4846              		.loc 1 2660 15 discriminator 1 view .LVU1626
 4847 009e 0B2A     		cmp	r2, #11
 4848 00a0 EED8     		bhi	.L365
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4849              		.loc 1 2660 35 is_stmt 1 discriminator 2 view .LVU1627
 4850              	.LVL602:
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4851              		.loc 1 2660 54 is_stmt 0 discriminator 2 view .LVU1628
 4852 00a2 A018     		adds	r0, r4, r2
 4853 00a4 2E26     		movs	r6, #46
 4854 00a6 4672     		strb	r6, [r0, #9]
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4855              		.loc 1 2660 50 discriminator 2 view .LVU1629
 4856 00a8 0132     		adds	r2, r2, #1
 4857              	.LVL603:
2660:Src/ff.c      **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
 4858              		.loc 1 2660 50 discriminator 2 view .LVU1630
 4859 00aa E9E7     		b	.L365
 4860              	.LVL604:
 4861              	.L382:
2674:Src/ff.c      **** 
 4862              		.loc 1 2674 2 is_stmt 1 view .LVU1631
2674:Src/ff.c      **** 
 4863              		.loc 1 2674 19 is_stmt 0 view .LVU1632
 4864 00ac A318     		adds	r3, r4, r2
 4865              	.LVL605:
2674:Src/ff.c      **** 
 4866              		.loc 1 2674 19 view .LVU1633
 4867 00ae 0021     		movs	r1, #0
 4868 00b0 5972     		strb	r1, [r3, #9]
2676:Src/ff.c      **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 4869              		.loc 1 2676 2 is_stmt 1 view .LVU1634
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 173


2676:Src/ff.c      **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 4870              		.loc 1 2676 16 is_stmt 0 view .LVU1635
 4871 00b2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2676:Src/ff.c      **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 4872              		.loc 1 2676 5 view .LVU1636
 4873 00b4 63B9     		cbnz	r3, .L367
2677:Src/ff.c      **** 			fno->fname[di++] = '?';
 4874              		.loc 1 2677 3 is_stmt 1 view .LVU1637
2677:Src/ff.c      **** 			fno->fname[di++] = '?';
 4875              		.loc 1 2677 6 is_stmt 0 view .LVU1638
 4876 00b6 002A     		cmp	r2, #0
 4877 00b8 39D1     		bne	.L378
2678:Src/ff.c      **** 		} else {
 4878              		.loc 1 2678 4 is_stmt 1 view .LVU1639
2678:Src/ff.c      **** 		} else {
 4879              		.loc 1 2678 17 is_stmt 0 view .LVU1640
 4880 00ba 511C     		adds	r1, r2, #1
 4881              	.LVL606:
2678:Src/ff.c      **** 		} else {
 4882              		.loc 1 2678 21 view .LVU1641
 4883 00bc 2244     		add	r2, r2, r4
 4884 00be 3F23     		movs	r3, #63
 4885 00c0 9375     		strb	r3, [r2, #22]
 4886              	.L369:
2687:Src/ff.c      **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
 4887              		.loc 1 2687 3 is_stmt 1 view .LVU1642
2687:Src/ff.c      **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
 4888              		.loc 1 2687 18 is_stmt 0 view .LVU1643
 4889 00c2 2144     		add	r1, r1, r4
 4890              	.LVL607:
2687:Src/ff.c      **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
 4891              		.loc 1 2687 18 view .LVU1644
 4892 00c4 0023     		movs	r3, #0
 4893 00c6 8B75     		strb	r3, [r1, #22]
2688:Src/ff.c      **** 	}
 4894              		.loc 1 2688 3 is_stmt 1 view .LVU1645
2688:Src/ff.c      **** 	}
 4895              		.loc 1 2688 10 is_stmt 0 view .LVU1646
 4896 00c8 EB69     		ldr	r3, [r5, #28]
2688:Src/ff.c      **** 	}
 4897              		.loc 1 2688 15 view .LVU1647
 4898 00ca 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
2688:Src/ff.c      **** 	}
 4899              		.loc 1 2688 6 view .LVU1648
 4900 00cc 03B9     		cbnz	r3, .L367
2688:Src/ff.c      **** 	}
 4901              		.loc 1 2688 28 is_stmt 1 discriminator 1 view .LVU1649
2688:Src/ff.c      **** 	}
 4902              		.loc 1 2688 44 is_stmt 0 discriminator 1 view .LVU1650
 4903 00ce 6372     		strb	r3, [r4, #9]
 4904              	.L367:
2703:Src/ff.c      **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 4905              		.loc 1 2703 2 is_stmt 1 view .LVU1651
2703:Src/ff.c      **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 4906              		.loc 1 2703 19 is_stmt 0 view .LVU1652
 4907 00d0 EB69     		ldr	r3, [r5, #28]
2703:Src/ff.c      **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 174


 4908              		.loc 1 2703 24 view .LVU1653
 4909 00d2 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
2703:Src/ff.c      **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 4910              		.loc 1 2703 35 view .LVU1654
 4911 00d4 03F03F03 		and	r3, r3, #63
2703:Src/ff.c      **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 4912              		.loc 1 2703 15 view .LVU1655
 4913 00d8 2372     		strb	r3, [r4, #8]
2704:Src/ff.c      **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 4914              		.loc 1 2704 2 is_stmt 1 view .LVU1656
2704:Src/ff.c      **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 4915              		.loc 1 2704 26 is_stmt 0 view .LVU1657
 4916 00da E869     		ldr	r0, [r5, #28]
2704:Src/ff.c      **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 4917              		.loc 1 2704 15 view .LVU1658
 4918 00dc 1C30     		adds	r0, r0, #28
 4919 00de FFF7FEFF 		bl	ld_dword
 4920              	.LVL608:
2704:Src/ff.c      **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 4921              		.loc 1 2704 13 view .LVU1659
 4922 00e2 2060     		str	r0, [r4]
2705:Src/ff.c      **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 4923              		.loc 1 2705 2 is_stmt 1 view .LVU1660
2705:Src/ff.c      **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 4924              		.loc 1 2705 25 is_stmt 0 view .LVU1661
 4925 00e4 E869     		ldr	r0, [r5, #28]
2705:Src/ff.c      **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 4926              		.loc 1 2705 15 view .LVU1662
 4927 00e6 1630     		adds	r0, r0, #22
 4928 00e8 FFF7FEFF 		bl	ld_word
 4929              	.LVL609:
2705:Src/ff.c      **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 4930              		.loc 1 2705 13 view .LVU1663
 4931 00ec E080     		strh	r0, [r4, #6]	@ movhi
2706:Src/ff.c      **** }
 4932              		.loc 1 2706 2 is_stmt 1 view .LVU1664
2706:Src/ff.c      **** }
 4933              		.loc 1 2706 25 is_stmt 0 view .LVU1665
 4934 00ee E869     		ldr	r0, [r5, #28]
2706:Src/ff.c      **** }
 4935              		.loc 1 2706 15 view .LVU1666
 4936 00f0 1830     		adds	r0, r0, #24
 4937 00f2 FFF7FEFF 		bl	ld_word
 4938              	.LVL610:
2706:Src/ff.c      **** }
 4939              		.loc 1 2706 13 view .LVU1667
 4940 00f6 A080     		strh	r0, [r4, #4]	@ movhi
 4941              	.LVL611:
 4942              	.L353:
2707:Src/ff.c      **** 
 4943              		.loc 1 2707 1 view .LVU1668
 4944 00f8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4945              	.LVL612:
 4946              	.L383:
2682:Src/ff.c      **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 4947              		.loc 1 2682 24 view .LVU1669
 4948 00fc 1026     		movs	r6, #16
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 175


 4949              	.LVL613:
2682:Src/ff.c      **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 4950              		.loc 1 2682 24 view .LVU1670
 4951 00fe 0AE0     		b	.L370
 4952              	.LVL614:
 4953              	.L371:
2684:Src/ff.c      **** 			}
 4954              		.loc 1 2684 5 is_stmt 1 discriminator 2 view .LVU1671
2684:Src/ff.c      **** 			}
 4955              		.loc 1 2684 20 is_stmt 0 discriminator 2 view .LVU1672
 4956 0100 6218     		adds	r2, r4, r1
 4957 0102 9375     		strb	r3, [r2, #22]
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 4958              		.loc 1 2680 55 is_stmt 1 discriminator 2 view .LVU1673
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 4959              		.loc 1 2680 57 is_stmt 0 discriminator 2 view .LVU1674
 4960 0104 0130     		adds	r0, r0, #1
 4961              	.LVL615:
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 4962              		.loc 1 2680 63 discriminator 2 view .LVU1675
 4963 0106 0131     		adds	r1, r1, #1
 4964              	.LVL616:
 4965              	.L368:
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 4966              		.loc 1 2680 37 is_stmt 1 discriminator 1 view .LVU1676
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 4967              		.loc 1 2680 49 is_stmt 0 discriminator 1 view .LVU1677
 4968 0108 2318     		adds	r3, r4, r0
 4969 010a 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 4970              		.loc 1 2680 4 discriminator 1 view .LVU1678
 4971 010c 002B     		cmp	r3, #0
 4972 010e D8D0     		beq	.L369
2681:Src/ff.c      **** 				if (wc == '.') lcf = NS_EXT;
 4973              		.loc 1 2681 5 is_stmt 1 view .LVU1679
2681:Src/ff.c      **** 				if (wc == '.') lcf = NS_EXT;
 4974              		.loc 1 2681 8 is_stmt 0 view .LVU1680
 4975 0110 9BB2     		uxth	r3, r3
 4976              	.LVL617:
2682:Src/ff.c      **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 4977              		.loc 1 2682 5 is_stmt 1 view .LVU1681
2682:Src/ff.c      **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 4978              		.loc 1 2682 8 is_stmt 0 view .LVU1682
 4979 0112 2E2B     		cmp	r3, #46
 4980 0114 F2D0     		beq	.L383
 4981              	.LVL618:
 4982              	.L370:
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4983              		.loc 1 2683 5 is_stmt 1 view .LVU1683
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4984              		.loc 1 2683 9 is_stmt 0 view .LVU1684
 4985 0116 A3F14102 		sub	r2, r3, #65
 4986 011a 92B2     		uxth	r2, r2
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4987              		.loc 1 2683 8 view .LVU1685
 4988 011c 192A     		cmp	r2, #25
 4989 011e EFD8     		bhi	.L371
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 176


2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4990              		.loc 1 2683 27 discriminator 1 view .LVU1686
 4991 0120 EA69     		ldr	r2, [r5, #28]
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4992              		.loc 1 2683 32 discriminator 1 view .LVU1687
 4993 0122 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4994              		.loc 1 2683 21 discriminator 1 view .LVU1688
 4995 0124 3242     		tst	r2, r6
 4996 0126 EBD0     		beq	.L371
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4997              		.loc 1 2683 52 is_stmt 1 discriminator 2 view .LVU1689
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 4998              		.loc 1 2683 55 is_stmt 0 discriminator 2 view .LVU1690
 4999 0128 2033     		adds	r3, r3, #32
 5000              	.LVL619:
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 5001              		.loc 1 2683 55 discriminator 2 view .LVU1691
 5002 012a 9BB2     		uxth	r3, r3
 5003              	.LVL620:
2683:Src/ff.c      **** 				fno->fname[di] = (TCHAR)wc;
 5004              		.loc 1 2683 55 discriminator 2 view .LVU1692
 5005 012c E8E7     		b	.L371
 5006              	.LVL621:
 5007              	.L378:
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 5008              		.loc 1 2680 26 view .LVU1693
 5009 012e 0826     		movs	r6, #8
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 5010              		.loc 1 2680 17 view .LVU1694
 5011 0130 0021     		movs	r1, #0
2680:Src/ff.c      **** 				wc = (WCHAR)fno->altname[si];
 5012              		.loc 1 2680 12 view .LVU1695
 5013 0132 0846     		mov	r0, r1
 5014 0134 E8E7     		b	.L368
 5015              		.cfi_endproc
 5016              	.LFE31:
 5018              		.section	.text.tchar2uni,"ax",%progbits
 5019              		.align	1
 5020              		.syntax unified
 5021              		.thumb
 5022              		.thumb_func
 5023              		.fpu softvfp
 5025              	tchar2uni:
 5026              	.LVL622:
 5027              	.LFB6:
 735:Src/ff.c      **** 	DWORD uc;
 5028              		.loc 1 735 1 is_stmt 1 view -0
 5029              		.cfi_startproc
 5030              		@ args = 0, pretend = 0, frame = 0
 5031              		@ frame_needed = 0, uses_anonymous_args = 0
 735:Src/ff.c      **** 	DWORD uc;
 5032              		.loc 1 735 1 is_stmt 0 view .LVU1697
 5033 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5034              	.LCFI26:
 5035              		.cfi_def_cfa_offset 24
 5036              		.cfi_offset 3, -24
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 177


 5037              		.cfi_offset 4, -20
 5038              		.cfi_offset 5, -16
 5039              		.cfi_offset 6, -12
 5040              		.cfi_offset 7, -8
 5041              		.cfi_offset 14, -4
 5042 0002 0546     		mov	r5, r0
 736:Src/ff.c      **** 	const TCHAR *p = *str;
 5043              		.loc 1 736 2 is_stmt 1 view .LVU1698
 737:Src/ff.c      **** 
 5044              		.loc 1 737 2 view .LVU1699
 737:Src/ff.c      **** 
 5045              		.loc 1 737 15 is_stmt 0 view .LVU1700
 5046 0004 0768     		ldr	r7, [r0]
 5047              	.LVL623:
 779:Src/ff.c      **** 	WCHAR wc;
 5048              		.loc 1 779 2 is_stmt 1 view .LVU1701
 780:Src/ff.c      **** 
 5049              		.loc 1 780 2 view .LVU1702
 782:Src/ff.c      **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 5050              		.loc 1 782 2 view .LVU1703
 782:Src/ff.c      **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 5051              		.loc 1 782 15 is_stmt 0 view .LVU1704
 5052 0006 3E46     		mov	r6, r7
 5053              	.LVL624:
 782:Src/ff.c      **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 5054              		.loc 1 782 13 view .LVU1705
 5055 0008 16F8010B 		ldrb	r0, [r6], #1	@ zero_extendqisi2
 5056              	.LVL625:
 782:Src/ff.c      **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 5057              		.loc 1 782 5 view .LVU1706
 5058 000c 84B2     		uxth	r4, r0
 5059              	.LVL626:
 783:Src/ff.c      **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 5060              		.loc 1 783 2 is_stmt 1 view .LVU1707
 783:Src/ff.c      **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 5061              		.loc 1 783 6 is_stmt 0 view .LVU1708
 5062 000e FFF7FEFF 		bl	dbc_1st
 5063              	.LVL627:
 783:Src/ff.c      **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 5064              		.loc 1 783 5 view .LVU1709
 5065 0012 40B1     		cbz	r0, .L385
 784:Src/ff.c      **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 5066              		.loc 1 784 3 is_stmt 1 view .LVU1710
 784:Src/ff.c      **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 5067              		.loc 1 784 15 is_stmt 0 view .LVU1711
 5068 0014 BE1C     		adds	r6, r7, #2
 5069              	.LVL628:
 784:Src/ff.c      **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 5070              		.loc 1 784 5 view .LVU1712
 5071 0016 7F78     		ldrb	r7, [r7, #1]	@ zero_extendqisi2
 5072              	.LVL629:
 785:Src/ff.c      **** 		wc = (wc << 8) + b;		/* Make a DBC */
 5073              		.loc 1 785 3 is_stmt 1 view .LVU1713
 785:Src/ff.c      **** 		wc = (wc << 8) + b;		/* Make a DBC */
 5074              		.loc 1 785 8 is_stmt 0 view .LVU1714
 5075 0018 3846     		mov	r0, r7
 5076 001a FFF7FEFF 		bl	dbc_2nd
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 178


 5077              	.LVL630:
 785:Src/ff.c      **** 		wc = (wc << 8) + b;		/* Make a DBC */
 5078              		.loc 1 785 6 view .LVU1715
 5079 001e 88B1     		cbz	r0, .L388
 786:Src/ff.c      **** 	}
 5080              		.loc 1 786 3 is_stmt 1 view .LVU1716
 786:Src/ff.c      **** 	}
 5081              		.loc 1 786 6 is_stmt 0 view .LVU1717
 5082 0020 07EB0424 		add	r4, r7, r4, lsl #8
 5083              	.LVL631:
 786:Src/ff.c      **** 	}
 5084              		.loc 1 786 6 view .LVU1718
 5085 0024 A4B2     		uxth	r4, r4
 5086              	.LVL632:
 5087              	.L385:
 788:Src/ff.c      **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 5088              		.loc 1 788 2 is_stmt 1 view .LVU1719
 788:Src/ff.c      **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 5089              		.loc 1 788 5 is_stmt 0 view .LVU1720
 5090 0026 14B9     		cbnz	r4, .L391
 5091              	.LVL633:
 5092              	.L387:
 792:Src/ff.c      **** 
 5093              		.loc 1 792 2 is_stmt 1 view .LVU1721
 792:Src/ff.c      **** 
 5094              		.loc 1 792 5 is_stmt 0 view .LVU1722
 5095 0028 2046     		mov	r0, r4
 5096              	.LVL634:
 795:Src/ff.c      **** 	return uc;
 5097              		.loc 1 795 2 is_stmt 1 view .LVU1723
 795:Src/ff.c      **** 	return uc;
 5098              		.loc 1 795 7 is_stmt 0 view .LVU1724
 5099 002a 2E60     		str	r6, [r5]
 796:Src/ff.c      **** }
 5100              		.loc 1 796 2 is_stmt 1 view .LVU1725
 5101              	.LVL635:
 5102              	.L384:
 797:Src/ff.c      **** 
 5103              		.loc 1 797 1 is_stmt 0 view .LVU1726
 5104 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5105              	.LVL636:
 5106              	.L391:
 789:Src/ff.c      **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 5107              		.loc 1 789 3 is_stmt 1 view .LVU1727
 789:Src/ff.c      **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 5108              		.loc 1 789 8 is_stmt 0 view .LVU1728
 5109 002e 4FF46971 		mov	r1, #932
 5110 0032 2046     		mov	r0, r4
 5111 0034 FFF7FEFF 		bl	ff_oem2uni
 5112              	.LVL637:
 790:Src/ff.c      **** 	}
 5113              		.loc 1 790 3 is_stmt 1 view .LVU1729
 790:Src/ff.c      **** 	}
 5114              		.loc 1 790 6 is_stmt 0 view .LVU1730
 5115 0038 0446     		mov	r4, r0
 5116 003a 0028     		cmp	r0, #0
 5117 003c F4D1     		bne	.L387
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 179


 790:Src/ff.c      **** 	}
 5118              		.loc 1 790 23 view .LVU1731
 5119 003e 4FF0FF30 		mov	r0, #-1
 5120              	.LVL638:
 790:Src/ff.c      **** 	}
 5121              		.loc 1 790 23 view .LVU1732
 5122 0042 F3E7     		b	.L384
 5123              	.LVL639:
 5124              	.L388:
 785:Src/ff.c      **** 		wc = (wc << 8) + b;		/* Make a DBC */
 5125              		.loc 1 785 27 view .LVU1733
 5126 0044 4FF0FF30 		mov	r0, #-1
 5127 0048 F0E7     		b	.L384
 5128              		.cfi_endproc
 5129              	.LFE6:
 5131              		.section	.rodata.create_name.str1.4,"aMS",%progbits,1
 5132              		.align	2
 5133              	.LC1:
 5134 0000 2A3A3C3E 		.ascii	"*:<>|\"?\177\000"
 5134      7C223F7F 
 5134      00
 5135 0009 000000   		.align	2
 5136              	.LC2:
 5137 000c 2B2C3B3D 		.ascii	"+,;=[]\000"
 5137      5B5D00
 5138              		.section	.text.create_name,"ax",%progbits
 5139              		.align	1
 5140              		.syntax unified
 5141              		.thumb
 5142              		.thumb_func
 5143              		.fpu softvfp
 5145              	create_name:
 5146              	.LVL640:
 5147              	.LFB32:
2805:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 5148              		.loc 1 2805 1 is_stmt 1 view -0
 5149              		.cfi_startproc
 5150              		@ args = 0, pretend = 0, frame = 16
 5151              		@ frame_needed = 0, uses_anonymous_args = 0
2805:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 5152              		.loc 1 2805 1 is_stmt 0 view .LVU1735
 5153 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5154              	.LCFI27:
 5155              		.cfi_def_cfa_offset 36
 5156              		.cfi_offset 4, -36
 5157              		.cfi_offset 5, -32
 5158              		.cfi_offset 6, -28
 5159              		.cfi_offset 7, -24
 5160              		.cfi_offset 8, -20
 5161              		.cfi_offset 9, -16
 5162              		.cfi_offset 10, -12
 5163              		.cfi_offset 11, -8
 5164              		.cfi_offset 14, -4
 5165 0004 85B0     		sub	sp, sp, #20
 5166              	.LCFI28:
 5167              		.cfi_def_cfa_offset 56
 5168 0006 0646     		mov	r6, r0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 180


 5169 0008 8946     		mov	r9, r1
2807:Src/ff.c      **** 	WCHAR wc, *lfn;
 5170              		.loc 1 2807 2 is_stmt 1 view .LVU1736
2808:Src/ff.c      **** 	DWORD uc;
 5171              		.loc 1 2808 2 view .LVU1737
2809:Src/ff.c      **** 	UINT i, ni, si, di;
 5172              		.loc 1 2809 2 view .LVU1738
2810:Src/ff.c      **** 	const TCHAR *p;
 5173              		.loc 1 2810 2 view .LVU1739
2811:Src/ff.c      **** 
 5174              		.loc 1 2811 2 view .LVU1740
2815:Src/ff.c      **** 	for (;;) {
 5175              		.loc 1 2815 2 view .LVU1741
2815:Src/ff.c      **** 	for (;;) {
 5176              		.loc 1 2815 6 is_stmt 0 view .LVU1742
 5177 000a 0B68     		ldr	r3, [r1]
2815:Src/ff.c      **** 	for (;;) {
 5178              		.loc 1 2815 4 view .LVU1743
 5179 000c 0393     		str	r3, [sp, #12]
2815:Src/ff.c      **** 	for (;;) {
 5180              		.loc 1 2815 13 is_stmt 1 view .LVU1744
2815:Src/ff.c      **** 	for (;;) {
 5181              		.loc 1 2815 26 is_stmt 0 view .LVU1745
 5182 000e 0368     		ldr	r3, [r0]
2815:Src/ff.c      **** 	for (;;) {
 5183              		.loc 1 2815 17 view .LVU1746
 5184 0010 DD68     		ldr	r5, [r3, #12]
 5185              	.LVL641:
2815:Src/ff.c      **** 	for (;;) {
 5186              		.loc 1 2815 39 is_stmt 1 view .LVU1747
2815:Src/ff.c      **** 	for (;;) {
 5187              		.loc 1 2815 42 is_stmt 0 view .LVU1748
 5188 0012 0024     		movs	r4, #0
 5189 0014 05E0     		b	.L397
 5190              	.LVL642:
 5191              	.L396:
2823:Src/ff.c      **** 		lfn[di++] = wc;				/* Store the Unicode character */
 5192              		.loc 1 2823 3 is_stmt 1 view .LVU1749
2823:Src/ff.c      **** 		lfn[di++] = wc;				/* Store the Unicode character */
 5193              		.loc 1 2823 6 is_stmt 0 view .LVU1750
 5194 0016 7F2C     		cmp	r4, #127
 5195 0018 00F20A81 		bhi	.L436
2824:Src/ff.c      **** 	}
 5196              		.loc 1 2824 3 is_stmt 1 view .LVU1751
 5197              	.LVL643:
2824:Src/ff.c      **** 	}
 5198              		.loc 1 2824 13 is_stmt 0 view .LVU1752
 5199 001c 25F81470 		strh	r7, [r5, r4, lsl #1]	@ movhi
2816:Src/ff.c      **** 		uc = tchar2uni(&p);			/* Get a character */
 5200              		.loc 1 2816 8 is_stmt 1 view .LVU1753
2824:Src/ff.c      **** 	}
 5201              		.loc 1 2824 9 is_stmt 0 view .LVU1754
 5202 0020 0134     		adds	r4, r4, #1
 5203              	.LVL644:
 5204              	.L397:
2816:Src/ff.c      **** 		uc = tchar2uni(&p);			/* Get a character */
 5205              		.loc 1 2816 2 is_stmt 1 view .LVU1755
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 181


2817:Src/ff.c      **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 5206              		.loc 1 2817 3 view .LVU1756
2817:Src/ff.c      **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 5207              		.loc 1 2817 8 is_stmt 0 view .LVU1757
 5208 0022 03A8     		add	r0, sp, #12
 5209 0024 FFF7FEFF 		bl	tchar2uni
 5210              	.LVL645:
2818:Src/ff.c      **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 5211              		.loc 1 2818 3 is_stmt 1 view .LVU1758
2818:Src/ff.c      **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 5212              		.loc 1 2818 6 is_stmt 0 view .LVU1759
 5213 0028 B0F1FF3F 		cmp	r0, #-1
 5214 002c 00F0FE80 		beq	.L434
2819:Src/ff.c      **** 		wc = (WCHAR)uc;
 5215              		.loc 1 2819 3 is_stmt 1 view .LVU1760
2819:Src/ff.c      **** 		wc = (WCHAR)uc;
 5216              		.loc 1 2819 6 is_stmt 0 view .LVU1761
 5217 0030 B0F5803F 		cmp	r0, #65536
 5218 0034 03D3     		bcc	.L394
2819:Src/ff.c      **** 		wc = (WCHAR)uc;
 5219              		.loc 1 2819 22 is_stmt 1 discriminator 1 view .LVU1762
 5220              	.LVL646:
2819:Src/ff.c      **** 		wc = (WCHAR)uc;
 5221              		.loc 1 2819 34 is_stmt 0 discriminator 1 view .LVU1763
 5222 0036 030C     		lsrs	r3, r0, #16
2819:Src/ff.c      **** 		wc = (WCHAR)uc;
 5223              		.loc 1 2819 32 discriminator 1 view .LVU1764
 5224 0038 25F81430 		strh	r3, [r5, r4, lsl #1]	@ movhi
2819:Src/ff.c      **** 		wc = (WCHAR)uc;
 5225              		.loc 1 2819 28 discriminator 1 view .LVU1765
 5226 003c 0134     		adds	r4, r4, #1
 5227              	.LVL647:
 5228              	.L394:
2820:Src/ff.c      **** 		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 5229              		.loc 1 2820 3 is_stmt 1 view .LVU1766
2820:Src/ff.c      **** 		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 5230              		.loc 1 2820 6 is_stmt 0 view .LVU1767
 5231 003e 87B2     		uxth	r7, r0
 5232              	.LVL648:
2821:Src/ff.c      **** 		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal char
 5233              		.loc 1 2821 3 is_stmt 1 view .LVU1768
2821:Src/ff.c      **** 		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal char
 5234              		.loc 1 2821 6 is_stmt 0 view .LVU1769
 5235 0040 1F2F     		cmp	r7, #31
 5236 0042 0DD9     		bls	.L395
2821:Src/ff.c      **** 		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal char
 5237              		.loc 1 2821 16 discriminator 1 view .LVU1770
 5238 0044 2F2F     		cmp	r7, #47
 5239 0046 0BD0     		beq	.L395
2821:Src/ff.c      **** 		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal char
 5240              		.loc 1 2821 19 discriminator 2 view .LVU1771
 5241 0048 5C2F     		cmp	r7, #92
 5242 004a 09D0     		beq	.L395
2822:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5243              		.loc 1 2822 3 is_stmt 1 view .LVU1772
2822:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5244              		.loc 1 2822 6 is_stmt 0 view .LVU1773
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 182


 5245 004c 7F2F     		cmp	r7, #127
 5246 004e E2D8     		bhi	.L396
2822:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5247              		.loc 1 2822 20 discriminator 1 view .LVU1774
 5248 0050 3946     		mov	r1, r7
 5249 0052 7848     		ldr	r0, .L449
 5250              	.LVL649:
2822:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5251              		.loc 1 2822 20 discriminator 1 view .LVU1775
 5252 0054 FFF7FEFF 		bl	strchr
 5253              	.LVL650:
2822:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5254              		.loc 1 2822 17 discriminator 1 view .LVU1776
 5255 0058 0028     		cmp	r0, #0
 5256 005a DCD0     		beq	.L396
2822:Src/ff.c      **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5257              		.loc 1 2822 61 view .LVU1777
 5258 005c 0620     		movs	r0, #6
 5259 005e 96E0     		b	.L393
 5260              	.LVL651:
 5261              	.L395:
2826:Src/ff.c      **** 		cf = NS_LAST;			/* Last segment */
 5262              		.loc 1 2826 2 is_stmt 1 view .LVU1778
2826:Src/ff.c      **** 		cf = NS_LAST;			/* Last segment */
 5263              		.loc 1 2826 5 is_stmt 0 view .LVU1779
 5264 0060 1F2F     		cmp	r7, #31
 5265 0062 07D8     		bhi	.L399
2827:Src/ff.c      **** 	} else {					/* Stopped at a separator */
 5266              		.loc 1 2827 6 view .LVU1780
 5267 0064 4FF00408 		mov	r8, #4
 5268              	.L398:
 5269              	.LVL652:
2833:Src/ff.c      **** 
 5270              		.loc 1 2833 2 is_stmt 1 view .LVU1781
2833:Src/ff.c      **** 
 5271              		.loc 1 2833 8 is_stmt 0 view .LVU1782
 5272 0068 039B     		ldr	r3, [sp, #12]
 5273 006a C9F80030 		str	r3, [r9]
2846:Src/ff.c      **** 		wc = lfn[di - 1];
 5274              		.loc 1 2846 2 is_stmt 1 view .LVU1783
2846:Src/ff.c      **** 		wc = lfn[di - 1];
 5275              		.loc 1 2846 8 is_stmt 0 view .LVU1784
 5276 006e 10E0     		b	.L401
 5277              	.LVL653:
 5278              	.L400:
2829:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
 5279              		.loc 1 2829 27 is_stmt 1 discriminator 4 view .LVU1785
2829:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
 5280              		.loc 1 2829 28 is_stmt 0 discriminator 4 view .LVU1786
 5281 0070 0133     		adds	r3, r3, #1
 5282 0072 0393     		str	r3, [sp, #12]
 5283              	.L399:
2829:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
 5284              		.loc 1 2829 9 is_stmt 1 discriminator 1 view .LVU1787
2829:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
 5285              		.loc 1 2829 10 is_stmt 0 discriminator 1 view .LVU1788
 5286 0074 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 183


 5287 0076 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
2829:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
 5288              		.loc 1 2829 9 discriminator 1 view .LVU1789
 5289 0078 2F2A     		cmp	r2, #47
 5290 007a F9D0     		beq	.L400
2829:Src/ff.c      **** 		cf = 0;					/* Next segment may follow */
 5291              		.loc 1 2829 10 discriminator 3 view .LVU1790
 5292 007c 5C2A     		cmp	r2, #92
 5293 007e F7D0     		beq	.L400
2830:Src/ff.c      **** 		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 5294              		.loc 1 2830 3 is_stmt 1 view .LVU1791
 5295              	.LVL654:
2831:Src/ff.c      **** 	}
 5296              		.loc 1 2831 3 view .LVU1792
2831:Src/ff.c      **** 	}
 5297              		.loc 1 2831 6 is_stmt 0 view .LVU1793
 5298 0080 1F2A     		cmp	r2, #31
 5299 0082 02D9     		bls	.L438
2830:Src/ff.c      **** 		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 5300              		.loc 1 2830 6 view .LVU1794
 5301 0084 4FF00008 		mov	r8, #0
 5302 0088 EEE7     		b	.L398
 5303              	.L438:
2831:Src/ff.c      **** 	}
 5304              		.loc 1 2831 28 view .LVU1795
 5305 008a 4FF00408 		mov	r8, #4
 5306 008e EBE7     		b	.L398
 5307              	.LVL655:
 5308              	.L402:
2849:Src/ff.c      **** 	}
 5309              		.loc 1 2849 3 is_stmt 1 view .LVU1796
2849:Src/ff.c      **** 	}
 5310              		.loc 1 2849 5 is_stmt 0 view .LVU1797
 5311 0090 013C     		subs	r4, r4, #1
 5312              	.LVL656:
 5313              	.L401:
2846:Src/ff.c      **** 		wc = lfn[di - 1];
 5314              		.loc 1 2846 8 is_stmt 1 view .LVU1798
 5315 0092 44B1     		cbz	r4, .L403
2847:Src/ff.c      **** 		if (wc != ' ' && wc != '.') break;
 5316              		.loc 1 2847 3 view .LVU1799
2847:Src/ff.c      **** 		if (wc != ' ' && wc != '.') break;
 5317              		.loc 1 2847 11 is_stmt 0 view .LVU1800
 5318 0094 04F10043 		add	r3, r4, #-2147483648
 5319 0098 013B     		subs	r3, r3, #1
2847:Src/ff.c      **** 		if (wc != ' ' && wc != '.') break;
 5320              		.loc 1 2847 6 view .LVU1801
 5321 009a 35F81330 		ldrh	r3, [r5, r3, lsl #1]
 5322              	.LVL657:
2848:Src/ff.c      **** 		di--;
 5323              		.loc 1 2848 3 is_stmt 1 view .LVU1802
2848:Src/ff.c      **** 		di--;
 5324              		.loc 1 2848 6 is_stmt 0 view .LVU1803
 5325 009e 202B     		cmp	r3, #32
 5326 00a0 F6D0     		beq	.L402
2848:Src/ff.c      **** 		di--;
 5327              		.loc 1 2848 17 discriminator 1 view .LVU1804
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 184


 5328 00a2 2E2B     		cmp	r3, #46
 5329 00a4 F4D0     		beq	.L402
 5330              	.LVL658:
 5331              	.L403:
2851:Src/ff.c      **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 5332              		.loc 1 2851 2 is_stmt 1 view .LVU1805
2851:Src/ff.c      **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 5333              		.loc 1 2851 10 is_stmt 0 view .LVU1806
 5334 00a6 0023     		movs	r3, #0
 5335 00a8 25F81430 		strh	r3, [r5, r4, lsl #1]	@ movhi
2852:Src/ff.c      **** 
 5336              		.loc 1 2852 2 is_stmt 1 view .LVU1807
2852:Src/ff.c      **** 
 5337              		.loc 1 2852 5 is_stmt 0 view .LVU1808
 5338 00ac 14B9     		cbnz	r4, .L405
2852:Src/ff.c      **** 
 5339              		.loc 1 2852 22 view .LVU1809
 5340 00ae 0620     		movs	r0, #6
 5341              	.LVL659:
2852:Src/ff.c      **** 
 5342              		.loc 1 2852 22 view .LVU1810
 5343 00b0 6DE0     		b	.L393
 5344              	.LVL660:
 5345              	.L406:
2855:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 5346              		.loc 1 2855 37 is_stmt 1 discriminator 3 view .LVU1811
2855:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 5347              		.loc 1 2855 31 discriminator 3 view .LVU1812
2855:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 5348              		.loc 1 2855 33 is_stmt 0 discriminator 3 view .LVU1813
 5349 00b2 0133     		adds	r3, r3, #1
 5350              	.LVL661:
 5351              	.L405:
2855:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 5352              		.loc 1 2855 15 is_stmt 1 discriminator 1 view .LVU1814
2855:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 5353              		.loc 1 2855 18 is_stmt 0 discriminator 1 view .LVU1815
 5354 00b4 35F81320 		ldrh	r2, [r5, r3, lsl #1]
2855:Src/ff.c      **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 5355              		.loc 1 2855 2 discriminator 1 view .LVU1816
 5356 00b8 202A     		cmp	r2, #32
 5357 00ba FAD0     		beq	.L406
2856:Src/ff.c      **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 5358              		.loc 1 2856 2 is_stmt 1 view .LVU1817
2856:Src/ff.c      **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 5359              		.loc 1 2856 5 is_stmt 0 view .LVU1818
 5360 00bc 0BB9     		cbnz	r3, .L407
2856:Src/ff.c      **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 5361              		.loc 1 2856 13 discriminator 2 view .LVU1819
 5362 00be 2E2A     		cmp	r2, #46
 5363 00c0 01D1     		bne	.L409
 5364              	.L407:
2856:Src/ff.c      **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 5365              		.loc 1 2856 32 is_stmt 1 discriminator 3 view .LVU1820
2856:Src/ff.c      **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 5366              		.loc 1 2856 35 is_stmt 0 discriminator 3 view .LVU1821
 5367 00c2 48F00308 		orr	r8, r8, #3
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 185


 5368              	.LVL662:
 5369              	.L409:
2857:Src/ff.c      **** 
 5370              		.loc 1 2857 8 is_stmt 1 discriminator 1 view .LVU1822
 5371 00c6 44B1     		cbz	r4, .L410
2857:Src/ff.c      **** 
 5372              		.loc 1 2857 22 is_stmt 0 discriminator 2 view .LVU1823
 5373 00c8 04F10042 		add	r2, r4, #-2147483648
 5374 00cc 013A     		subs	r2, r2, #1
 5375 00ce 35F81220 		ldrh	r2, [r5, r2, lsl #1]
2857:Src/ff.c      **** 
 5376              		.loc 1 2857 16 discriminator 2 view .LVU1824
 5377 00d2 2E2A     		cmp	r2, #46
 5378 00d4 01D0     		beq	.L410
2857:Src/ff.c      **** 
 5379              		.loc 1 2857 39 is_stmt 1 discriminator 3 view .LVU1825
2857:Src/ff.c      **** 
 5380              		.loc 1 2857 41 is_stmt 0 discriminator 3 view .LVU1826
 5381 00d6 013C     		subs	r4, r4, #1
 5382              	.LVL663:
2857:Src/ff.c      **** 
 5383              		.loc 1 2857 41 discriminator 3 view .LVU1827
 5384 00d8 F5E7     		b	.L409
 5385              	.L410:
2859:Src/ff.c      **** 	i = b = 0; ni = 8;
 5386              		.loc 1 2859 2 is_stmt 1 view .LVU1828
 5387 00da 4FF02032 		mov	r2, #538976288
 5388 00de 3262     		str	r2, [r6, #32]	@ unaligned
 5389 00e0 7262     		str	r2, [r6, #36]	@ unaligned
 5390 00e2 C6F82720 		str	r2, [r6, #39]	@ unaligned
2860:Src/ff.c      **** 	for (;;) {
 5391              		.loc 1 2860 2 view .LVU1829
 5392              	.LVL664:
2860:Src/ff.c      **** 	for (;;) {
 5393              		.loc 1 2860 13 view .LVU1830
2860:Src/ff.c      **** 	for (;;) {
 5394              		.loc 1 2860 16 is_stmt 0 view .LVU1831
 5395 00e6 4FF0080B 		mov	fp, #8
2860:Src/ff.c      **** 	for (;;) {
 5396              		.loc 1 2860 4 view .LVU1832
 5397 00ea 0022     		movs	r2, #0
 5398 00ec 0192     		str	r2, [sp, #4]
2860:Src/ff.c      **** 	for (;;) {
 5399              		.loc 1 2860 8 view .LVU1833
 5400 00ee 9246     		mov	r10, r2
 5401              	.LVL665:
 5402              	.L412:
2861:Src/ff.c      **** 		wc = lfn[si++];					/* Get an LFN character */
 5403              		.loc 1 2861 2 is_stmt 1 view .LVU1834
2862:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
 5404              		.loc 1 2862 3 view .LVU1835
2862:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
 5405              		.loc 1 2862 14 is_stmt 0 view .LVU1836
 5406 00f0 03F10109 		add	r9, r3, #1
 5407              	.LVL666:
2862:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
 5408              		.loc 1 2862 6 view .LVU1837
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 186


 5409 00f4 35F81370 		ldrh	r7, [r5, r3, lsl #1]
 5410              	.LVL667:
2863:Src/ff.c      **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 5411              		.loc 1 2863 3 is_stmt 1 view .LVU1838
2863:Src/ff.c      **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 5412              		.loc 1 2863 6 is_stmt 0 view .LVU1839
 5413 00f8 47B3     		cbz	r7, .L413
2864:Src/ff.c      **** 			cf |= NS_LOSS | NS_LFN;
 5414              		.loc 1 2864 3 is_stmt 1 view .LVU1840
2864:Src/ff.c      **** 			cf |= NS_LOSS | NS_LFN;
 5415              		.loc 1 2864 6 is_stmt 0 view .LVU1841
 5416 00fa 202F     		cmp	r7, #32
 5417 00fc 19D0     		beq	.L414
2864:Src/ff.c      **** 			cf |= NS_LOSS | NS_LFN;
 5418              		.loc 1 2864 17 discriminator 1 view .LVU1842
 5419 00fe 2E2F     		cmp	r7, #46
 5420 0100 15D0     		beq	.L442
 5421              	.L415:
2869:Src/ff.c      **** 			if (ni == 11) {				/* Name extension overflow? */
 5422              		.loc 1 2869 3 is_stmt 1 view .LVU1843
2869:Src/ff.c      **** 			if (ni == 11) {				/* Name extension overflow? */
 5423              		.loc 1 2869 6 is_stmt 0 view .LVU1844
 5424 0102 019B     		ldr	r3, [sp, #4]
 5425 0104 5B45     		cmp	r3, fp
 5426 0106 18D2     		bcs	.L417
2869:Src/ff.c      **** 			if (ni == 11) {				/* Name extension overflow? */
 5427              		.loc 1 2869 15 discriminator 1 view .LVU1845
 5428 0108 4C45     		cmp	r4, r9
 5429 010a 16D0     		beq	.L417
2880:Src/ff.c      **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
 5430              		.loc 1 2880 3 is_stmt 1 view .LVU1846
2880:Src/ff.c      **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
 5431              		.loc 1 2880 6 is_stmt 0 view .LVU1847
 5432 010c 7F2F     		cmp	r7, #127
 5433 010e 4ED8     		bhi	.L443
 5434              	.L421:
2897:Src/ff.c      **** 			if (i >= ni - 1) {			/* Field overflow? */
 5435              		.loc 1 2897 3 is_stmt 1 view .LVU1848
2897:Src/ff.c      **** 			if (i >= ni - 1) {			/* Field overflow? */
 5436              		.loc 1 2897 6 is_stmt 0 view .LVU1849
 5437 0110 FF2F     		cmp	r7, #255
 5438 0112 5DD9     		bls	.L422
2898:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
 5439              		.loc 1 2898 4 is_stmt 1 view .LVU1850
2898:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
 5440              		.loc 1 2898 16 is_stmt 0 view .LVU1851
 5441 0114 0BF1FF33 		add	r3, fp, #-1
2898:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
 5442              		.loc 1 2898 7 view .LVU1852
 5443 0118 019A     		ldr	r2, [sp, #4]
 5444 011a 9342     		cmp	r3, r2
 5445 011c 52D9     		bls	.L444
2902:Src/ff.c      **** 		} else {						/* SBC */
 5446              		.loc 1 2902 4 is_stmt 1 view .LVU1853
2902:Src/ff.c      **** 		} else {						/* SBC */
 5447              		.loc 1 2902 12 is_stmt 0 view .LVU1854
 5448 011e 0199     		ldr	r1, [sp, #4]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 187


 5449 0120 4B1C     		adds	r3, r1, #1
 5450              	.LVL668:
2902:Src/ff.c      **** 		} else {						/* SBC */
 5451              		.loc 1 2902 18 view .LVU1855
 5452 0122 C7F30722 		ubfx	r2, r7, #8, #8
2902:Src/ff.c      **** 		} else {						/* SBC */
 5453              		.loc 1 2902 16 view .LVU1856
 5454 0126 7118     		adds	r1, r6, r1
 5455 0128 81F82020 		strb	r2, [r1, #32]
 5456 012c 5AE0     		b	.L424
 5457              	.LVL669:
 5458              	.L442:
2864:Src/ff.c      **** 			cf |= NS_LOSS | NS_LFN;
 5459              		.loc 1 2864 31 discriminator 2 view .LVU1857
 5460 012e 4C45     		cmp	r4, r9
 5461 0130 E7D0     		beq	.L415
 5462              	.L414:
2865:Src/ff.c      **** 			continue;
 5463              		.loc 1 2865 4 is_stmt 1 view .LVU1858
2865:Src/ff.c      **** 			continue;
 5464              		.loc 1 2865 7 is_stmt 0 view .LVU1859
 5465 0132 48F00308 		orr	r8, r8, #3
 5466              	.LVL670:
2866:Src/ff.c      **** 		}
 5467              		.loc 1 2866 4 is_stmt 1 view .LVU1860
2862:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
 5468              		.loc 1 2862 14 is_stmt 0 view .LVU1861
 5469 0136 4B46     		mov	r3, r9
2866:Src/ff.c      **** 		}
 5470              		.loc 1 2866 4 view .LVU1862
 5471 0138 DAE7     		b	.L412
 5472              	.L417:
2870:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
 5473              		.loc 1 2870 4 is_stmt 1 view .LVU1863
2870:Src/ff.c      **** 				cf |= NS_LOSS | NS_LFN;
 5474              		.loc 1 2870 7 is_stmt 0 view .LVU1864
 5475 013a BBF10B0F 		cmp	fp, #11
 5476 013e 29D0     		beq	.L445
2874:Src/ff.c      **** 			if (si > di) break;						/* No name extension? */
 5477              		.loc 1 2874 4 is_stmt 1 view .LVU1865
2874:Src/ff.c      **** 			if (si > di) break;						/* No name extension? */
 5478              		.loc 1 2874 7 is_stmt 0 view .LVU1866
 5479 0140 4C45     		cmp	r4, r9
 5480 0142 01D0     		beq	.L420
2874:Src/ff.c      **** 			if (si > di) break;						/* No name extension? */
 5481              		.loc 1 2874 18 is_stmt 1 discriminator 1 view .LVU1867
2874:Src/ff.c      **** 			if (si > di) break;						/* No name extension? */
 5482              		.loc 1 2874 21 is_stmt 0 discriminator 1 view .LVU1868
 5483 0144 48F00308 		orr	r8, r8, #3
 5484              	.LVL671:
 5485              	.L420:
2875:Src/ff.c      **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 5486              		.loc 1 2875 4 is_stmt 1 view .LVU1869
2875:Src/ff.c      **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 5487              		.loc 1 2875 7 is_stmt 0 view .LVU1870
 5488 0148 4C45     		cmp	r4, r9
 5489 014a 26D2     		bcs	.L446
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 188


 5490              	.L413:
2918:Src/ff.c      **** 
 5491              		.loc 1 2918 2 is_stmt 1 view .LVU1871
2918:Src/ff.c      **** 
 5492              		.loc 1 2918 12 is_stmt 0 view .LVU1872
 5493 014c 96F82030 		ldrb	r3, [r6, #32]	@ zero_extendqisi2
2918:Src/ff.c      **** 
 5494              		.loc 1 2918 5 view .LVU1873
 5495 0150 E52B     		cmp	r3, #229
 5496 0152 62D0     		beq	.L447
 5497              	.L428:
2920:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 5498              		.loc 1 2920 2 is_stmt 1 view .LVU1874
2920:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 5499              		.loc 1 2920 5 is_stmt 0 view .LVU1875
 5500 0154 BBF1080F 		cmp	fp, #8
 5501 0158 63D0     		beq	.L448
 5502              	.L429:
2921:Src/ff.c      **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
 5503              		.loc 1 2921 2 is_stmt 1 view .LVU1876
2921:Src/ff.c      **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
 5504              		.loc 1 2921 5 is_stmt 0 view .LVU1877
 5505 015a 0AF00C03 		and	r3, r10, #12
 5506 015e 0C2B     		cmp	r3, #12
 5507 0160 03D0     		beq	.L430
2921:Src/ff.c      **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
 5508              		.loc 1 2921 25 discriminator 2 view .LVU1878
 5509 0162 0AF00303 		and	r3, r10, #3
 5510 0166 032B     		cmp	r3, #3
 5511 0168 01D1     		bne	.L431
 5512              	.L430:
2921:Src/ff.c      **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
 5513              		.loc 1 2921 48 is_stmt 1 discriminator 3 view .LVU1879
2921:Src/ff.c      **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
 5514              		.loc 1 2921 51 is_stmt 0 discriminator 3 view .LVU1880
 5515 016a 48F00208 		orr	r8, r8, #2
 5516              	.LVL672:
 5517              	.L431:
2922:Src/ff.c      **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 5518              		.loc 1 2922 2 is_stmt 1 view .LVU1881
2922:Src/ff.c      **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 5519              		.loc 1 2922 5 is_stmt 0 view .LVU1882
 5520 016e 18F0020F 		tst	r8, #2
 5521 0172 09D1     		bne	.L432
2923:Src/ff.c      **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 5522              		.loc 1 2923 3 is_stmt 1 view .LVU1883
2923:Src/ff.c      **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 5523              		.loc 1 2923 6 is_stmt 0 view .LVU1884
 5524 0174 1AF0010F 		tst	r10, #1
 5525 0178 01D0     		beq	.L433
2923:Src/ff.c      **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 5526              		.loc 1 2923 17 is_stmt 1 discriminator 1 view .LVU1885
2923:Src/ff.c      **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 5527              		.loc 1 2923 20 is_stmt 0 discriminator 1 view .LVU1886
 5528 017a 48F01008 		orr	r8, r8, #16
 5529              	.LVL673:
 5530              	.L433:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 189


2924:Src/ff.c      **** 	}
 5531              		.loc 1 2924 3 is_stmt 1 view .LVU1887
2924:Src/ff.c      **** 	}
 5532              		.loc 1 2924 6 is_stmt 0 view .LVU1888
 5533 017e 1AF0040F 		tst	r10, #4
 5534 0182 01D0     		beq	.L432
2924:Src/ff.c      **** 	}
 5535              		.loc 1 2924 17 is_stmt 1 discriminator 1 view .LVU1889
2924:Src/ff.c      **** 	}
 5536              		.loc 1 2924 20 is_stmt 0 discriminator 1 view .LVU1890
 5537 0184 48F00808 		orr	r8, r8, #8
 5538              	.LVL674:
 5539              	.L432:
2927:Src/ff.c      **** 
 5540              		.loc 1 2927 2 is_stmt 1 view .LVU1891
2927:Src/ff.c      **** 
 5541              		.loc 1 2927 17 is_stmt 0 view .LVU1892
 5542 0188 86F82B80 		strb	r8, [r6, #43]
2929:Src/ff.c      **** 
 5543              		.loc 1 2929 2 is_stmt 1 view .LVU1893
2929:Src/ff.c      **** 
 5544              		.loc 1 2929 9 is_stmt 0 view .LVU1894
 5545 018c 0020     		movs	r0, #0
 5546              	.LVL675:
 5547              	.L393:
2994:Src/ff.c      **** 
 5548              		.loc 1 2994 1 view .LVU1895
 5549 018e 05B0     		add	sp, sp, #20
 5550              	.LCFI29:
 5551              		.cfi_remember_state
 5552              		.cfi_def_cfa_offset 36
 5553              		@ sp needed
 5554 0190 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5555              	.LVL676:
 5556              	.L445:
 5557              	.LCFI30:
 5558              		.cfi_restore_state
2871:Src/ff.c      **** 				break;
 5559              		.loc 1 2871 5 is_stmt 1 view .LVU1896
2871:Src/ff.c      **** 				break;
 5560              		.loc 1 2871 8 is_stmt 0 view .LVU1897
 5561 0194 48F00308 		orr	r8, r8, #3
 5562              	.LVL677:
2872:Src/ff.c      **** 			}
 5563              		.loc 1 2872 5 is_stmt 1 view .LVU1898
 5564 0198 D8E7     		b	.L413
 5565              	.L446:
2876:Src/ff.c      **** 			continue;
 5566              		.loc 1 2876 4 view .LVU1899
 5567              	.LVL678:
2876:Src/ff.c      **** 			continue;
 5568              		.loc 1 2876 13 view .LVU1900
2876:Src/ff.c      **** 			continue;
 5569              		.loc 1 2876 20 view .LVU1901
2876:Src/ff.c      **** 			continue;
 5570              		.loc 1 2876 29 view .LVU1902
2876:Src/ff.c      **** 			continue;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 190


 5571              		.loc 1 2876 31 is_stmt 0 view .LVU1903
 5572 019a 4FEA8A0A 		lsl	r10, r10, #2
 5573              	.LVL679:
2876:Src/ff.c      **** 			continue;
 5574              		.loc 1 2876 31 view .LVU1904
 5575 019e 5FFA8AFA 		uxtb	r10, r10
 5576              	.LVL680:
2877:Src/ff.c      **** 		}
 5577              		.loc 1 2877 4 is_stmt 1 view .LVU1905
2876:Src/ff.c      **** 			continue;
 5578              		.loc 1 2876 7 is_stmt 0 view .LVU1906
 5579 01a2 2346     		mov	r3, r4
2876:Src/ff.c      **** 			continue;
 5580              		.loc 1 2876 23 view .LVU1907
 5581 01a4 4FF00B0B 		mov	fp, #11
2876:Src/ff.c      **** 			continue;
 5582              		.loc 1 2876 15 view .LVU1908
 5583 01a8 0822     		movs	r2, #8
 5584 01aa 0192     		str	r2, [sp, #4]
2877:Src/ff.c      **** 		}
 5585              		.loc 1 2877 4 view .LVU1909
 5586 01ac A0E7     		b	.L412
 5587              	.LVL681:
 5588              	.L443:
2881:Src/ff.c      **** #if FF_CODE_PAGE == 0
 5589              		.loc 1 2881 4 is_stmt 1 view .LVU1910
2881:Src/ff.c      **** #if FF_CODE_PAGE == 0
 5590              		.loc 1 2881 7 is_stmt 0 view .LVU1911
 5591 01ae 48F00208 		orr	r8, r8, #2
 5592              	.LVL682:
2893:Src/ff.c      **** #endif
 5593              		.loc 1 2893 4 is_stmt 1 view .LVU1912
2893:Src/ff.c      **** #endif
 5594              		.loc 1 2893 9 is_stmt 0 view .LVU1913
 5595 01b2 3846     		mov	r0, r7
 5596 01b4 FFF7FEFF 		bl	ff_wtoupper
 5597              	.LVL683:
 5598 01b8 4FF46971 		mov	r1, #932
 5599 01bc FFF7FEFF 		bl	ff_uni2oem
 5600              	.LVL684:
 5601 01c0 0746     		mov	r7, r0
 5602              	.LVL685:
2893:Src/ff.c      **** #endif
 5603              		.loc 1 2893 9 view .LVU1914
 5604 01c2 A5E7     		b	.L421
 5605              	.L444:
2899:Src/ff.c      **** 				i = ni; continue;		/* Next field */
 5606              		.loc 1 2899 5 is_stmt 1 view .LVU1915
2899:Src/ff.c      **** 				i = ni; continue;		/* Next field */
 5607              		.loc 1 2899 8 is_stmt 0 view .LVU1916
 5608 01c4 48F00308 		orr	r8, r8, #3
 5609              	.LVL686:
2900:Src/ff.c      **** 			}
 5610              		.loc 1 2900 5 is_stmt 1 view .LVU1917
2900:Src/ff.c      **** 			}
 5611              		.loc 1 2900 13 view .LVU1918
2862:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 191


 5612              		.loc 1 2862 14 is_stmt 0 view .LVU1919
 5613 01c8 4B46     		mov	r3, r9
2900:Src/ff.c      **** 			}
 5614              		.loc 1 2900 7 view .LVU1920
 5615 01ca CDF804B0 		str	fp, [sp, #4]
2900:Src/ff.c      **** 			}
 5616              		.loc 1 2900 5 view .LVU1921
 5617 01ce 8FE7     		b	.L412
 5618              	.LVL687:
 5619              	.L422:
2904:Src/ff.c      **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 5620              		.loc 1 2904 4 is_stmt 1 view .LVU1922
2904:Src/ff.c      **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 5621              		.loc 1 2904 7 is_stmt 0 view .LVU1923
 5622 01d0 27B1     		cbz	r7, .L425
2904:Src/ff.c      **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 5623              		.loc 1 2904 19 discriminator 1 view .LVU1924
 5624 01d2 3946     		mov	r1, r7
 5625 01d4 1848     		ldr	r0, .L449+4
 5626 01d6 FFF7FEFF 		bl	strchr
 5627              	.LVL688:
2904:Src/ff.c      **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 5628              		.loc 1 2904 16 discriminator 1 view .LVU1925
 5629 01da 50B1     		cbz	r0, .L426
 5630              	.L425:
2905:Src/ff.c      **** 			} else {
 5631              		.loc 1 2905 5 is_stmt 1 view .LVU1926
 5632              	.LVL689:
2905:Src/ff.c      **** 			} else {
 5633              		.loc 1 2905 15 view .LVU1927
2905:Src/ff.c      **** 			} else {
 5634              		.loc 1 2905 18 is_stmt 0 view .LVU1928
 5635 01dc 48F00308 		orr	r8, r8, #3
 5636              	.LVL690:
2905:Src/ff.c      **** 			} else {
 5637              		.loc 1 2905 18 view .LVU1929
 5638 01e0 019B     		ldr	r3, [sp, #4]
2905:Src/ff.c      **** 			} else {
 5639              		.loc 1 2905 8 view .LVU1930
 5640 01e2 5F27     		movs	r7, #95
 5641              	.LVL691:
 5642              	.L424:
2915:Src/ff.c      **** 	}
 5643              		.loc 1 2915 3 is_stmt 1 view .LVU1931
2915:Src/ff.c      **** 	}
 5644              		.loc 1 2915 11 is_stmt 0 view .LVU1932
 5645 01e4 5A1C     		adds	r2, r3, #1
 5646 01e6 0192     		str	r2, [sp, #4]
 5647              	.LVL692:
2915:Src/ff.c      **** 	}
 5648              		.loc 1 2915 15 view .LVU1933
 5649 01e8 3344     		add	r3, r3, r6
 5650 01ea 83F82070 		strb	r7, [r3, #32]
2862:Src/ff.c      **** 		if (wc == 0) break;				/* Break on end of the LFN */
 5651              		.loc 1 2862 14 view .LVU1934
 5652 01ee 4B46     		mov	r3, r9
 5653 01f0 7EE7     		b	.L412
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 192


 5654              	.LVL693:
 5655              	.L426:
2907:Src/ff.c      **** 					b |= 2;
 5656              		.loc 1 2907 5 is_stmt 1 view .LVU1935
2907:Src/ff.c      **** 					b |= 2;
 5657              		.loc 1 2907 9 is_stmt 0 view .LVU1936
 5658 01f2 A7F14103 		sub	r3, r7, #65
 5659 01f6 9BB2     		uxth	r3, r3
2907:Src/ff.c      **** 					b |= 2;
 5660              		.loc 1 2907 8 view .LVU1937
 5661 01f8 192B     		cmp	r3, #25
 5662 01fa 01D8     		bhi	.L427
2908:Src/ff.c      **** 				}
 5663              		.loc 1 2908 6 is_stmt 1 view .LVU1938
2908:Src/ff.c      **** 				}
 5664              		.loc 1 2908 8 is_stmt 0 view .LVU1939
 5665 01fc 4AF0020A 		orr	r10, r10, #2
 5666              	.LVL694:
 5667              	.L427:
2910:Src/ff.c      **** 					b |= 1; wc -= 0x20;
 5668              		.loc 1 2910 5 is_stmt 1 view .LVU1940
2910:Src/ff.c      **** 					b |= 1; wc -= 0x20;
 5669              		.loc 1 2910 9 is_stmt 0 view .LVU1941
 5670 0200 A7F16103 		sub	r3, r7, #97
 5671 0204 9BB2     		uxth	r3, r3
2910:Src/ff.c      **** 					b |= 1; wc -= 0x20;
 5672              		.loc 1 2910 8 view .LVU1942
 5673 0206 192B     		cmp	r3, #25
 5674 0208 05D8     		bhi	.L440
2911:Src/ff.c      **** 				}
 5675              		.loc 1 2911 6 is_stmt 1 view .LVU1943
2911:Src/ff.c      **** 				}
 5676              		.loc 1 2911 8 is_stmt 0 view .LVU1944
 5677 020a 4AF0010A 		orr	r10, r10, #1
 5678              	.LVL695:
2911:Src/ff.c      **** 				}
 5679              		.loc 1 2911 14 is_stmt 1 view .LVU1945
2911:Src/ff.c      **** 				}
 5680              		.loc 1 2911 17 is_stmt 0 view .LVU1946
 5681 020e 203F     		subs	r7, r7, #32
 5682              	.LVL696:
2911:Src/ff.c      **** 				}
 5683              		.loc 1 2911 17 view .LVU1947
 5684 0210 BFB2     		uxth	r7, r7
 5685              	.LVL697:
2911:Src/ff.c      **** 				}
 5686              		.loc 1 2911 17 view .LVU1948
 5687 0212 019B     		ldr	r3, [sp, #4]
 5688 0214 E6E7     		b	.L424
 5689              	.L440:
2911:Src/ff.c      **** 				}
 5690              		.loc 1 2911 17 view .LVU1949
 5691 0216 019B     		ldr	r3, [sp, #4]
 5692 0218 E4E7     		b	.L424
 5693              	.L447:
2918:Src/ff.c      **** 
 5694              		.loc 1 2918 25 is_stmt 1 discriminator 1 view .LVU1950
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 193


2918:Src/ff.c      **** 
 5695              		.loc 1 2918 35 is_stmt 0 discriminator 1 view .LVU1951
 5696 021a 0523     		movs	r3, #5
 5697 021c 86F82030 		strb	r3, [r6, #32]
 5698 0220 98E7     		b	.L428
 5699              	.L448:
2920:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 5700              		.loc 1 2920 15 is_stmt 1 discriminator 1 view .LVU1952
2920:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 5701              		.loc 1 2920 17 is_stmt 0 discriminator 1 view .LVU1953
 5702 0222 4FEA8A0A 		lsl	r10, r10, #2
 5703              	.LVL698:
2920:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 5704              		.loc 1 2920 17 discriminator 1 view .LVU1954
 5705 0226 5FFA8AFA 		uxtb	r10, r10
 5706              	.LVL699:
2920:Src/ff.c      **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 5707              		.loc 1 2920 17 discriminator 1 view .LVU1955
 5708 022a 96E7     		b	.L429
 5709              	.LVL700:
 5710              	.L434:
2818:Src/ff.c      **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 5711              		.loc 1 2818 32 view .LVU1956
 5712 022c 0620     		movs	r0, #6
 5713              	.LVL701:
2818:Src/ff.c      **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 5714              		.loc 1 2818 32 view .LVU1957
 5715 022e AEE7     		b	.L393
 5716              	.LVL702:
 5717              	.L436:
2823:Src/ff.c      **** 		lfn[di++] = wc;				/* Store the Unicode character */
 5718              		.loc 1 2823 32 view .LVU1958
 5719 0230 0620     		movs	r0, #6
 5720 0232 ACE7     		b	.L393
 5721              	.L450:
 5722              		.align	2
 5723              	.L449:
 5724 0234 00000000 		.word	.LC1
 5725 0238 0C000000 		.word	.LC2
 5726              		.cfi_endproc
 5727              	.LFE32:
 5729              		.section	.text.follow_path,"ax",%progbits
 5730              		.align	1
 5731              		.syntax unified
 5732              		.thumb
 5733              		.thumb_func
 5734              		.fpu softvfp
 5736              	follow_path:
 5737              	.LVL703:
 5738              	.LFB33:
3007:Src/ff.c      **** 	FRESULT res;
 5739              		.loc 1 3007 1 is_stmt 1 view -0
 5740              		.cfi_startproc
 5741              		@ args = 0, pretend = 0, frame = 8
 5742              		@ frame_needed = 0, uses_anonymous_args = 0
3007:Src/ff.c      **** 	FRESULT res;
 5743              		.loc 1 3007 1 is_stmt 0 view .LVU1960
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 194


 5744 0000 30B5     		push	{r4, r5, lr}
 5745              	.LCFI31:
 5746              		.cfi_def_cfa_offset 12
 5747              		.cfi_offset 4, -12
 5748              		.cfi_offset 5, -8
 5749              		.cfi_offset 14, -4
 5750 0002 83B0     		sub	sp, sp, #12
 5751              	.LCFI32:
 5752              		.cfi_def_cfa_offset 24
 5753 0004 0446     		mov	r4, r0
 5754 0006 0191     		str	r1, [sp, #4]
3008:Src/ff.c      **** 	BYTE ns;
 5755              		.loc 1 3008 2 is_stmt 1 view .LVU1961
3009:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
 5756              		.loc 1 3009 2 view .LVU1962
3010:Src/ff.c      **** 
 5757              		.loc 1 3010 2 view .LVU1963
3010:Src/ff.c      **** 
 5758              		.loc 1 3010 9 is_stmt 0 view .LVU1964
 5759 0008 0568     		ldr	r5, [r0]
 5760              	.LVL704:
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5761              		.loc 1 3019 3 is_stmt 1 view .LVU1965
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5762              		.loc 1 3019 9 is_stmt 0 view .LVU1966
 5763 000a 01E0     		b	.L452
 5764              	.L453:
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5765              		.loc 1 3019 30 is_stmt 1 discriminator 4 view .LVU1967
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5766              		.loc 1 3019 34 is_stmt 0 discriminator 4 view .LVU1968
 5767 000c 0133     		adds	r3, r3, #1
 5768 000e 0193     		str	r3, [sp, #4]
 5769              	.L452:
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5770              		.loc 1 3019 9 is_stmt 1 discriminator 1 view .LVU1969
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5771              		.loc 1 3019 10 is_stmt 0 discriminator 1 view .LVU1970
 5772 0010 019B     		ldr	r3, [sp, #4]
 5773 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5774              		.loc 1 3019 9 discriminator 1 view .LVU1971
 5775 0014 2F2A     		cmp	r2, #47
 5776 0016 F9D0     		beq	.L453
3019:Src/ff.c      **** 		dp->obj.sclust = 0;					/* Start from the root directory */
 5777              		.loc 1 3019 10 discriminator 3 view .LVU1972
 5778 0018 5C2A     		cmp	r2, #92
 5779 001a F7D0     		beq	.L453
3020:Src/ff.c      **** 	}
 5780              		.loc 1 3020 3 is_stmt 1 view .LVU1973
3020:Src/ff.c      **** 	}
 5781              		.loc 1 3020 18 is_stmt 0 view .LVU1974
 5782 001c 0022     		movs	r2, #0
 5783 001e A260     		str	r2, [r4, #8]
3039:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NONAME;
 5784              		.loc 1 3039 2 is_stmt 1 view .LVU1975
3039:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NONAME;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 195


 5785              		.loc 1 3039 12 is_stmt 0 view .LVU1976
 5786 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3039:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NONAME;
 5787              		.loc 1 3039 5 view .LVU1977
 5788 0022 1F2B     		cmp	r3, #31
 5789 0024 1ED9     		bls	.L460
 5790              	.LVL705:
 5791              	.L454:
3044:Src/ff.c      **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 5792              		.loc 1 3044 3 is_stmt 1 view .LVU1978
3045:Src/ff.c      **** 			if (res != FR_OK) break;
 5793              		.loc 1 3045 4 view .LVU1979
3045:Src/ff.c      **** 			if (res != FR_OK) break;
 5794              		.loc 1 3045 10 is_stmt 0 view .LVU1980
 5795 0026 01A9     		add	r1, sp, #4
 5796 0028 2046     		mov	r0, r4
 5797 002a FFF7FEFF 		bl	create_name
 5798              	.LVL706:
3046:Src/ff.c      **** 			res = dir_find(dp);				/* Find an object with the segment name */
 5799              		.loc 1 3046 4 is_stmt 1 view .LVU1981
3046:Src/ff.c      **** 			res = dir_find(dp);				/* Find an object with the segment name */
 5800              		.loc 1 3046 7 is_stmt 0 view .LVU1982
 5801 002e 0346     		mov	r3, r0
 5802 0030 00BB     		cbnz	r0, .L455
3047:Src/ff.c      **** 			ns = dp->fn[NSFLAG];
 5803              		.loc 1 3047 4 is_stmt 1 view .LVU1983
3047:Src/ff.c      **** 			ns = dp->fn[NSFLAG];
 5804              		.loc 1 3047 10 is_stmt 0 view .LVU1984
 5805 0032 2046     		mov	r0, r4
 5806              	.LVL707:
3047:Src/ff.c      **** 			ns = dp->fn[NSFLAG];
 5807              		.loc 1 3047 10 view .LVU1985
 5808 0034 FFF7FEFF 		bl	dir_find
 5809              	.LVL708:
3048:Src/ff.c      **** 			if (res != FR_OK) {				/* Failed to find the object */
 5810              		.loc 1 3048 4 is_stmt 1 view .LVU1986
3048:Src/ff.c      **** 			if (res != FR_OK) {				/* Failed to find the object */
 5811              		.loc 1 3048 7 is_stmt 0 view .LVU1987
 5812 0038 94F82B20 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 5813              	.LVL709:
3049:Src/ff.c      **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 5814              		.loc 1 3049 4 is_stmt 1 view .LVU1988
3049:Src/ff.c      **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 5815              		.loc 1 3049 7 is_stmt 0 view .LVU1989
 5816 003c 0346     		mov	r3, r0
 5817 003e E0B9     		cbnz	r0, .L461
3061:Src/ff.c      **** 			/* Get into the sub-directory */
 5818              		.loc 1 3061 4 is_stmt 1 view .LVU1990
3061:Src/ff.c      **** 			/* Get into the sub-directory */
 5819              		.loc 1 3061 7 is_stmt 0 view .LVU1991
 5820 0040 12F0040F 		tst	r2, #4
 5821 0044 16D1     		bne	.L455
3063:Src/ff.c      **** 				res = FR_NO_PATH; break;
 5822              		.loc 1 3063 4 is_stmt 1 view .LVU1992
3063:Src/ff.c      **** 				res = FR_NO_PATH; break;
 5823              		.loc 1 3063 17 is_stmt 0 view .LVU1993
 5824 0046 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 196


3063:Src/ff.c      **** 				res = FR_NO_PATH; break;
 5825              		.loc 1 3063 7 view .LVU1994
 5826 0048 13F0100F 		tst	r3, #16
 5827 004c 1CD0     		beq	.L458
3075:Src/ff.c      **** 			}
 5828              		.loc 1 3075 5 is_stmt 1 view .LVU1995
3075:Src/ff.c      **** 			}
 5829              		.loc 1 3075 35 is_stmt 0 view .LVU1996
 5830 004e 05F13403 		add	r3, r5, #52
3075:Src/ff.c      **** 			}
 5831              		.loc 1 3075 47 view .LVU1997
 5832 0052 2169     		ldr	r1, [r4, #16]
3075:Src/ff.c      **** 			}
 5833              		.loc 1 3075 54 view .LVU1998
 5834 0054 C1F30801 		ubfx	r1, r1, #0, #9
3075:Src/ff.c      **** 			}
 5835              		.loc 1 3075 22 view .LVU1999
 5836 0058 1944     		add	r1, r1, r3
 5837 005a 2846     		mov	r0, r5
 5838              	.LVL710:
3075:Src/ff.c      **** 			}
 5839              		.loc 1 3075 22 view .LVU2000
 5840 005c FFF7FEFF 		bl	ld_clust
 5841              	.LVL711:
3075:Src/ff.c      **** 			}
 5842              		.loc 1 3075 20 view .LVU2001
 5843 0060 A060     		str	r0, [r4, #8]
3044:Src/ff.c      **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 5844              		.loc 1 3044 9 is_stmt 1 view .LVU2002
3045:Src/ff.c      **** 			if (res != FR_OK) break;
 5845              		.loc 1 3045 8 is_stmt 0 view .LVU2003
 5846 0062 E0E7     		b	.L454
 5847              	.LVL712:
 5848              	.L460:
3040:Src/ff.c      **** 		res = dir_sdi(dp, 0);
 5849              		.loc 1 3040 3 is_stmt 1 view .LVU2004
3040:Src/ff.c      **** 		res = dir_sdi(dp, 0);
 5850              		.loc 1 3040 18 is_stmt 0 view .LVU2005
 5851 0064 8023     		movs	r3, #128
 5852 0066 84F82B30 		strb	r3, [r4, #43]
3041:Src/ff.c      **** 
 5853              		.loc 1 3041 3 is_stmt 1 view .LVU2006
3041:Src/ff.c      **** 
 5854              		.loc 1 3041 9 is_stmt 0 view .LVU2007
 5855 006a 1146     		mov	r1, r2
 5856              	.LVL713:
3041:Src/ff.c      **** 
 5857              		.loc 1 3041 9 view .LVU2008
 5858 006c 2046     		mov	r0, r4
 5859              	.LVL714:
3041:Src/ff.c      **** 
 5860              		.loc 1 3041 9 view .LVU2009
 5861 006e FFF7FEFF 		bl	dir_sdi
 5862              	.LVL715:
 5863 0072 0346     		mov	r3, r0
 5864              	.LVL716:
 5865              	.L455:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 197


3080:Src/ff.c      **** }
 5866              		.loc 1 3080 2 is_stmt 1 view .LVU2010
3081:Src/ff.c      **** 
 5867              		.loc 1 3081 1 is_stmt 0 view .LVU2011
 5868 0074 1846     		mov	r0, r3
 5869 0076 03B0     		add	sp, sp, #12
 5870              	.LCFI33:
 5871              		.cfi_remember_state
 5872              		.cfi_def_cfa_offset 12
 5873              		@ sp needed
 5874 0078 30BD     		pop	{r4, r5, pc}
 5875              	.LVL717:
 5876              	.L461:
 5877              	.LCFI34:
 5878              		.cfi_restore_state
3050:Src/ff.c      **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 5879              		.loc 1 3050 5 is_stmt 1 view .LVU2012
3050:Src/ff.c      **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 5880              		.loc 1 3050 8 is_stmt 0 view .LVU2013
 5881 007a 0428     		cmp	r0, #4
 5882 007c FAD1     		bne	.L455
3051:Src/ff.c      **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 5883              		.loc 1 3051 6 is_stmt 1 view .LVU2014
3056:Src/ff.c      **** 					}
 5884              		.loc 1 3056 7 view .LVU2015
3056:Src/ff.c      **** 					}
 5885              		.loc 1 3056 10 is_stmt 0 view .LVU2016
 5886 007e 12F0040F 		tst	r2, #4
 5887 0082 F7D1     		bne	.L455
3056:Src/ff.c      **** 					}
 5888              		.loc 1 3056 32 view .LVU2017
 5889 0084 0523     		movs	r3, #5
 5890 0086 F5E7     		b	.L455
 5891              	.L458:
3064:Src/ff.c      **** 			}
 5892              		.loc 1 3064 9 view .LVU2018
 5893 0088 0523     		movs	r3, #5
 5894 008a F3E7     		b	.L455
 5895              		.cfi_endproc
 5896              	.LFE33:
 5898              		.section	.text.gen_numname,"ax",%progbits
 5899              		.align	1
 5900              		.syntax unified
 5901              		.thumb
 5902              		.thumb_func
 5903              		.fpu softvfp
 5905              	gen_numname:
 5906              	.LVL718:
 5907              	.LFB25:
1971:Src/ff.c      **** 	BYTE ns[8], c;
 5908              		.loc 1 1971 1 is_stmt 1 view -0
 5909              		.cfi_startproc
 5910              		@ args = 0, pretend = 0, frame = 8
 5911              		@ frame_needed = 0, uses_anonymous_args = 0
1971:Src/ff.c      **** 	BYTE ns[8], c;
 5912              		.loc 1 1971 1 is_stmt 0 view .LVU2020
 5913 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 198


 5914              	.LCFI35:
 5915              		.cfi_def_cfa_offset 20
 5916              		.cfi_offset 4, -20
 5917              		.cfi_offset 5, -16
 5918              		.cfi_offset 6, -12
 5919              		.cfi_offset 7, -8
 5920              		.cfi_offset 14, -4
 5921 0002 83B0     		sub	sp, sp, #12
 5922              	.LCFI36:
 5923              		.cfi_def_cfa_offset 32
 5924 0004 0646     		mov	r6, r0
1972:Src/ff.c      **** 	UINT i, j;
 5925              		.loc 1 1972 2 is_stmt 1 view .LVU2021
1973:Src/ff.c      **** 	WCHAR wc;
 5926              		.loc 1 1973 2 view .LVU2022
1974:Src/ff.c      **** 	DWORD sreg;
 5927              		.loc 1 1974 2 view .LVU2023
1975:Src/ff.c      **** 
 5928              		.loc 1 1975 2 view .LVU2024
1978:Src/ff.c      **** 
 5929              		.loc 1 1978 2 view .LVU2025
 5930 0006 0C68     		ldr	r4, [r1]	@ unaligned
 5931 0008 4868     		ldr	r0, [r1, #4]	@ unaligned
 5932              	.LVL719:
1978:Src/ff.c      **** 
 5933              		.loc 1 1978 2 is_stmt 0 view .LVU2026
 5934 000a 3460     		str	r4, [r6]	@ unaligned
 5935 000c 7060     		str	r0, [r6, #4]	@ unaligned
 5936 000e 0889     		ldrh	r0, [r1, #8]	@ unaligned
 5937 0010 897A     		ldrb	r1, [r1, #10]	@ zero_extendqisi2
 5938              	.LVL720:
1978:Src/ff.c      **** 
 5939              		.loc 1 1978 2 view .LVU2027
 5940 0012 3081     		strh	r0, [r6, #8]	@ unaligned
 5941 0014 B172     		strb	r1, [r6, #10]
1980:Src/ff.c      **** 		sreg = seq;
 5942              		.loc 1 1980 2 is_stmt 1 view .LVU2028
1980:Src/ff.c      **** 		sreg = seq;
 5943              		.loc 1 1980 5 is_stmt 0 view .LVU2029
 5944 0016 052B     		cmp	r3, #5
 5945 0018 13D8     		bhi	.L463
 5946              	.LVL721:
 5947              	.L464:
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
 5948              		.loc 1 1984 11 view .LVU2030
 5949 001a 0727     		movs	r7, #7
 5950 001c 22E0     		b	.L471
 5951              	.LVL722:
 5952              	.L466:
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
 5953              		.loc 1 1984 24 is_stmt 1 discriminator 2 view .LVU2031
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
 5954              		.loc 1 1984 25 is_stmt 0 discriminator 2 view .LVU2032
 5955 001e 0CF1010C 		add	ip, ip, #1
 5956              	.LVL723:
 5957              	.L465:
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 199


 5958              		.loc 1 1984 16 is_stmt 1 discriminator 1 view .LVU2033
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
 5959              		.loc 1 1984 4 is_stmt 0 discriminator 1 view .LVU2034
 5960 0022 BCF10F0F 		cmp	ip, #15
 5961 0026 0CD8     		bhi	.L463
1985:Src/ff.c      **** 				wc >>= 1;
 5962              		.loc 1 1985 5 is_stmt 1 view .LVU2035
1985:Src/ff.c      **** 				wc >>= 1;
 5963              		.loc 1 1985 30 is_stmt 0 view .LVU2036
 5964 0028 01F0010E 		and	lr, r1, #1
1985:Src/ff.c      **** 				wc >>= 1;
 5965              		.loc 1 1985 10 view .LVU2037
 5966 002c 0EEB4303 		add	r3, lr, r3, lsl #1
 5967              	.LVL724:
1986:Src/ff.c      **** 				if (sreg & 0x10000) sreg ^= 0x11021;
 5968              		.loc 1 1986 5 is_stmt 1 view .LVU2038
1986:Src/ff.c      **** 				if (sreg & 0x10000) sreg ^= 0x11021;
 5969              		.loc 1 1986 8 is_stmt 0 view .LVU2039
 5970 0030 4908     		lsrs	r1, r1, #1
 5971              	.LVL725:
1987:Src/ff.c      **** 			}
 5972              		.loc 1 1987 5 is_stmt 1 view .LVU2040
1987:Src/ff.c      **** 			}
 5973              		.loc 1 1987 8 is_stmt 0 view .LVU2041
 5974 0032 13F4803F 		tst	r3, #65536
 5975 0036 F2D0     		beq	.L466
1987:Src/ff.c      **** 			}
 5976              		.loc 1 1987 25 is_stmt 1 discriminator 1 view .LVU2042
1987:Src/ff.c      **** 			}
 5977              		.loc 1 1987 30 is_stmt 0 discriminator 1 view .LVU2043
 5978 0038 83F48833 		eor	r3, r3, #69632
 5979              	.LVL726:
1987:Src/ff.c      **** 			}
 5980              		.loc 1 1987 30 discriminator 1 view .LVU2044
 5981 003c 83F02103 		eor	r3, r3, #33
 5982              	.LVL727:
1987:Src/ff.c      **** 			}
 5983              		.loc 1 1987 30 discriminator 1 view .LVU2045
 5984 0040 EDE7     		b	.L466
 5985              	.LVL728:
 5986              	.L463:
1982:Src/ff.c      **** 			wc = *lfn++;
 5987              		.loc 1 1982 9 is_stmt 1 view .LVU2046
1982:Src/ff.c      **** 			wc = *lfn++;
 5988              		.loc 1 1982 10 is_stmt 0 view .LVU2047
 5989 0042 1188     		ldrh	r1, [r2]
1982:Src/ff.c      **** 			wc = *lfn++;
 5990              		.loc 1 1982 9 view .LVU2048
 5991 0044 0029     		cmp	r1, #0
 5992 0046 E8D0     		beq	.L464
1983:Src/ff.c      **** 			for (i = 0; i < 16; i++) {
 5993              		.loc 1 1983 4 is_stmt 1 view .LVU2049
1983:Src/ff.c      **** 			for (i = 0; i < 16; i++) {
 5994              		.loc 1 1983 13 is_stmt 0 view .LVU2050
 5995 0048 0232     		adds	r2, r2, #2
 5996              	.LVL729:
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 200


 5997              		.loc 1 1984 4 is_stmt 1 view .LVU2051
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
 5998              		.loc 1 1984 11 is_stmt 0 view .LVU2052
 5999 004a 4FF0000C 		mov	ip, #0
1984:Src/ff.c      **** 				sreg = (sreg << 1) + (wc & 1);
 6000              		.loc 1 1984 4 view .LVU2053
 6001 004e E8E7     		b	.L465
 6002              	.LVL730:
 6003              	.L469:
1998:Src/ff.c      **** 	} while (i && seq);
 6004              		.loc 1 1998 3 is_stmt 1 view .LVU2054
1998:Src/ff.c      **** 	} while (i && seq);
 6005              		.loc 1 1998 11 is_stmt 0 view .LVU2055
 6006 0050 07F10801 		add	r1, r7, #8
 6007 0054 6944     		add	r1, sp, r1
 6008 0056 01F8082C 		strb	r2, [r1, #-8]
1999:Src/ff.c      **** 	ns[i] = '~';
 6009              		.loc 1 1999 10 is_stmt 1 view .LVU2056
1999:Src/ff.c      **** 	ns[i] = '~';
 6010              		.loc 1 1999 2 is_stmt 0 view .LVU2057
 6011 005a 7D1E     		subs	r5, r7, #1
 6012              	.LVL731:
1999:Src/ff.c      **** 	ns[i] = '~';
 6013              		.loc 1 1999 2 view .LVU2058
 6014 005c 0DD0     		beq	.L470
1999:Src/ff.c      **** 	ns[i] = '~';
 6015              		.loc 1 1999 13 discriminator 1 view .LVU2059
 6016 005e 0F28     		cmp	r0, #15
 6017 0060 0BD9     		bls	.L470
1998:Src/ff.c      **** 	} while (i && seq);
 6018              		.loc 1 1998 7 view .LVU2060
 6019 0062 2F46     		mov	r7, r5
 6020              	.LVL732:
 6021              	.L471:
1995:Src/ff.c      **** 		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 6022              		.loc 1 1995 2 is_stmt 1 view .LVU2061
1996:Src/ff.c      **** 		if (c > '9') c += 7;
 6023              		.loc 1 1996 3 view .LVU2062
1996:Src/ff.c      **** 		if (c > '9') c += 7;
 6024              		.loc 1 1996 7 is_stmt 0 view .LVU2063
 6025 0064 03F00F01 		and	r1, r3, #15
1996:Src/ff.c      **** 		if (c > '9') c += 7;
 6026              		.loc 1 1996 5 view .LVU2064
 6027 0068 01F13002 		add	r2, r1, #48
 6028              	.LVL733:
1996:Src/ff.c      **** 		if (c > '9') c += 7;
 6029              		.loc 1 1996 33 is_stmt 1 view .LVU2065
 6030 006c 1846     		mov	r0, r3
1996:Src/ff.c      **** 		if (c > '9') c += 7;
 6031              		.loc 1 1996 37 is_stmt 0 view .LVU2066
 6032 006e 1B09     		lsrs	r3, r3, #4
 6033              	.LVL734:
1997:Src/ff.c      **** 		ns[i--] = c;
 6034              		.loc 1 1997 3 is_stmt 1 view .LVU2067
1997:Src/ff.c      **** 		ns[i--] = c;
 6035              		.loc 1 1997 6 is_stmt 0 view .LVU2068
 6036 0070 392A     		cmp	r2, #57
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 201


 6037 0072 EDD9     		bls	.L469
1997:Src/ff.c      **** 		ns[i--] = c;
 6038              		.loc 1 1997 16 is_stmt 1 discriminator 1 view .LVU2069
1997:Src/ff.c      **** 		ns[i--] = c;
 6039              		.loc 1 1997 18 is_stmt 0 discriminator 1 view .LVU2070
 6040 0074 01F13702 		add	r2, r1, #55
 6041              	.LVL735:
1997:Src/ff.c      **** 		ns[i--] = c;
 6042              		.loc 1 1997 18 discriminator 1 view .LVU2071
 6043 0078 EAE7     		b	.L469
 6044              	.LVL736:
 6045              	.L470:
2000:Src/ff.c      **** 
 6046              		.loc 1 2000 2 is_stmt 1 view .LVU2072
2000:Src/ff.c      **** 
 6047              		.loc 1 2000 8 is_stmt 0 view .LVU2073
 6048 007a 7E22     		movs	r2, #126
 6049              	.LVL737:
2000:Src/ff.c      **** 
 6050              		.loc 1 2000 8 view .LVU2074
 6051 007c 05F10803 		add	r3, r5, #8
 6052              	.LVL738:
2000:Src/ff.c      **** 
 6053              		.loc 1 2000 8 view .LVU2075
 6054 0080 6B44     		add	r3, sp, r3
 6055 0082 03F8082C 		strb	r2, [r3, #-8]
 6056              	.LVL739:
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6057              		.loc 1 2003 2 is_stmt 1 view .LVU2076
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6058              		.loc 1 2003 9 is_stmt 0 view .LVU2077
 6059 0086 0024     		movs	r4, #0
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6060              		.loc 1 2003 2 view .LVU2078
 6061 0088 00E0     		b	.L472
 6062              	.LVL740:
 6063              	.L473:
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6064              		.loc 1 2003 38 is_stmt 1 discriminator 2 view .LVU2079
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6065              		.loc 1 2003 39 is_stmt 0 discriminator 2 view .LVU2080
 6066 008a 0134     		adds	r4, r4, #1
 6067              	.LVL741:
 6068              	.L472:
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6069              		.loc 1 2003 14 is_stmt 1 discriminator 1 view .LVU2081
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6070              		.loc 1 2003 2 is_stmt 0 discriminator 1 view .LVU2082
 6071 008c AC42     		cmp	r4, r5
 6072 008e 11D2     		bcs	.L477
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6073              		.loc 1 2003 26 discriminator 3 view .LVU2083
 6074 0090 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
2003:Src/ff.c      **** 		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 6075              		.loc 1 2003 20 discriminator 3 view .LVU2084
 6076 0092 2028     		cmp	r0, #32
 6077 0094 0ED0     		beq	.L477
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 202


2004:Src/ff.c      **** 			if (j == i - 1) break;
 6078              		.loc 1 2004 3 is_stmt 1 view .LVU2085
2004:Src/ff.c      **** 			if (j == i - 1) break;
 6079              		.loc 1 2004 7 is_stmt 0 view .LVU2086
 6080 0096 FFF7FEFF 		bl	dbc_1st
 6081              	.LVL742:
2004:Src/ff.c      **** 			if (j == i - 1) break;
 6082              		.loc 1 2004 6 view .LVU2087
 6083 009a 0028     		cmp	r0, #0
 6084 009c F5D0     		beq	.L473
2005:Src/ff.c      **** 			j++;
 6085              		.loc 1 2005 4 is_stmt 1 view .LVU2088
2005:Src/ff.c      **** 			j++;
 6086              		.loc 1 2005 15 is_stmt 0 view .LVU2089
 6087 009e BB1E     		subs	r3, r7, #2
2005:Src/ff.c      **** 			j++;
 6088              		.loc 1 2005 7 view .LVU2090
 6089 00a0 A342     		cmp	r3, r4
 6090 00a2 07D0     		beq	.L477
2006:Src/ff.c      **** 		}
 6091              		.loc 1 2006 4 is_stmt 1 view .LVU2091
2006:Src/ff.c      **** 		}
 6092              		.loc 1 2006 5 is_stmt 0 view .LVU2092
 6093 00a4 0134     		adds	r4, r4, #1
 6094              	.LVL743:
2006:Src/ff.c      **** 		}
 6095              		.loc 1 2006 5 view .LVU2093
 6096 00a6 F0E7     		b	.L473
 6097              	.L479:
2010:Src/ff.c      **** 	} while (j < 8);
 6098              		.loc 1 2010 12 view .LVU2094
 6099 00a8 2022     		movs	r2, #32
 6100              	.L476:
2010:Src/ff.c      **** 	} while (j < 8);
 6101              		.loc 1 2010 8 discriminator 4 view .LVU2095
 6102 00aa 631C     		adds	r3, r4, #1
 6103              	.LVL744:
2010:Src/ff.c      **** 	} while (j < 8);
 6104              		.loc 1 2010 12 discriminator 4 view .LVU2096
 6105 00ac 3255     		strb	r2, [r6, r4]
2011:Src/ff.c      **** }
 6106              		.loc 1 2011 10 is_stmt 1 discriminator 4 view .LVU2097
2011:Src/ff.c      **** }
 6107              		.loc 1 2011 2 is_stmt 0 discriminator 4 view .LVU2098
 6108 00ae 072B     		cmp	r3, #7
 6109 00b0 09D8     		bhi	.L482
2010:Src/ff.c      **** 	} while (j < 8);
 6110              		.loc 1 2010 8 view .LVU2099
 6111 00b2 1C46     		mov	r4, r3
 6112              	.LVL745:
 6113              	.L477:
2009:Src/ff.c      **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 6114              		.loc 1 2009 2 is_stmt 1 view .LVU2100
2010:Src/ff.c      **** 	} while (j < 8);
 6115              		.loc 1 2010 3 view .LVU2101
2010:Src/ff.c      **** 	} while (j < 8);
 6116              		.loc 1 2010 12 is_stmt 0 view .LVU2102
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 203


 6117 00b4 072D     		cmp	r5, #7
 6118 00b6 F7D8     		bhi	.L479
 6119              	.LVL746:
2010:Src/ff.c      **** 	} while (j < 8);
 6120              		.loc 1 2010 12 discriminator 1 view .LVU2103
 6121 00b8 05F10803 		add	r3, r5, #8
 6122 00bc 6B44     		add	r3, sp, r3
 6123 00be 13F8082C 		ldrb	r2, [r3, #-8]	@ zero_extendqisi2
2010:Src/ff.c      **** 	} while (j < 8);
 6124              		.loc 1 2010 28 discriminator 1 view .LVU2104
 6125 00c2 0135     		adds	r5, r5, #1
 6126              	.LVL747:
2010:Src/ff.c      **** 	} while (j < 8);
 6127              		.loc 1 2010 28 discriminator 1 view .LVU2105
 6128 00c4 F1E7     		b	.L476
 6129              	.LVL748:
 6130              	.L482:
2012:Src/ff.c      **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
 6131              		.loc 1 2012 1 view .LVU2106
 6132 00c6 03B0     		add	sp, sp, #12
 6133              	.LCFI37:
 6134              		.cfi_def_cfa_offset 20
 6135              		@ sp needed
 6136 00c8 F0BD     		pop	{r4, r5, r6, r7, pc}
2012:Src/ff.c      **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
 6137              		.loc 1 2012 1 view .LVU2107
 6138              		.cfi_endproc
 6139              	.LFE25:
 6141              		.section	.text.dir_register,"ax",%progbits
 6142              		.align	1
 6143              		.syntax unified
 6144              		.thumb
 6145              		.thumb_func
 6146              		.fpu softvfp
 6148              	dir_register:
 6149              	.LVL749:
 6150              	.LFB29:
2437:Src/ff.c      **** 	FRESULT res;
 6151              		.loc 1 2437 1 is_stmt 1 view -0
 6152              		.cfi_startproc
 6153              		@ args = 0, pretend = 0, frame = 16
 6154              		@ frame_needed = 0, uses_anonymous_args = 0
2437:Src/ff.c      **** 	FRESULT res;
 6155              		.loc 1 2437 1 is_stmt 0 view .LVU2109
 6156 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6157              	.LCFI38:
 6158              		.cfi_def_cfa_offset 24
 6159              		.cfi_offset 4, -24
 6160              		.cfi_offset 5, -20
 6161              		.cfi_offset 6, -16
 6162              		.cfi_offset 7, -12
 6163              		.cfi_offset 8, -8
 6164              		.cfi_offset 14, -4
 6165 0004 84B0     		sub	sp, sp, #16
 6166              	.LCFI39:
 6167              		.cfi_def_cfa_offset 40
2438:Src/ff.c      **** 	FATFS *fs = dp->obj.fs;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 204


 6168              		.loc 1 2438 2 is_stmt 1 view .LVU2110
2439:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 6169              		.loc 1 2439 2 view .LVU2111
2439:Src/ff.c      **** #if FF_USE_LFN		/* LFN configuration */
 6170              		.loc 1 2439 9 is_stmt 0 view .LVU2112
 6171 0006 0768     		ldr	r7, [r0]
 6172              	.LVL750:
2441:Src/ff.c      **** 	BYTE sn[12], sum;
 6173              		.loc 1 2441 2 is_stmt 1 view .LVU2113
2442:Src/ff.c      **** 
 6174              		.loc 1 2442 2 view .LVU2114
2445:Src/ff.c      **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 6175              		.loc 1 2445 2 view .LVU2115
2445:Src/ff.c      **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 6176              		.loc 1 2445 12 is_stmt 0 view .LVU2116
 6177 0008 90F82B50 		ldrb	r5, [r0, #43]	@ zero_extendqisi2
2445:Src/ff.c      **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 6178              		.loc 1 2445 5 view .LVU2117
 6179 000c 15F0A00F 		tst	r5, #160
 6180 0010 40F09180 		bne	.L494
 6181 0014 0646     		mov	r6, r0
2446:Src/ff.c      **** 
 6182              		.loc 1 2446 11 view .LVU2118
 6183 0016 0024     		movs	r4, #0
 6184 0018 00E0     		b	.L485
 6185              	.LVL751:
 6186              	.L486:
2446:Src/ff.c      **** 
 6187              		.loc 1 2446 40 is_stmt 1 discriminator 3 view .LVU2119
2446:Src/ff.c      **** 
 6188              		.loc 1 2446 33 discriminator 3 view .LVU2120
2446:Src/ff.c      **** 
 6189              		.loc 1 2446 36 is_stmt 0 discriminator 3 view .LVU2121
 6190 001a 0134     		adds	r4, r4, #1
 6191              	.LVL752:
 6192              	.L485:
2446:Src/ff.c      **** 
 6193              		.loc 1 2446 16 is_stmt 1 discriminator 1 view .LVU2122
2446:Src/ff.c      **** 
 6194              		.loc 1 2446 18 is_stmt 0 discriminator 1 view .LVU2123
 6195 001c FB68     		ldr	r3, [r7, #12]
2446:Src/ff.c      **** 
 6196              		.loc 1 2446 26 discriminator 1 view .LVU2124
 6197 001e 33F81430 		ldrh	r3, [r3, r4, lsl #1]
2446:Src/ff.c      **** 
 6198              		.loc 1 2446 2 discriminator 1 view .LVU2125
 6199 0022 002B     		cmp	r3, #0
 6200 0024 F9D1     		bne	.L486
2480:Src/ff.c      **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 6201              		.loc 1 2480 2 is_stmt 1 view .LVU2126
 6202 0026 01AB     		add	r3, sp, #4
 6203 0028 306A     		ldr	r0, [r6, #32]	@ unaligned
 6204              	.LVL753:
2480:Src/ff.c      **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 6205              		.loc 1 2480 2 is_stmt 0 view .LVU2127
 6206 002a 716A     		ldr	r1, [r6, #36]	@ unaligned
 6207 002c B26A     		ldr	r2, [r6, #40]	@ unaligned
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 205


 6208 002e 07C3     		stmia	r3!, {r0, r1, r2}
2481:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 6209              		.loc 1 2481 2 is_stmt 1 view .LVU2128
2481:Src/ff.c      **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 6210              		.loc 1 2481 5 is_stmt 0 view .LVU2129
 6211 0030 15F0010F 		tst	r5, #1
 6212 0034 1DD0     		beq	.L487
2482:Src/ff.c      **** 		for (n = 1; n < 100; n++) {
 6213              		.loc 1 2482 3 is_stmt 1 view .LVU2130
2482:Src/ff.c      **** 		for (n = 1; n < 100; n++) {
 6214              		.loc 1 2482 18 is_stmt 0 view .LVU2131
 6215 0036 4023     		movs	r3, #64
 6216 0038 86F82B30 		strb	r3, [r6, #43]
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6217              		.loc 1 2483 3 is_stmt 1 view .LVU2132
 6218              	.LVL754:
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6219              		.loc 1 2483 10 is_stmt 0 view .LVU2133
 6220 003c 0125     		movs	r5, #1
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6221              		.loc 1 2483 3 view .LVU2134
 6222 003e 00E0     		b	.L488
 6223              	.LVL755:
 6224              	.L498:
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6225              		.loc 1 2483 24 is_stmt 1 discriminator 2 view .LVU2135
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6226              		.loc 1 2483 25 is_stmt 0 discriminator 2 view .LVU2136
 6227 0040 0135     		adds	r5, r5, #1
 6228              	.LVL756:
 6229              	.L488:
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6230              		.loc 1 2483 15 is_stmt 1 discriminator 1 view .LVU2137
2483:Src/ff.c      **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 6231              		.loc 1 2483 3 is_stmt 0 discriminator 1 view .LVU2138
 6232 0042 632D     		cmp	r5, #99
 6233 0044 0CD8     		bhi	.L489
2484:Src/ff.c      **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 6234              		.loc 1 2484 4 is_stmt 1 view .LVU2139
 6235 0046 2B46     		mov	r3, r5
 6236 0048 FA68     		ldr	r2, [r7, #12]
 6237 004a 01A9     		add	r1, sp, #4
 6238 004c 06F12000 		add	r0, r6, #32
 6239 0050 FFF7FEFF 		bl	gen_numname
 6240              	.LVL757:
2485:Src/ff.c      **** 			if (res != FR_OK) break;
 6241              		.loc 1 2485 4 view .LVU2140
2485:Src/ff.c      **** 			if (res != FR_OK) break;
 6242              		.loc 1 2485 10 is_stmt 0 view .LVU2141
 6243 0054 3046     		mov	r0, r6
 6244 0056 FFF7FEFF 		bl	dir_find
 6245              	.LVL758:
2486:Src/ff.c      **** 		}
 6246              		.loc 1 2486 4 is_stmt 1 view .LVU2142
2486:Src/ff.c      **** 		}
 6247              		.loc 1 2486 7 is_stmt 0 view .LVU2143
 6248 005a 8046     		mov	r8, r0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 206


 6249 005c 0028     		cmp	r0, #0
 6250 005e EFD0     		beq	.L498
 6251              	.LVL759:
 6252              	.L489:
2488:Src/ff.c      **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 6253              		.loc 1 2488 3 is_stmt 1 view .LVU2144
2488:Src/ff.c      **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 6254              		.loc 1 2488 6 is_stmt 0 view .LVU2145
 6255 0060 642D     		cmp	r5, #100
 6256 0062 6BD0     		beq	.L495
2489:Src/ff.c      **** 		dp->fn[NSFLAG] = sn[NSFLAG];
 6257              		.loc 1 2489 3 is_stmt 1 view .LVU2146
2489:Src/ff.c      **** 		dp->fn[NSFLAG] = sn[NSFLAG];
 6258              		.loc 1 2489 6 is_stmt 0 view .LVU2147
 6259 0064 B8F1040F 		cmp	r8, #4
 6260 0068 1BD1     		bne	.L484
2490:Src/ff.c      **** 	}
 6261              		.loc 1 2490 3 is_stmt 1 view .LVU2148
2490:Src/ff.c      **** 	}
 6262              		.loc 1 2490 22 is_stmt 0 view .LVU2149
 6263 006a 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
2490:Src/ff.c      **** 	}
 6264              		.loc 1 2490 18 view .LVU2150
 6265 006e 86F82B30 		strb	r3, [r6, #43]
 6266              	.LVL760:
 6267              	.L487:
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6268              		.loc 1 2494 2 is_stmt 1 view .LVU2151
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6269              		.loc 1 2494 13 is_stmt 0 view .LVU2152
 6270 0072 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6271              		.loc 1 2494 54 view .LVU2153
 6272 0076 13F0020F 		tst	r3, #2
 6273 007a 06D0     		beq	.L496
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6274              		.loc 1 2494 39 discriminator 1 view .LVU2154
 6275 007c 0C34     		adds	r4, r4, #12
 6276              	.LVL761:
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6277              		.loc 1 2494 45 discriminator 1 view .LVU2155
 6278 007e 314B     		ldr	r3, .L501
 6279 0080 A3FB0434 		umull	r3, r4, r3, r4
 6280              	.LVL762:
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6281              		.loc 1 2494 45 discriminator 1 view .LVU2156
 6282 0084 A408     		lsrs	r4, r4, #2
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6283              		.loc 1 2494 54 discriminator 1 view .LVU2157
 6284 0086 0134     		adds	r4, r4, #1
 6285 0088 00E0     		b	.L491
 6286              	.LVL763:
 6287              	.L496:
2494:Src/ff.c      **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 6288              		.loc 1 2494 54 view .LVU2158
 6289 008a 0124     		movs	r4, #1
 6290              	.LVL764:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 207


 6291              	.L491:
2495:Src/ff.c      **** 	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 6292              		.loc 1 2495 2 is_stmt 1 discriminator 4 view .LVU2159
2495:Src/ff.c      **** 	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 6293              		.loc 1 2495 8 is_stmt 0 discriminator 4 view .LVU2160
 6294 008c 2146     		mov	r1, r4
 6295 008e 3046     		mov	r0, r6
 6296 0090 FFF7FEFF 		bl	dir_alloc
 6297              	.LVL765:
2496:Src/ff.c      **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 6298              		.loc 1 2496 2 is_stmt 1 discriminator 4 view .LVU2161
2496:Src/ff.c      **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 6299              		.loc 1 2496 5 is_stmt 0 discriminator 4 view .LVU2162
 6300 0094 8046     		mov	r8, r0
 6301 0096 08B9     		cbnz	r0, .L492
 6302              	.LVL766:
2496:Src/ff.c      **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 6303              		.loc 1 2496 19 discriminator 1 view .LVU2163
 6304 0098 013C     		subs	r4, r4, #1
 6305              	.LVL767:
2496:Src/ff.c      **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 6306              		.loc 1 2496 19 discriminator 1 view .LVU2164
 6307 009a 06D1     		bne	.L499
 6308              	.L492:
 6309              	.LVL768:
2516:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 6310              		.loc 1 2516 2 is_stmt 1 view .LVU2165
2516:Src/ff.c      **** 		res = move_window(fs, dp->sect);
 6311              		.loc 1 2516 5 is_stmt 0 view .LVU2166
 6312 009c B8F1000F 		cmp	r8, #0
 6313 00a0 2AD0     		beq	.L500
 6314              	.LVL769:
 6315              	.L484:
2529:Src/ff.c      **** 
 6316              		.loc 1 2529 1 view .LVU2167
 6317 00a2 4046     		mov	r0, r8
 6318 00a4 04B0     		add	sp, sp, #16
 6319              	.LCFI40:
 6320              		.cfi_remember_state
 6321              		.cfi_def_cfa_offset 24
 6322              		@ sp needed
 6323 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6324              	.LVL770:
 6325              	.L499:
 6326              	.LCFI41:
 6327              		.cfi_restore_state
2497:Src/ff.c      **** 		if (res == FR_OK) {
 6328              		.loc 1 2497 3 is_stmt 1 view .LVU2168
2497:Src/ff.c      **** 		if (res == FR_OK) {
 6329              		.loc 1 2497 23 is_stmt 0 view .LVU2169
 6330 00aa 3169     		ldr	r1, [r6, #16]
2497:Src/ff.c      **** 		if (res == FR_OK) {
 6331              		.loc 1 2497 9 view .LVU2170
 6332 00ac A1EB4411 		sub	r1, r1, r4, lsl #5
 6333 00b0 3046     		mov	r0, r6
 6334              	.LVL771:
2497:Src/ff.c      **** 		if (res == FR_OK) {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 208


 6335              		.loc 1 2497 9 view .LVU2171
 6336 00b2 FFF7FEFF 		bl	dir_sdi
 6337              	.LVL772:
2498:Src/ff.c      **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 6338              		.loc 1 2498 3 is_stmt 1 view .LVU2172
2498:Src/ff.c      **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 6339              		.loc 1 2498 6 is_stmt 0 view .LVU2173
 6340 00b6 8046     		mov	r8, r0
 6341 00b8 0028     		cmp	r0, #0
 6342 00ba EFD1     		bne	.L492
2499:Src/ff.c      **** 			do {					/* Store LFN entries in bottom first */
 6343              		.loc 1 2499 4 is_stmt 1 view .LVU2174
2499:Src/ff.c      **** 			do {					/* Store LFN entries in bottom first */
 6344              		.loc 1 2499 10 is_stmt 0 view .LVU2175
 6345 00bc 06F12000 		add	r0, r6, #32
 6346              	.LVL773:
2499:Src/ff.c      **** 			do {					/* Store LFN entries in bottom first */
 6347              		.loc 1 2499 10 view .LVU2176
 6348 00c0 FFF7FEFF 		bl	sum_sfn
 6349              	.LVL774:
 6350 00c4 0546     		mov	r5, r0
 6351              	.LVL775:
 6352              	.L493:
2500:Src/ff.c      **** 				res = move_window(fs, dp->sect);
 6353              		.loc 1 2500 4 is_stmt 1 view .LVU2177
2501:Src/ff.c      **** 				if (res != FR_OK) break;
 6354              		.loc 1 2501 5 view .LVU2178
2501:Src/ff.c      **** 				if (res != FR_OK) break;
 6355              		.loc 1 2501 11 is_stmt 0 view .LVU2179
 6356 00c6 B169     		ldr	r1, [r6, #24]
 6357 00c8 3846     		mov	r0, r7
 6358 00ca FFF7FEFF 		bl	move_window
 6359              	.LVL776:
2502:Src/ff.c      **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 6360              		.loc 1 2502 5 is_stmt 1 view .LVU2180
2502:Src/ff.c      **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 6361              		.loc 1 2502 8 is_stmt 0 view .LVU2181
 6362 00ce 8046     		mov	r8, r0
 6363 00d0 0028     		cmp	r0, #0
 6364 00d2 E3D1     		bne	.L492
2503:Src/ff.c      **** 				fs->wflag = 1;
 6365              		.loc 1 2503 5 is_stmt 1 view .LVU2182
 6366 00d4 2B46     		mov	r3, r5
 6367 00d6 E2B2     		uxtb	r2, r4
 6368 00d8 F169     		ldr	r1, [r6, #28]
 6369 00da F868     		ldr	r0, [r7, #12]
 6370              	.LVL777:
2503:Src/ff.c      **** 				fs->wflag = 1;
 6371              		.loc 1 2503 5 is_stmt 0 view .LVU2183
 6372 00dc FFF7FEFF 		bl	put_lfn
 6373              	.LVL778:
2504:Src/ff.c      **** 				res = dir_next(dp, 0);	/* Next entry */
 6374              		.loc 1 2504 5 is_stmt 1 view .LVU2184
2504:Src/ff.c      **** 				res = dir_next(dp, 0);	/* Next entry */
 6375              		.loc 1 2504 15 is_stmt 0 view .LVU2185
 6376 00e0 0123     		movs	r3, #1
 6377 00e2 FB70     		strb	r3, [r7, #3]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 209


2505:Src/ff.c      **** 			} while (res == FR_OK && --n_ent);
 6378              		.loc 1 2505 5 is_stmt 1 view .LVU2186
2505:Src/ff.c      **** 			} while (res == FR_OK && --n_ent);
 6379              		.loc 1 2505 11 is_stmt 0 view .LVU2187
 6380 00e4 0021     		movs	r1, #0
 6381 00e6 3046     		mov	r0, r6
 6382 00e8 FFF7FEFF 		bl	dir_next
 6383              	.LVL779:
2506:Src/ff.c      **** 		}
 6384              		.loc 1 2506 12 is_stmt 1 view .LVU2188
2506:Src/ff.c      **** 		}
 6385              		.loc 1 2506 4 is_stmt 0 view .LVU2189
 6386 00ec 8046     		mov	r8, r0
 6387 00ee 0028     		cmp	r0, #0
 6388 00f0 D4D1     		bne	.L492
 6389              	.LVL780:
2506:Src/ff.c      **** 		}
 6390              		.loc 1 2506 26 discriminator 1 view .LVU2190
 6391 00f2 013C     		subs	r4, r4, #1
 6392              	.LVL781:
2506:Src/ff.c      **** 		}
 6393              		.loc 1 2506 26 discriminator 1 view .LVU2191
 6394 00f4 E7D1     		bne	.L493
 6395 00f6 D1E7     		b	.L492
 6396              	.LVL782:
 6397              	.L500:
2517:Src/ff.c      **** 		if (res == FR_OK) {
 6398              		.loc 1 2517 3 is_stmt 1 view .LVU2192
2517:Src/ff.c      **** 		if (res == FR_OK) {
 6399              		.loc 1 2517 9 is_stmt 0 view .LVU2193
 6400 00f8 B169     		ldr	r1, [r6, #24]
 6401 00fa 3846     		mov	r0, r7
 6402 00fc FFF7FEFF 		bl	move_window
 6403              	.LVL783:
2518:Src/ff.c      **** 			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 6404              		.loc 1 2518 3 is_stmt 1 view .LVU2194
2518:Src/ff.c      **** 			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 6405              		.loc 1 2518 6 is_stmt 0 view .LVU2195
 6406 0100 8046     		mov	r8, r0
 6407 0102 0028     		cmp	r0, #0
 6408 0104 CDD1     		bne	.L484
2519:Src/ff.c      **** 			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 6409              		.loc 1 2519 4 is_stmt 1 view .LVU2196
 6410 0106 2022     		movs	r2, #32
 6411 0108 0021     		movs	r1, #0
 6412 010a F069     		ldr	r0, [r6, #28]
 6413              	.LVL784:
2519:Src/ff.c      **** 			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 6414              		.loc 1 2519 4 is_stmt 0 view .LVU2197
 6415 010c FFF7FEFF 		bl	memset
 6416              	.LVL785:
2520:Src/ff.c      **** #if FF_USE_LFN
 6417              		.loc 1 2520 4 is_stmt 1 view .LVU2198
2520:Src/ff.c      **** #if FF_USE_LFN
 6418              		.loc 1 2520 19 is_stmt 0 view .LVU2199
 6419 0110 F369     		ldr	r3, [r6, #28]
2520:Src/ff.c      **** #if FF_USE_LFN
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 210


 6420              		.loc 1 2520 4 view .LVU2200
 6421 0112 316A     		ldr	r1, [r6, #32]	@ unaligned
 6422 0114 726A     		ldr	r2, [r6, #36]	@ unaligned
 6423 0116 1960     		str	r1, [r3]	@ unaligned
 6424 0118 5A60     		str	r2, [r3, #4]	@ unaligned
 6425 011a 318D     		ldrh	r1, [r6, #40]	@ unaligned
 6426 011c 96F82A20 		ldrb	r2, [r6, #42]	@ zero_extendqisi2
 6427 0120 1981     		strh	r1, [r3, #8]	@ unaligned
 6428 0122 9A72     		strb	r2, [r3, #10]
2522:Src/ff.c      **** #endif
 6429              		.loc 1 2522 4 is_stmt 1 view .LVU2201
2522:Src/ff.c      **** #endif
 6430              		.loc 1 2522 31 is_stmt 0 view .LVU2202
 6431 0124 96F82B30 		ldrb	r3, [r6, #43]	@ zero_extendqisi2
2522:Src/ff.c      **** #endif
 6432              		.loc 1 2522 6 view .LVU2203
 6433 0128 F269     		ldr	r2, [r6, #28]
2522:Src/ff.c      **** #endif
 6434              		.loc 1 2522 40 view .LVU2204
 6435 012a 03F01803 		and	r3, r3, #24
2522:Src/ff.c      **** #endif
 6436              		.loc 1 2522 23 view .LVU2205
 6437 012e 1373     		strb	r3, [r2, #12]
2524:Src/ff.c      **** 		}
 6438              		.loc 1 2524 4 is_stmt 1 view .LVU2206
2524:Src/ff.c      **** 		}
 6439              		.loc 1 2524 14 is_stmt 0 view .LVU2207
 6440 0130 0123     		movs	r3, #1
 6441 0132 FB70     		strb	r3, [r7, #3]
 6442 0134 B5E7     		b	.L484
 6443              	.LVL786:
 6444              	.L494:
2445:Src/ff.c      **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 6445              		.loc 1 2445 52 view .LVU2208
 6446 0136 4FF00608 		mov	r8, #6
 6447 013a B2E7     		b	.L484
 6448              	.LVL787:
 6449              	.L495:
2488:Src/ff.c      **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 6450              		.loc 1 2488 24 view .LVU2209
 6451 013c 4FF00708 		mov	r8, #7
 6452              	.LVL788:
2488:Src/ff.c      **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 6453              		.loc 1 2488 24 view .LVU2210
 6454 0140 AFE7     		b	.L484
 6455              	.L502:
 6456 0142 00BF     		.align	2
 6457              	.L501:
 6458 0144 4FECC44E 		.word	1321528399
 6459              		.cfi_endproc
 6460              	.LFE29:
 6462              		.section	.text.sync_fs,"ax",%progbits
 6463              		.align	1
 6464              		.syntax unified
 6465              		.thumb
 6466              		.thumb_func
 6467              		.fpu softvfp
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 211


 6469              	sync_fs:
 6470              	.LVL789:
 6471              	.LFB10:
1081:Src/ff.c      **** 	FRESULT res;
 6472              		.loc 1 1081 1 is_stmt 1 view -0
 6473              		.cfi_startproc
 6474              		@ args = 0, pretend = 0, frame = 0
 6475              		@ frame_needed = 0, uses_anonymous_args = 0
1081:Src/ff.c      **** 	FRESULT res;
 6476              		.loc 1 1081 1 is_stmt 0 view .LVU2212
 6477 0000 70B5     		push	{r4, r5, r6, lr}
 6478              	.LCFI42:
 6479              		.cfi_def_cfa_offset 16
 6480              		.cfi_offset 4, -16
 6481              		.cfi_offset 5, -12
 6482              		.cfi_offset 6, -8
 6483              		.cfi_offset 14, -4
 6484 0002 0446     		mov	r4, r0
1082:Src/ff.c      **** 
 6485              		.loc 1 1082 2 is_stmt 1 view .LVU2213
1085:Src/ff.c      **** 	if (res == FR_OK) {
 6486              		.loc 1 1085 2 view .LVU2214
1085:Src/ff.c      **** 	if (res == FR_OK) {
 6487              		.loc 1 1085 8 is_stmt 0 view .LVU2215
 6488 0004 FFF7FEFF 		bl	sync_window
 6489              	.LVL790:
1086:Src/ff.c      **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 6490              		.loc 1 1086 2 is_stmt 1 view .LVU2216
1086:Src/ff.c      **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 6491              		.loc 1 1086 5 is_stmt 0 view .LVU2217
 6492 0008 0546     		mov	r5, r0
 6493 000a 48B9     		cbnz	r0, .L504
1087:Src/ff.c      **** 			/* Create FSInfo structure */
 6494              		.loc 1 1087 3 is_stmt 1 view .LVU2218
1087:Src/ff.c      **** 			/* Create FSInfo structure */
 6495              		.loc 1 1087 9 is_stmt 0 view .LVU2219
 6496 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
1087:Src/ff.c      **** 			/* Create FSInfo structure */
 6497              		.loc 1 1087 6 view .LVU2220
 6498 000e 032B     		cmp	r3, #3
 6499 0010 08D0     		beq	.L508
 6500              	.LVL791:
 6501              	.L505:
1100:Src/ff.c      **** 	}
 6502              		.loc 1 1100 3 is_stmt 1 view .LVU2221
1100:Src/ff.c      **** 	}
 6503              		.loc 1 1100 7 is_stmt 0 view .LVU2222
 6504 0012 0022     		movs	r2, #0
 6505 0014 1146     		mov	r1, r2
 6506 0016 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 6507 0018 FFF7FEFF 		bl	disk_ioctl
 6508              	.LVL792:
1100:Src/ff.c      **** 	}
 6509              		.loc 1 1100 6 view .LVU2223
 6510 001c 00B1     		cbz	r0, .L504
1100:Src/ff.c      **** 	}
 6511              		.loc 1 1100 57 view .LVU2224
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 212


 6512 001e 0125     		movs	r5, #1
 6513              	.L504:
 6514              	.LVL793:
1103:Src/ff.c      **** }
 6515              		.loc 1 1103 2 is_stmt 1 view .LVU2225
1104:Src/ff.c      **** 
 6516              		.loc 1 1104 1 is_stmt 0 view .LVU2226
 6517 0020 2846     		mov	r0, r5
 6518 0022 70BD     		pop	{r4, r5, r6, pc}
 6519              	.LVL794:
 6520              	.L508:
1087:Src/ff.c      **** 			/* Create FSInfo structure */
 6521              		.loc 1 1087 36 discriminator 1 view .LVU2227
 6522 0024 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
1087:Src/ff.c      **** 			/* Create FSInfo structure */
 6523              		.loc 1 1087 31 discriminator 1 view .LVU2228
 6524 0026 012B     		cmp	r3, #1
 6525 0028 F3D1     		bne	.L505
1089:Src/ff.c      **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 6526              		.loc 1 1089 4 is_stmt 1 view .LVU2229
1089:Src/ff.c      **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 6527              		.loc 1 1089 13 is_stmt 0 view .LVU2230
 6528 002a 04F13406 		add	r6, r4, #52
1089:Src/ff.c      **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 6529              		.loc 1 1089 4 view .LVU2231
 6530 002e 4FF40072 		mov	r2, #512
 6531 0032 0021     		movs	r1, #0
 6532 0034 3046     		mov	r0, r6
 6533              	.LVL795:
1089:Src/ff.c      **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 6534              		.loc 1 1089 4 view .LVU2232
 6535 0036 FFF7FEFF 		bl	memset
 6536              	.LVL796:
1090:Src/ff.c      **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 6537              		.loc 1 1090 4 is_stmt 1 view .LVU2233
 6538 003a 4AF65521 		movw	r1, #43605
 6539 003e 04F23220 		addw	r0, r4, #562
 6540 0042 FFF7FEFF 		bl	st_word
 6541              	.LVL797:
1091:Src/ff.c      **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 6542              		.loc 1 1091 4 view .LVU2234
 6543 0046 0F49     		ldr	r1, .L509
 6544 0048 3046     		mov	r0, r6
 6545 004a FFF7FEFF 		bl	st_dword
 6546              	.LVL798:
1092:Src/ff.c      **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 6547              		.loc 1 1092 4 view .LVU2235
 6548 004e 0E49     		ldr	r1, .L509+4
 6549 0050 04F50670 		add	r0, r4, #536
 6550 0054 FFF7FEFF 		bl	st_dword
 6551              	.LVL799:
1093:Src/ff.c      **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 6552              		.loc 1 1093 4 view .LVU2236
 6553 0058 6169     		ldr	r1, [r4, #20]
 6554 005a 04F50770 		add	r0, r4, #540
 6555 005e FFF7FEFF 		bl	st_dword
 6556              	.LVL800:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 213


1094:Src/ff.c      **** 			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 6557              		.loc 1 1094 4 view .LVU2237
 6558 0062 2169     		ldr	r1, [r4, #16]
 6559 0064 04F50870 		add	r0, r4, #544
 6560 0068 FFF7FEFF 		bl	st_dword
 6561              	.LVL801:
1095:Src/ff.c      **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 6562              		.loc 1 1095 4 view .LVU2238
1095:Src/ff.c      **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 6563              		.loc 1 1095 20 is_stmt 0 view .LVU2239
 6564 006c 226A     		ldr	r2, [r4, #32]
1095:Src/ff.c      **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 6565              		.loc 1 1095 30 view .LVU2240
 6566 006e 0132     		adds	r2, r2, #1
1095:Src/ff.c      **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 6567              		.loc 1 1095 16 view .LVU2241
 6568 0070 2263     		str	r2, [r4, #48]
1096:Src/ff.c      **** 			fs->fsi_flag = 0;
 6569              		.loc 1 1096 4 is_stmt 1 view .LVU2242
 6570 0072 0123     		movs	r3, #1
 6571 0074 3146     		mov	r1, r6
 6572 0076 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 6573 0078 FFF7FEFF 		bl	disk_write
 6574              	.LVL802:
1097:Src/ff.c      **** 		}
 6575              		.loc 1 1097 4 view .LVU2243
1097:Src/ff.c      **** 		}
 6576              		.loc 1 1097 17 is_stmt 0 view .LVU2244
 6577 007c 0023     		movs	r3, #0
 6578 007e 2371     		strb	r3, [r4, #4]
 6579 0080 C7E7     		b	.L505
 6580              	.L510:
 6581 0082 00BF     		.align	2
 6582              	.L509:
 6583 0084 52526141 		.word	1096897106
 6584 0088 72724161 		.word	1631679090
 6585              		.cfi_endproc
 6586              	.LFE10:
 6588              		.section	.text.f_mount,"ax",%progbits
 6589              		.align	1
 6590              		.global	f_mount
 6591              		.syntax unified
 6592              		.thumb
 6593              		.thumb_func
 6594              		.fpu softvfp
 6596              	f_mount:
 6597              	.LVL803:
 6598              	.LFB39:
3589:Src/ff.c      **** 
3590:Src/ff.c      **** 
3591:Src/ff.c      **** 
3592:Src/ff.c      **** 
3593:Src/ff.c      **** /*---------------------------------------------------------------------------
3594:Src/ff.c      **** 
3595:Src/ff.c      ****    Public Functions (FatFs API)
3596:Src/ff.c      **** 
3597:Src/ff.c      **** ----------------------------------------------------------------------------*/
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 214


3598:Src/ff.c      **** 
3599:Src/ff.c      **** 
3600:Src/ff.c      **** 
3601:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3602:Src/ff.c      **** /* Mount/Unmount a Logical Drive                                         */
3603:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3604:Src/ff.c      **** 
3605:Src/ff.c      **** FRESULT f_mount (
3606:Src/ff.c      **** 	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
3607:Src/ff.c      **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3608:Src/ff.c      **** 	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
3609:Src/ff.c      **** )
3610:Src/ff.c      **** {
 6599              		.loc 1 3610 1 is_stmt 1 view -0
 6600              		.cfi_startproc
 6601              		@ args = 0, pretend = 0, frame = 16
 6602              		@ frame_needed = 0, uses_anonymous_args = 0
 6603              		.loc 1 3610 1 is_stmt 0 view .LVU2246
 6604 0000 10B5     		push	{r4, lr}
 6605              	.LCFI43:
 6606              		.cfi_def_cfa_offset 8
 6607              		.cfi_offset 4, -8
 6608              		.cfi_offset 14, -4
 6609 0002 84B0     		sub	sp, sp, #16
 6610              	.LCFI44:
 6611              		.cfi_def_cfa_offset 24
 6612 0004 0190     		str	r0, [sp, #4]
 6613 0006 0091     		str	r1, [sp]
 6614 0008 1446     		mov	r4, r2
3611:Src/ff.c      **** 	FATFS *cfs;
 6615              		.loc 1 3611 2 is_stmt 1 view .LVU2247
3612:Src/ff.c      **** 	int vol;
 6616              		.loc 1 3612 2 view .LVU2248
3613:Src/ff.c      **** 	FRESULT res;
 6617              		.loc 1 3613 2 view .LVU2249
3614:Src/ff.c      **** 	const TCHAR *rp = path;
 6618              		.loc 1 3614 2 view .LVU2250
 6619              		.loc 1 3614 15 is_stmt 0 view .LVU2251
 6620 000a 0391     		str	r1, [sp, #12]
3615:Src/ff.c      **** 
3616:Src/ff.c      **** 
3617:Src/ff.c      **** 	/* Get logical drive number */
3618:Src/ff.c      **** 	vol = get_ldnumber(&rp);
 6621              		.loc 1 3618 2 is_stmt 1 view .LVU2252
 6622              		.loc 1 3618 8 is_stmt 0 view .LVU2253
 6623 000c 03A8     		add	r0, sp, #12
 6624              	.LVL804:
 6625              		.loc 1 3618 8 view .LVU2254
 6626 000e FFF7FEFF 		bl	get_ldnumber
 6627              	.LVL805:
3619:Src/ff.c      **** 	if (vol < 0) return FR_INVALID_DRIVE;
 6628              		.loc 1 3619 2 is_stmt 1 view .LVU2255
 6629              		.loc 1 3619 5 is_stmt 0 view .LVU2256
 6630 0012 0028     		cmp	r0, #0
 6631              		.loc 1 3619 5 view .LVU2257
 6632 0014 17DB     		blt	.L515
3620:Src/ff.c      **** 	cfs = FatFs[vol];					/* Pointer to fs object */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 215


 6633              		.loc 1 3620 2 is_stmt 1 view .LVU2258
 6634              		.loc 1 3620 6 is_stmt 0 view .LVU2259
 6635 0016 0D4B     		ldr	r3, .L519
 6636 0018 53F82030 		ldr	r3, [r3, r0, lsl #2]
 6637              	.LVL806:
3621:Src/ff.c      **** 
3622:Src/ff.c      **** 	if (cfs) {
 6638              		.loc 1 3622 2 is_stmt 1 view .LVU2260
 6639              		.loc 1 3622 5 is_stmt 0 view .LVU2261
 6640 001c 0BB1     		cbz	r3, .L513
3623:Src/ff.c      **** #if FF_FS_LOCK != 0
3624:Src/ff.c      **** 		clear_lock(cfs);
3625:Src/ff.c      **** #endif
3626:Src/ff.c      **** #if FF_FS_REENTRANT						/* Discard sync object of the current volume */
3627:Src/ff.c      **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3628:Src/ff.c      **** #endif
3629:Src/ff.c      **** 		cfs->fs_type = 0;				/* Clear old fs object */
 6641              		.loc 1 3629 3 is_stmt 1 view .LVU2262
 6642              		.loc 1 3629 16 is_stmt 0 view .LVU2263
 6643 001e 0022     		movs	r2, #0
 6644 0020 1A70     		strb	r2, [r3]
 6645              	.L513:
3630:Src/ff.c      **** 	}
3631:Src/ff.c      **** 
3632:Src/ff.c      **** 	if (fs) {
 6646              		.loc 1 3632 2 is_stmt 1 view .LVU2264
 6647              		.loc 1 3632 6 is_stmt 0 view .LVU2265
 6648 0022 019B     		ldr	r3, [sp, #4]
 6649              	.LVL807:
 6650              		.loc 1 3632 5 view .LVU2266
 6651 0024 0BB1     		cbz	r3, .L514
3633:Src/ff.c      **** 		fs->fs_type = 0;				/* Clear new fs object */
 6652              		.loc 1 3633 3 is_stmt 1 view .LVU2267
 6653              		.loc 1 3633 15 is_stmt 0 view .LVU2268
 6654 0026 0022     		movs	r2, #0
 6655 0028 1A70     		strb	r2, [r3]
 6656              	.L514:
3634:Src/ff.c      **** #if FF_FS_REENTRANT						/* Create sync object for the new volume */
3635:Src/ff.c      **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3636:Src/ff.c      **** #endif
3637:Src/ff.c      **** 	}
3638:Src/ff.c      **** 	FatFs[vol] = fs;					/* Register new fs object */
 6657              		.loc 1 3638 2 is_stmt 1 view .LVU2269
 6658              		.loc 1 3638 13 is_stmt 0 view .LVU2270
 6659 002a 084B     		ldr	r3, .L519
 6660 002c 019A     		ldr	r2, [sp, #4]
 6661 002e 43F82020 		str	r2, [r3, r0, lsl #2]
3639:Src/ff.c      **** 
3640:Src/ff.c      **** 	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 6662              		.loc 1 3640 2 is_stmt 1 view .LVU2271
 6663              		.loc 1 3640 5 is_stmt 0 view .LVU2272
 6664 0032 14B9     		cbnz	r4, .L518
 6665              		.loc 1 3640 23 view .LVU2273
 6666 0034 2046     		mov	r0, r4
 6667              	.LVL808:
 6668              	.L512:
3641:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 216


3642:Src/ff.c      **** 	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
3643:Src/ff.c      **** 	LEAVE_FF(fs, res);
3644:Src/ff.c      **** }
 6669              		.loc 1 3644 1 view .LVU2274
 6670 0036 04B0     		add	sp, sp, #16
 6671              	.LCFI45:
 6672              		.cfi_remember_state
 6673              		.cfi_def_cfa_offset 8
 6674              		@ sp needed
 6675 0038 10BD     		pop	{r4, pc}
 6676              	.LVL809:
 6677              	.L518:
 6678              	.LCFI46:
 6679              		.cfi_restore_state
3642:Src/ff.c      **** 	LEAVE_FF(fs, res);
 6680              		.loc 1 3642 2 is_stmt 1 view .LVU2275
3642:Src/ff.c      **** 	LEAVE_FF(fs, res);
 6681              		.loc 1 3642 8 is_stmt 0 view .LVU2276
 6682 003a 0022     		movs	r2, #0
 6683 003c 01A9     		add	r1, sp, #4
 6684 003e 6846     		mov	r0, sp
 6685              	.LVL810:
3642:Src/ff.c      **** 	LEAVE_FF(fs, res);
 6686              		.loc 1 3642 8 view .LVU2277
 6687 0040 FFF7FEFF 		bl	mount_volume
 6688              	.LVL811:
3643:Src/ff.c      **** }
 6689              		.loc 1 3643 2 is_stmt 1 view .LVU2278
 6690 0044 F7E7     		b	.L512
 6691              	.LVL812:
 6692              	.L515:
3619:Src/ff.c      **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 6693              		.loc 1 3619 22 is_stmt 0 view .LVU2279
 6694 0046 0B20     		movs	r0, #11
 6695              	.LVL813:
3619:Src/ff.c      **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 6696              		.loc 1 3619 22 view .LVU2280
 6697 0048 F5E7     		b	.L512
 6698              	.L520:
 6699 004a 00BF     		.align	2
 6700              	.L519:
 6701 004c 00000000 		.word	.LANCHOR1
 6702              		.cfi_endproc
 6703              	.LFE39:
 6705              		.section	.text.f_open,"ax",%progbits
 6706              		.align	1
 6707              		.global	f_open
 6708              		.syntax unified
 6709              		.thumb
 6710              		.thumb_func
 6711              		.fpu softvfp
 6713              	f_open:
 6714              	.LVL814:
 6715              	.LFB40:
3645:Src/ff.c      **** 
3646:Src/ff.c      **** 
3647:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 217


3648:Src/ff.c      **** 
3649:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3650:Src/ff.c      **** /* Open or Create a File                                                 */
3651:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3652:Src/ff.c      **** 
3653:Src/ff.c      **** FRESULT f_open (
3654:Src/ff.c      **** 	FIL* fp,			/* Pointer to the blank file object */
3655:Src/ff.c      **** 	const TCHAR* path,	/* Pointer to the file name */
3656:Src/ff.c      **** 	BYTE mode			/* Access mode and open mode flags */
3657:Src/ff.c      **** )
3658:Src/ff.c      **** {
 6716              		.loc 1 3658 1 is_stmt 1 view -0
 6717              		.cfi_startproc
 6718              		@ args = 0, pretend = 0, frame = 64
 6719              		@ frame_needed = 0, uses_anonymous_args = 0
 6720              		.loc 1 3658 1 is_stmt 0 view .LVU2282
 6721 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6722              	.LCFI47:
 6723              		.cfi_def_cfa_offset 32
 6724              		.cfi_offset 4, -32
 6725              		.cfi_offset 5, -28
 6726              		.cfi_offset 6, -24
 6727              		.cfi_offset 7, -20
 6728              		.cfi_offset 8, -16
 6729              		.cfi_offset 9, -12
 6730              		.cfi_offset 10, -8
 6731              		.cfi_offset 14, -4
 6732 0004 90B0     		sub	sp, sp, #64
 6733              	.LCFI48:
 6734              		.cfi_def_cfa_offset 96
 6735 0006 0191     		str	r1, [sp, #4]
3659:Src/ff.c      **** 	FRESULT res;
 6736              		.loc 1 3659 2 is_stmt 1 view .LVU2283
3660:Src/ff.c      **** 	DIR dj;
 6737              		.loc 1 3660 2 view .LVU2284
3661:Src/ff.c      **** 	FATFS *fs;
 6738              		.loc 1 3661 2 view .LVU2285
3662:Src/ff.c      **** #if !FF_FS_READONLY
3663:Src/ff.c      **** 	DWORD cl, bcs, clst, tm;
 6739              		.loc 1 3663 2 view .LVU2286
3664:Src/ff.c      **** 	LBA_t sc;
 6740              		.loc 1 3664 2 view .LVU2287
3665:Src/ff.c      **** 	FSIZE_t ofs;
 6741              		.loc 1 3665 2 view .LVU2288
3666:Src/ff.c      **** #endif
3667:Src/ff.c      **** 	DEF_NAMBUF
3668:Src/ff.c      **** 
3669:Src/ff.c      **** 
3670:Src/ff.c      **** 	if (!fp) return FR_INVALID_OBJECT;
 6742              		.loc 1 3670 2 view .LVU2289
 6743              		.loc 1 3670 5 is_stmt 0 view .LVU2290
 6744 0008 0028     		cmp	r0, #0
 6745 000a 00F0F480 		beq	.L538
 6746 000e 1546     		mov	r5, r2
 6747 0010 0646     		mov	r6, r0
3671:Src/ff.c      **** 
3672:Src/ff.c      **** 	/* Get logical drive number */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 218


3673:Src/ff.c      **** 	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN
 6748              		.loc 1 3673 2 is_stmt 1 view .LVU2291
 6749              		.loc 1 3673 7 is_stmt 0 view .LVU2292
 6750 0012 02F03F07 		and	r7, r2, #63
 6751              	.LVL815:
3674:Src/ff.c      **** 	res = mount_volume(&path, &fs, mode);
 6752              		.loc 1 3674 2 is_stmt 1 view .LVU2293
 6753              		.loc 1 3674 8 is_stmt 0 view .LVU2294
 6754 0016 3A46     		mov	r2, r7
 6755 0018 03A9     		add	r1, sp, #12
 6756              	.LVL816:
 6757              		.loc 1 3674 8 view .LVU2295
 6758 001a 01A8     		add	r0, sp, #4
 6759              	.LVL817:
 6760              		.loc 1 3674 8 view .LVU2296
 6761 001c FFF7FEFF 		bl	mount_volume
 6762              	.LVL818:
3675:Src/ff.c      **** 	if (res == FR_OK) {
 6763              		.loc 1 3675 2 is_stmt 1 view .LVU2297
 6764              		.loc 1 3675 5 is_stmt 0 view .LVU2298
 6765 0020 0446     		mov	r4, r0
 6766 0022 30B1     		cbz	r0, .L549
 6767              	.LVL819:
 6768              	.L523:
3676:Src/ff.c      **** 		dj.obj.fs = fs;
3677:Src/ff.c      **** 		INIT_NAMBUF(fs);
3678:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
3679:Src/ff.c      **** #if !FF_FS_READONLY	/* Read/Write configuration */
3680:Src/ff.c      **** 		if (res == FR_OK) {
3681:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3682:Src/ff.c      **** 				res = FR_INVALID_NAME;
3683:Src/ff.c      **** 			}
3684:Src/ff.c      **** #if FF_FS_LOCK != 0
3685:Src/ff.c      **** 			else {
3686:Src/ff.c      **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
3687:Src/ff.c      **** 			}
3688:Src/ff.c      **** #endif
3689:Src/ff.c      **** 		}
3690:Src/ff.c      **** 		/* Create or Open a file */
3691:Src/ff.c      **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3692:Src/ff.c      **** 			if (res != FR_OK) {					/* No file, create new */
3693:Src/ff.c      **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
3694:Src/ff.c      **** #if FF_FS_LOCK != 0
3695:Src/ff.c      **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3696:Src/ff.c      **** #else
3697:Src/ff.c      **** 					res = dir_register(&dj);
3698:Src/ff.c      **** #endif
3699:Src/ff.c      **** 				}
3700:Src/ff.c      **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
3701:Src/ff.c      **** 			}
3702:Src/ff.c      **** 			else {								/* Any object with the same name is already existing */
3703:Src/ff.c      **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
3704:Src/ff.c      **** 					res = FR_DENIED;
3705:Src/ff.c      **** 				} else {
3706:Src/ff.c      **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
3707:Src/ff.c      **** 				}
3708:Src/ff.c      **** 			}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 219


3709:Src/ff.c      **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
3710:Src/ff.c      **** #if FF_FS_EXFAT
3711:Src/ff.c      **** 				if (fs->fs_type == FS_EXFAT) {
3712:Src/ff.c      **** 					/* Get current allocation info */
3713:Src/ff.c      **** 					fp->obj.fs = fs;
3714:Src/ff.c      **** 					init_alloc_info(fs, &fp->obj);
3715:Src/ff.c      **** 					/* Set directory entry block initial state */
3716:Src/ff.c      **** 					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
3717:Src/ff.c      **** 					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
3718:Src/ff.c      **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;
3719:Src/ff.c      **** 					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
3720:Src/ff.c      **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3721:Src/ff.c      **** 					res = store_xdir(&dj);
3722:Src/ff.c      **** 					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
3723:Src/ff.c      **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3724:Src/ff.c      **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3725:Src/ff.c      **** 					}
3726:Src/ff.c      **** 				} else
3727:Src/ff.c      **** #endif
3728:Src/ff.c      **** 				{
3729:Src/ff.c      **** 					/* Set directory entry initial state */
3730:Src/ff.c      **** 					tm = GET_FATTIME();					/* Set created time */
3731:Src/ff.c      **** 					st_dword(dj.dir + DIR_CrtTime, tm);
3732:Src/ff.c      **** 					st_dword(dj.dir + DIR_ModTime, tm);
3733:Src/ff.c      **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
3734:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
3735:Src/ff.c      **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
3736:Src/ff.c      **** 					st_dword(dj.dir + DIR_FileSize, 0);
3737:Src/ff.c      **** 					fs->wflag = 1;
3738:Src/ff.c      **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
3739:Src/ff.c      **** 						sc = fs->winsect;
3740:Src/ff.c      **** 						res = remove_chain(&dj.obj, cl, 0);
3741:Src/ff.c      **** 						if (res == FR_OK) {
3742:Src/ff.c      **** 							res = move_window(fs, sc);
3743:Src/ff.c      **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
3744:Src/ff.c      **** 						}
3745:Src/ff.c      **** 					}
3746:Src/ff.c      **** 				}
3747:Src/ff.c      **** 			}
3748:Src/ff.c      **** 		}
3749:Src/ff.c      **** 		else {	/* Open an existing file */
3750:Src/ff.c      **** 			if (res == FR_OK) {					/* Is the object exsiting? */
3751:Src/ff.c      **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
3752:Src/ff.c      **** 					res = FR_NO_FILE;
3753:Src/ff.c      **** 				} else {
3754:Src/ff.c      **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
3755:Src/ff.c      **** 						res = FR_DENIED;
3756:Src/ff.c      **** 					}
3757:Src/ff.c      **** 				}
3758:Src/ff.c      **** 			}
3759:Src/ff.c      **** 		}
3760:Src/ff.c      **** 		if (res == FR_OK) {
3761:Src/ff.c      **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
3762:Src/ff.c      **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
3763:Src/ff.c      **** 			fp->dir_ptr = dj.dir;
3764:Src/ff.c      **** #if FF_FS_LOCK != 0
3765:Src/ff.c      **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 220


3766:Src/ff.c      **** 			if (fp->obj.lockid == 0) res = FR_INT_ERR;
3767:Src/ff.c      **** #endif
3768:Src/ff.c      **** 		}
3769:Src/ff.c      **** #else		/* R/O configuration */
3770:Src/ff.c      **** 		if (res == FR_OK) {
3771:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
3772:Src/ff.c      **** 				res = FR_INVALID_NAME;
3773:Src/ff.c      **** 			} else {
3774:Src/ff.c      **** 				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
3775:Src/ff.c      **** 					res = FR_NO_FILE;
3776:Src/ff.c      **** 				}
3777:Src/ff.c      **** 			}
3778:Src/ff.c      **** 		}
3779:Src/ff.c      **** #endif
3780:Src/ff.c      **** 
3781:Src/ff.c      **** 		if (res == FR_OK) {
3782:Src/ff.c      **** #if FF_FS_EXFAT
3783:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {
3784:Src/ff.c      **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3785:Src/ff.c      **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3786:Src/ff.c      **** 				fp->obj.c_ofs = dj.blk_ofs;
3787:Src/ff.c      **** 				init_alloc_info(fs, &fp->obj);
3788:Src/ff.c      **** 			} else
3789:Src/ff.c      **** #endif
3790:Src/ff.c      **** 			{
3791:Src/ff.c      **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
3792:Src/ff.c      **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3793:Src/ff.c      **** 			}
3794:Src/ff.c      **** #if FF_USE_FASTSEEK
3795:Src/ff.c      **** 			fp->cltbl = 0;		/* Disable fast seek mode */
3796:Src/ff.c      **** #endif
3797:Src/ff.c      **** 			fp->obj.fs = fs;	/* Validate the file object */
3798:Src/ff.c      **** 			fp->obj.id = fs->id;
3799:Src/ff.c      **** 			fp->flag = mode;	/* Set file access mode */
3800:Src/ff.c      **** 			fp->err = 0;		/* Clear error flag */
3801:Src/ff.c      **** 			fp->sect = 0;		/* Invalidate current data sector */
3802:Src/ff.c      **** 			fp->fptr = 0;		/* Set file pointer top of the file */
3803:Src/ff.c      **** #if !FF_FS_READONLY
3804:Src/ff.c      **** #if !FF_FS_TINY
3805:Src/ff.c      **** 			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
3806:Src/ff.c      **** #endif
3807:Src/ff.c      **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
3808:Src/ff.c      **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
3809:Src/ff.c      **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
3810:Src/ff.c      **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3811:Src/ff.c      **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3812:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
3813:Src/ff.c      **** 					if (clst <= 1) res = FR_INT_ERR;
3814:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
3815:Src/ff.c      **** 				}
3816:Src/ff.c      **** 				fp->clust = clst;
3817:Src/ff.c      **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
3818:Src/ff.c      **** 					sc = clst2sect(fs, clst);
3819:Src/ff.c      **** 					if (sc == 0) {
3820:Src/ff.c      **** 						res = FR_INT_ERR;
3821:Src/ff.c      **** 					} else {
3822:Src/ff.c      **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 221


3823:Src/ff.c      **** #if !FF_FS_TINY
3824:Src/ff.c      **** 						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
3825:Src/ff.c      **** #endif
3826:Src/ff.c      **** 					}
3827:Src/ff.c      **** 				}
3828:Src/ff.c      **** #if FF_FS_LOCK != 0
3829:Src/ff.c      **** 				if (res != FR_OK) dec_lock(fp->obj.lockid); /* Decrement file open counter if seek failed */
3830:Src/ff.c      **** #endif
3831:Src/ff.c      **** 			}
3832:Src/ff.c      **** #endif
3833:Src/ff.c      **** 		}
3834:Src/ff.c      **** 
3835:Src/ff.c      **** 		FREE_NAMBUF();
 6769              		.loc 1 3835 16 is_stmt 1 view .LVU2299
3836:Src/ff.c      **** 	}
3837:Src/ff.c      **** 
3838:Src/ff.c      **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 6770              		.loc 1 3838 2 view .LVU2300
 6771              		.loc 1 3838 5 is_stmt 0 view .LVU2301
 6772 0024 0CB1     		cbz	r4, .L522
 6773              	.LVL820:
 6774              	.L537:
 6775              		.loc 1 3838 20 is_stmt 1 discriminator 1 view .LVU2302
 6776              		.loc 1 3838 31 is_stmt 0 discriminator 1 view .LVU2303
 6777 0026 0023     		movs	r3, #0
 6778 0028 3360     		str	r3, [r6]
 6779              	.LVL821:
 6780              	.L522:
3839:Src/ff.c      **** 
3840:Src/ff.c      **** 	LEAVE_FF(fs, res);
3841:Src/ff.c      **** }
 6781              		.loc 1 3841 1 view .LVU2304
 6782 002a 2046     		mov	r0, r4
 6783 002c 10B0     		add	sp, sp, #64
 6784              	.LCFI49:
 6785              		.cfi_remember_state
 6786              		.cfi_def_cfa_offset 32
 6787              		@ sp needed
 6788 002e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 6789              	.LVL822:
 6790              	.L549:
 6791              	.LCFI50:
 6792              		.cfi_restore_state
3676:Src/ff.c      **** 		INIT_NAMBUF(fs);
 6793              		.loc 1 3676 3 is_stmt 1 view .LVU2305
3676:Src/ff.c      **** 		INIT_NAMBUF(fs);
 6794              		.loc 1 3676 13 is_stmt 0 view .LVU2306
 6795 0032 039B     		ldr	r3, [sp, #12]
 6796 0034 0493     		str	r3, [sp, #16]
3677:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6797              		.loc 1 3677 18 is_stmt 1 view .LVU2307
3678:Src/ff.c      **** #if !FF_FS_READONLY	/* Read/Write configuration */
 6798              		.loc 1 3678 3 view .LVU2308
3678:Src/ff.c      **** #if !FF_FS_READONLY	/* Read/Write configuration */
 6799              		.loc 1 3678 9 is_stmt 0 view .LVU2309
 6800 0036 0199     		ldr	r1, [sp, #4]
 6801 0038 04A8     		add	r0, sp, #16
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 222


 6802              	.LVL823:
3678:Src/ff.c      **** #if !FF_FS_READONLY	/* Read/Write configuration */
 6803              		.loc 1 3678 9 view .LVU2310
 6804 003a FFF7FEFF 		bl	follow_path
 6805              	.LVL824:
3680:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 6806              		.loc 1 3680 3 is_stmt 1 view .LVU2311
3680:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 6807              		.loc 1 3680 6 is_stmt 0 view .LVU2312
 6808 003e 0446     		mov	r4, r0
 6809 0040 18B9     		cbnz	r0, .L524
3681:Src/ff.c      **** 				res = FR_INVALID_NAME;
 6810              		.loc 1 3681 4 is_stmt 1 view .LVU2313
3681:Src/ff.c      **** 				res = FR_INVALID_NAME;
 6811              		.loc 1 3681 8 is_stmt 0 view .LVU2314
 6812 0042 9DF93B30 		ldrsb	r3, [sp, #59]
3681:Src/ff.c      **** 				res = FR_INVALID_NAME;
 6813              		.loc 1 3681 7 view .LVU2315
 6814 0046 002B     		cmp	r3, #0
 6815 0048 45DB     		blt	.L550
 6816              	.L524:
 6817              	.LVL825:
3691:Src/ff.c      **** 			if (res != FR_OK) {					/* No file, create new */
 6818              		.loc 1 3691 3 is_stmt 1 view .LVU2316
3691:Src/ff.c      **** 			if (res != FR_OK) {					/* No file, create new */
 6819              		.loc 1 3691 6 is_stmt 0 view .LVU2317
 6820 004a 15F01C0F 		tst	r5, #28
 6821 004e 53D0     		beq	.L525
3692:Src/ff.c      **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 6822              		.loc 1 3692 4 is_stmt 1 view .LVU2318
3692:Src/ff.c      **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 6823              		.loc 1 3692 7 is_stmt 0 view .LVU2319
 6824 0050 002C     		cmp	r4, #0
 6825 0052 47D0     		beq	.L526
3693:Src/ff.c      **** #if FF_FS_LOCK != 0
 6826              		.loc 1 3693 5 is_stmt 1 view .LVU2320
3693:Src/ff.c      **** #if FF_FS_LOCK != 0
 6827              		.loc 1 3693 8 is_stmt 0 view .LVU2321
 6828 0054 042C     		cmp	r4, #4
 6829 0056 40D0     		beq	.L551
 6830              	.L527:
3700:Src/ff.c      **** 			}
 6831              		.loc 1 3700 5 is_stmt 1 view .LVU2322
3700:Src/ff.c      **** 			}
 6832              		.loc 1 3700 10 is_stmt 0 view .LVU2323
 6833 0058 47F00807 		orr	r7, r7, #8
 6834              	.LVL826:
 6835              	.L528:
3709:Src/ff.c      **** #if FF_FS_EXFAT
 6836              		.loc 1 3709 4 is_stmt 1 view .LVU2324
3709:Src/ff.c      **** #if FF_FS_EXFAT
 6837              		.loc 1 3709 7 is_stmt 0 view .LVU2325
 6838 005c 002C     		cmp	r4, #0
 6839 005e 5AD1     		bne	.L529
3709:Src/ff.c      **** #if FF_FS_EXFAT
 6840              		.loc 1 3709 21 discriminator 1 view .LVU2326
 6841 0060 17F0080F 		tst	r7, #8
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 223


 6842 0064 57D0     		beq	.L529
3730:Src/ff.c      **** 					st_dword(dj.dir + DIR_CrtTime, tm);
 6843              		.loc 1 3730 6 is_stmt 1 view .LVU2327
 6844              	.LVL827:
3731:Src/ff.c      **** 					st_dword(dj.dir + DIR_ModTime, tm);
 6845              		.loc 1 3731 6 view .LVU2328
 6846 0066 654D     		ldr	r5, .L554
 6847 0068 2946     		mov	r1, r5
 6848 006a 0B98     		ldr	r0, [sp, #44]
 6849 006c 0E30     		adds	r0, r0, #14
 6850 006e FFF7FEFF 		bl	st_dword
 6851              	.LVL828:
3732:Src/ff.c      **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 6852              		.loc 1 3732 6 view .LVU2329
 6853 0072 2946     		mov	r1, r5
 6854 0074 0B98     		ldr	r0, [sp, #44]
 6855 0076 1630     		adds	r0, r0, #22
 6856 0078 FFF7FEFF 		bl	st_dword
 6857              	.LVL829:
3733:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6858              		.loc 1 3733 6 view .LVU2330
3733:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6859              		.loc 1 3733 11 is_stmt 0 view .LVU2331
 6860 007c DDF80C80 		ldr	r8, [sp, #12]
3733:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6861              		.loc 1 3733 26 view .LVU2332
 6862 0080 DDF82C90 		ldr	r9, [sp, #44]
3733:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6863              		.loc 1 3733 11 view .LVU2333
 6864 0084 4946     		mov	r1, r9
 6865 0086 4046     		mov	r0, r8
 6866 0088 FFF7FEFF 		bl	ld_clust
 6867              	.LVL830:
 6868 008c 0546     		mov	r5, r0
 6869              	.LVL831:
3734:Src/ff.c      **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 6870              		.loc 1 3734 6 is_stmt 1 view .LVU2334
3734:Src/ff.c      **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 6871              		.loc 1 3734 23 is_stmt 0 view .LVU2335
 6872 008e 2023     		movs	r3, #32
 6873 0090 89F80B30 		strb	r3, [r9, #11]
3735:Src/ff.c      **** 					st_dword(dj.dir + DIR_FileSize, 0);
 6874              		.loc 1 3735 6 is_stmt 1 view .LVU2336
 6875 0094 0022     		movs	r2, #0
 6876 0096 0B99     		ldr	r1, [sp, #44]
 6877 0098 4046     		mov	r0, r8
 6878              	.LVL832:
3735:Src/ff.c      **** 					st_dword(dj.dir + DIR_FileSize, 0);
 6879              		.loc 1 3735 6 is_stmt 0 view .LVU2337
 6880 009a FFF7FEFF 		bl	st_clust
 6881              	.LVL833:
3736:Src/ff.c      **** 					fs->wflag = 1;
 6882              		.loc 1 3736 6 is_stmt 1 view .LVU2338
 6883 009e 0021     		movs	r1, #0
 6884 00a0 0B98     		ldr	r0, [sp, #44]
 6885 00a2 1C30     		adds	r0, r0, #28
 6886 00a4 FFF7FEFF 		bl	st_dword
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 224


 6887              	.LVL834:
3737:Src/ff.c      **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 6888              		.loc 1 3737 6 view .LVU2339
3737:Src/ff.c      **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 6889              		.loc 1 3737 16 is_stmt 0 view .LVU2340
 6890 00a8 039B     		ldr	r3, [sp, #12]
 6891 00aa 0122     		movs	r2, #1
 6892 00ac DA70     		strb	r2, [r3, #3]
3738:Src/ff.c      **** 						sc = fs->winsect;
 6893              		.loc 1 3738 6 is_stmt 1 view .LVU2341
3738:Src/ff.c      **** 						sc = fs->winsect;
 6894              		.loc 1 3738 9 is_stmt 0 view .LVU2342
 6895 00ae 95B3     		cbz	r5, .L529
3739:Src/ff.c      **** 						res = remove_chain(&dj.obj, cl, 0);
 6896              		.loc 1 3739 7 is_stmt 1 view .LVU2343
3739:Src/ff.c      **** 						res = remove_chain(&dj.obj, cl, 0);
 6897              		.loc 1 3739 14 is_stmt 0 view .LVU2344
 6898 00b0 039B     		ldr	r3, [sp, #12]
3739:Src/ff.c      **** 						res = remove_chain(&dj.obj, cl, 0);
 6899              		.loc 1 3739 10 view .LVU2345
 6900 00b2 D3F83080 		ldr	r8, [r3, #48]
 6901              	.LVL835:
3740:Src/ff.c      **** 						if (res == FR_OK) {
 6902              		.loc 1 3740 7 is_stmt 1 view .LVU2346
3740:Src/ff.c      **** 						if (res == FR_OK) {
 6903              		.loc 1 3740 13 is_stmt 0 view .LVU2347
 6904 00b6 0022     		movs	r2, #0
 6905 00b8 2946     		mov	r1, r5
 6906 00ba 04A8     		add	r0, sp, #16
 6907 00bc FFF7FEFF 		bl	remove_chain
 6908              	.LVL836:
3741:Src/ff.c      **** 							res = move_window(fs, sc);
 6909              		.loc 1 3741 7 is_stmt 1 view .LVU2348
3741:Src/ff.c      **** 							res = move_window(fs, sc);
 6910              		.loc 1 3741 10 is_stmt 0 view .LVU2349
 6911 00c0 0446     		mov	r4, r0
 6912 00c2 40BB     		cbnz	r0, .L529
3742:Src/ff.c      **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 6913              		.loc 1 3742 8 is_stmt 1 view .LVU2350
3742:Src/ff.c      **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 6914              		.loc 1 3742 14 is_stmt 0 view .LVU2351
 6915 00c4 4146     		mov	r1, r8
 6916 00c6 0398     		ldr	r0, [sp, #12]
 6917              	.LVL837:
3742:Src/ff.c      **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 6918              		.loc 1 3742 14 view .LVU2352
 6919 00c8 FFF7FEFF 		bl	move_window
 6920              	.LVL838:
 6921 00cc 0446     		mov	r4, r0
 6922              	.LVL839:
3743:Src/ff.c      **** 						}
 6923              		.loc 1 3743 8 is_stmt 1 view .LVU2353
3743:Src/ff.c      **** 						}
 6924              		.loc 1 3743 27 is_stmt 0 view .LVU2354
 6925 00ce 013D     		subs	r5, r5, #1
 6926              	.LVL840:
3743:Src/ff.c      **** 						}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 225


 6927              		.loc 1 3743 22 view .LVU2355
 6928 00d0 039B     		ldr	r3, [sp, #12]
 6929 00d2 1D61     		str	r5, [r3, #16]
 6930 00d4 1FE0     		b	.L529
 6931              	.LVL841:
 6932              	.L550:
3682:Src/ff.c      **** 			}
 6933              		.loc 1 3682 9 view .LVU2356
 6934 00d6 0624     		movs	r4, #6
 6935 00d8 B7E7     		b	.L524
 6936              	.LVL842:
 6937              	.L551:
3697:Src/ff.c      **** #endif
 6938              		.loc 1 3697 6 is_stmt 1 view .LVU2357
3697:Src/ff.c      **** #endif
 6939              		.loc 1 3697 12 is_stmt 0 view .LVU2358
 6940 00da 04A8     		add	r0, sp, #16
 6941 00dc FFF7FEFF 		bl	dir_register
 6942              	.LVL843:
 6943 00e0 0446     		mov	r4, r0
 6944              	.LVL844:
3697:Src/ff.c      **** #endif
 6945              		.loc 1 3697 12 view .LVU2359
 6946 00e2 B9E7     		b	.L527
 6947              	.L526:
3703:Src/ff.c      **** 					res = FR_DENIED;
 6948              		.loc 1 3703 5 is_stmt 1 view .LVU2360
3703:Src/ff.c      **** 					res = FR_DENIED;
 6949              		.loc 1 3703 15 is_stmt 0 view .LVU2361
 6950 00e4 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
3703:Src/ff.c      **** 					res = FR_DENIED;
 6951              		.loc 1 3703 8 view .LVU2362
 6952 00e8 13F0110F 		tst	r3, #17
 6953 00ec 12D1     		bne	.L540
3706:Src/ff.c      **** 				}
 6954              		.loc 1 3706 6 is_stmt 1 view .LVU2363
3706:Src/ff.c      **** 				}
 6955              		.loc 1 3706 9 is_stmt 0 view .LVU2364
 6956 00ee 15F0040F 		tst	r5, #4
 6957 00f2 B3D0     		beq	.L528
3706:Src/ff.c      **** 				}
 6958              		.loc 1 3706 36 view .LVU2365
 6959 00f4 0824     		movs	r4, #8
 6960              	.LVL845:
3706:Src/ff.c      **** 				}
 6961              		.loc 1 3706 36 view .LVU2366
 6962 00f6 0EE0     		b	.L529
 6963              	.LVL846:
 6964              	.L525:
3750:Src/ff.c      **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 6965              		.loc 1 3750 4 is_stmt 1 view .LVU2367
3750:Src/ff.c      **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 6966              		.loc 1 3750 7 is_stmt 0 view .LVU2368
 6967 00f8 6CB9     		cbnz	r4, .L529
3751:Src/ff.c      **** 					res = FR_NO_FILE;
 6968              		.loc 1 3751 5 is_stmt 1 view .LVU2369
3751:Src/ff.c      **** 					res = FR_NO_FILE;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 226


 6969              		.loc 1 3751 15 is_stmt 0 view .LVU2370
 6970 00fa 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
3751:Src/ff.c      **** 					res = FR_NO_FILE;
 6971              		.loc 1 3751 8 view .LVU2371
 6972 00fe 13F0100F 		tst	r3, #16
 6973 0102 45D1     		bne	.L542
3754:Src/ff.c      **** 						res = FR_DENIED;
 6974              		.loc 1 3754 6 is_stmt 1 view .LVU2372
3754:Src/ff.c      **** 						res = FR_DENIED;
 6975              		.loc 1 3754 9 is_stmt 0 view .LVU2373
 6976 0104 15F0020F 		tst	r5, #2
 6977 0108 05D0     		beq	.L529
3754:Src/ff.c      **** 						res = FR_DENIED;
 6978              		.loc 1 3754 28 discriminator 1 view .LVU2374
 6979 010a 13F0010F 		tst	r3, #1
 6980 010e 02D0     		beq	.L529
3755:Src/ff.c      **** 					}
 6981              		.loc 1 3755 11 view .LVU2375
 6982 0110 0724     		movs	r4, #7
 6983              	.LVL847:
3755:Src/ff.c      **** 					}
 6984              		.loc 1 3755 11 view .LVU2376
 6985 0112 0BE0     		b	.L530
 6986              	.LVL848:
 6987              	.L540:
3704:Src/ff.c      **** 				} else {
 6988              		.loc 1 3704 10 view .LVU2377
 6989 0114 0724     		movs	r4, #7
 6990              	.LVL849:
 6991              	.L529:
3760:Src/ff.c      **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 6992              		.loc 1 3760 3 is_stmt 1 view .LVU2378
3760:Src/ff.c      **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 6993              		.loc 1 3760 6 is_stmt 0 view .LVU2379
 6994 0116 4CB9     		cbnz	r4, .L530
3761:Src/ff.c      **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 6995              		.loc 1 3761 4 is_stmt 1 view .LVU2380
3761:Src/ff.c      **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 6996              		.loc 1 3761 7 is_stmt 0 view .LVU2381
 6997 0118 17F0080F 		tst	r7, #8
 6998 011c 01D0     		beq	.L531
3761:Src/ff.c      **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 6999              		.loc 1 3761 33 is_stmt 1 discriminator 1 view .LVU2382
3761:Src/ff.c      **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 7000              		.loc 1 3761 38 is_stmt 0 discriminator 1 view .LVU2383
 7001 011e 47F04007 		orr	r7, r7, #64
 7002              	.LVL850:
 7003              	.L531:
3762:Src/ff.c      **** 			fp->dir_ptr = dj.dir;
 7004              		.loc 1 3762 4 is_stmt 1 view .LVU2384
3762:Src/ff.c      **** 			fp->dir_ptr = dj.dir;
 7005              		.loc 1 3762 21 is_stmt 0 view .LVU2385
 7006 0122 039B     		ldr	r3, [sp, #12]
 7007 0124 1B6B     		ldr	r3, [r3, #48]
3762:Src/ff.c      **** 			fp->dir_ptr = dj.dir;
 7008              		.loc 1 3762 17 view .LVU2386
 7009 0126 3362     		str	r3, [r6, #32]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 227


3763:Src/ff.c      **** #if FF_FS_LOCK != 0
 7010              		.loc 1 3763 4 is_stmt 1 view .LVU2387
3763:Src/ff.c      **** #if FF_FS_LOCK != 0
 7011              		.loc 1 3763 20 is_stmt 0 view .LVU2388
 7012 0128 0B9B     		ldr	r3, [sp, #44]
3763:Src/ff.c      **** #if FF_FS_LOCK != 0
 7013              		.loc 1 3763 16 view .LVU2389
 7014 012a 7362     		str	r3, [r6, #36]
 7015              	.LVL851:
 7016              	.L530:
3781:Src/ff.c      **** #if FF_FS_EXFAT
 7017              		.loc 1 3781 3 is_stmt 1 view .LVU2390
3781:Src/ff.c      **** #if FF_FS_EXFAT
 7018              		.loc 1 3781 6 is_stmt 0 view .LVU2391
 7019 012c 002C     		cmp	r4, #0
 7020 012e 7FF479AF 		bne	.L523
3791:Src/ff.c      **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 7021              		.loc 1 3791 5 is_stmt 1 view .LVU2392
3791:Src/ff.c      **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 7022              		.loc 1 3791 22 is_stmt 0 view .LVU2393
 7023 0132 DDF80CA0 		ldr	r10, [sp, #12]
3791:Src/ff.c      **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 7024              		.loc 1 3791 37 view .LVU2394
 7025 0136 DDF82C80 		ldr	r8, [sp, #44]
3791:Src/ff.c      **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 7026              		.loc 1 3791 22 view .LVU2395
 7027 013a 4146     		mov	r1, r8
 7028 013c 5046     		mov	r0, r10
 7029 013e FFF7FEFF 		bl	ld_clust
 7030              	.LVL852:
 7031 0142 0546     		mov	r5, r0
3791:Src/ff.c      **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 7032              		.loc 1 3791 20 view .LVU2396
 7033 0144 B060     		str	r0, [r6, #8]
3792:Src/ff.c      **** 			}
 7034              		.loc 1 3792 5 is_stmt 1 view .LVU2397
3792:Src/ff.c      **** 			}
 7035              		.loc 1 3792 23 is_stmt 0 view .LVU2398
 7036 0146 08F11C00 		add	r0, r8, #28
 7037 014a FFF7FEFF 		bl	ld_dword
 7038              	.LVL853:
 7039 014e 8046     		mov	r8, r0
3792:Src/ff.c      **** 			}
 7040              		.loc 1 3792 21 view .LVU2399
 7041 0150 F060     		str	r0, [r6, #12]
3797:Src/ff.c      **** 			fp->obj.id = fs->id;
 7042              		.loc 1 3797 4 is_stmt 1 view .LVU2400
3797:Src/ff.c      **** 			fp->obj.id = fs->id;
 7043              		.loc 1 3797 15 is_stmt 0 view .LVU2401
 7044 0152 C6F800A0 		str	r10, [r6]
3798:Src/ff.c      **** 			fp->flag = mode;	/* Set file access mode */
 7045              		.loc 1 3798 4 is_stmt 1 view .LVU2402
3798:Src/ff.c      **** 			fp->flag = mode;	/* Set file access mode */
 7046              		.loc 1 3798 19 is_stmt 0 view .LVU2403
 7047 0156 BAF80630 		ldrh	r3, [r10, #6]
3798:Src/ff.c      **** 			fp->flag = mode;	/* Set file access mode */
 7048              		.loc 1 3798 15 view .LVU2404
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 228


 7049 015a B380     		strh	r3, [r6, #4]	@ movhi
3799:Src/ff.c      **** 			fp->err = 0;		/* Clear error flag */
 7050              		.loc 1 3799 4 is_stmt 1 view .LVU2405
3799:Src/ff.c      **** 			fp->err = 0;		/* Clear error flag */
 7051              		.loc 1 3799 13 is_stmt 0 view .LVU2406
 7052 015c 3774     		strb	r7, [r6, #16]
3800:Src/ff.c      **** 			fp->sect = 0;		/* Invalidate current data sector */
 7053              		.loc 1 3800 4 is_stmt 1 view .LVU2407
3800:Src/ff.c      **** 			fp->sect = 0;		/* Invalidate current data sector */
 7054              		.loc 1 3800 12 is_stmt 0 view .LVU2408
 7055 015e 0021     		movs	r1, #0
 7056 0160 7174     		strb	r1, [r6, #17]
3801:Src/ff.c      **** 			fp->fptr = 0;		/* Set file pointer top of the file */
 7057              		.loc 1 3801 4 is_stmt 1 view .LVU2409
3801:Src/ff.c      **** 			fp->fptr = 0;		/* Set file pointer top of the file */
 7058              		.loc 1 3801 13 is_stmt 0 view .LVU2410
 7059 0162 F161     		str	r1, [r6, #28]
3802:Src/ff.c      **** #if !FF_FS_READONLY
 7060              		.loc 1 3802 4 is_stmt 1 view .LVU2411
3802:Src/ff.c      **** #if !FF_FS_READONLY
 7061              		.loc 1 3802 13 is_stmt 0 view .LVU2412
 7062 0164 7161     		str	r1, [r6, #20]
3805:Src/ff.c      **** #endif
 7063              		.loc 1 3805 4 is_stmt 1 view .LVU2413
3805:Src/ff.c      **** #endif
 7064              		.loc 1 3805 13 is_stmt 0 view .LVU2414
 7065 0166 06F12809 		add	r9, r6, #40
3805:Src/ff.c      **** #endif
 7066              		.loc 1 3805 4 view .LVU2415
 7067 016a 4FF40072 		mov	r2, #512
 7068 016e 4846     		mov	r0, r9
 7069 0170 FFF7FEFF 		bl	memset
 7070              	.LVL854:
3807:Src/ff.c      **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 7071              		.loc 1 3807 4 is_stmt 1 view .LVU2416
3807:Src/ff.c      **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 7072              		.loc 1 3807 7 is_stmt 0 view .LVU2417
 7073 0174 17F0200F 		tst	r7, #32
 7074 0178 3FF454AF 		beq	.L523
3807:Src/ff.c      **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 7075              		.loc 1 3807 28 discriminator 1 view .LVU2418
 7076 017c B8F1000F 		cmp	r8, #0
 7077 0180 3FF450AF 		beq	.L523
3808:Src/ff.c      **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 7078              		.loc 1 3808 5 is_stmt 1 view .LVU2419
3808:Src/ff.c      **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 7079              		.loc 1 3808 14 is_stmt 0 view .LVU2420
 7080 0184 C6F81480 		str	r8, [r6, #20]
3809:Src/ff.c      **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 7081              		.loc 1 3809 5 is_stmt 1 view .LVU2421
3809:Src/ff.c      **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 7082              		.loc 1 3809 20 is_stmt 0 view .LVU2422
 7083 0188 BAF80A70 		ldrh	r7, [r10, #10]
 7084              	.LVL855:
3809:Src/ff.c      **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 7085              		.loc 1 3809 9 view .LVU2423
 7086 018c 7F02     		lsls	r7, r7, #9
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 229


 7087              	.LVL856:
3810:Src/ff.c      **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 7088              		.loc 1 3810 5 is_stmt 1 view .LVU2424
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7089              		.loc 1 3811 5 view .LVU2425
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7090              		.loc 1 3811 5 is_stmt 0 view .LVU2426
 7091 018e 06E0     		b	.L532
 7092              	.LVL857:
 7093              	.L542:
3752:Src/ff.c      **** 				} else {
 7094              		.loc 1 3752 10 view .LVU2427
 7095 0190 0424     		movs	r4, #4
 7096              	.LVL858:
3752:Src/ff.c      **** 				} else {
 7097              		.loc 1 3752 10 view .LVU2428
 7098 0192 CBE7     		b	.L530
 7099              	.LVL859:
 7100              	.L533:
3814:Src/ff.c      **** 				}
 7101              		.loc 1 3814 6 is_stmt 1 view .LVU2429
3814:Src/ff.c      **** 				}
 7102              		.loc 1 3814 9 is_stmt 0 view .LVU2430
 7103 0194 B5F1FF3F 		cmp	r5, #-1
 7104 0198 0DD0     		beq	.L552
 7105              	.LVL860:
 7106              	.L534:
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7107              		.loc 1 3811 60 is_stmt 1 discriminator 2 view .LVU2431
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7108              		.loc 1 3811 64 is_stmt 0 discriminator 2 view .LVU2432
 7109 019a A8EB0708 		sub	r8, r8, r7
 7110              	.LVL861:
 7111              	.L532:
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7112              		.loc 1 3811 33 is_stmt 1 discriminator 1 view .LVU2433
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7113              		.loc 1 3811 5 is_stmt 0 discriminator 1 view .LVU2434
 7114 019e 64B9     		cbnz	r4, .L535
3811:Src/ff.c      **** 					clst = get_fat(&fp->obj, clst);
 7115              		.loc 1 3811 46 discriminator 3 view .LVU2435
 7116 01a0 B845     		cmp	r8, r7
 7117 01a2 0AD9     		bls	.L535
3812:Src/ff.c      **** 					if (clst <= 1) res = FR_INT_ERR;
 7118              		.loc 1 3812 6 is_stmt 1 view .LVU2436
3812:Src/ff.c      **** 					if (clst <= 1) res = FR_INT_ERR;
 7119              		.loc 1 3812 13 is_stmt 0 view .LVU2437
 7120 01a4 2946     		mov	r1, r5
 7121 01a6 3046     		mov	r0, r6
 7122 01a8 FFF7FEFF 		bl	get_fat
 7123              	.LVL862:
 7124 01ac 0546     		mov	r5, r0
 7125              	.LVL863:
3813:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 7126              		.loc 1 3813 6 is_stmt 1 view .LVU2438
3813:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 7127              		.loc 1 3813 9 is_stmt 0 view .LVU2439
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 230


 7128 01ae 0128     		cmp	r0, #1
 7129 01b0 F0D8     		bhi	.L533
3813:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 7130              		.loc 1 3813 25 view .LVU2440
 7131 01b2 0224     		movs	r4, #2
 7132              	.LVL864:
3813:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 7133              		.loc 1 3813 25 view .LVU2441
 7134 01b4 EEE7     		b	.L533
 7135              	.LVL865:
 7136              	.L552:
3814:Src/ff.c      **** 				}
 7137              		.loc 1 3814 34 view .LVU2442
 7138 01b6 0124     		movs	r4, #1
 7139              	.LVL866:
3814:Src/ff.c      **** 				}
 7140              		.loc 1 3814 34 view .LVU2443
 7141 01b8 EFE7     		b	.L534
 7142              	.LVL867:
 7143              	.L535:
3816:Src/ff.c      **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 7144              		.loc 1 3816 5 is_stmt 1 view .LVU2444
3816:Src/ff.c      **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 7145              		.loc 1 3816 15 is_stmt 0 view .LVU2445
 7146 01ba B561     		str	r5, [r6, #24]
3817:Src/ff.c      **** 					sc = clst2sect(fs, clst);
 7147              		.loc 1 3817 5 is_stmt 1 view .LVU2446
3817:Src/ff.c      **** 					sc = clst2sect(fs, clst);
 7148              		.loc 1 3817 8 is_stmt 0 view .LVU2447
 7149 01bc 002C     		cmp	r4, #0
 7150 01be 7FF431AF 		bne	.L523
3817:Src/ff.c      **** 					sc = clst2sect(fs, clst);
 7151              		.loc 1 3817 29 discriminator 1 view .LVU2448
 7152 01c2 C8F30803 		ubfx	r3, r8, #0, #9
3817:Src/ff.c      **** 					sc = clst2sect(fs, clst);
 7153              		.loc 1 3817 22 discriminator 1 view .LVU2449
 7154 01c6 002B     		cmp	r3, #0
 7155 01c8 3FF42CAF 		beq	.L523
3818:Src/ff.c      **** 					if (sc == 0) {
 7156              		.loc 1 3818 6 is_stmt 1 view .LVU2450
3818:Src/ff.c      **** 					if (sc == 0) {
 7157              		.loc 1 3818 11 is_stmt 0 view .LVU2451
 7158 01cc 039F     		ldr	r7, [sp, #12]
 7159              	.LVL868:
3818:Src/ff.c      **** 					if (sc == 0) {
 7160              		.loc 1 3818 11 view .LVU2452
 7161 01ce 2946     		mov	r1, r5
 7162 01d0 3846     		mov	r0, r7
 7163 01d2 FFF7FEFF 		bl	clst2sect
 7164              	.LVL869:
3819:Src/ff.c      **** 						res = FR_INT_ERR;
 7165              		.loc 1 3819 6 is_stmt 1 view .LVU2453
3819:Src/ff.c      **** 						res = FR_INT_ERR;
 7166              		.loc 1 3819 9 is_stmt 0 view .LVU2454
 7167 01d6 08B9     		cbnz	r0, .L553
3820:Src/ff.c      **** 					} else {
 7168              		.loc 1 3820 11 view .LVU2455
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 231


 7169 01d8 0224     		movs	r4, #2
 7170              	.LVL870:
3820:Src/ff.c      **** 					} else {
 7171              		.loc 1 3820 11 view .LVU2456
 7172 01da 24E7     		b	.L537
 7173              	.LVL871:
 7174              	.L553:
3822:Src/ff.c      **** #if !FF_FS_TINY
 7175              		.loc 1 3822 7 is_stmt 1 view .LVU2457
3822:Src/ff.c      **** #if !FF_FS_TINY
 7176              		.loc 1 3822 21 is_stmt 0 view .LVU2458
 7177 01dc 00EB5822 		add	r2, r0, r8, lsr #9
3822:Src/ff.c      **** #if !FF_FS_TINY
 7178              		.loc 1 3822 16 view .LVU2459
 7179 01e0 F261     		str	r2, [r6, #28]
3824:Src/ff.c      **** #endif
 7180              		.loc 1 3824 7 is_stmt 1 view .LVU2460
3824:Src/ff.c      **** #endif
 7181              		.loc 1 3824 11 is_stmt 0 view .LVU2461
 7182 01e2 0123     		movs	r3, #1
 7183 01e4 4946     		mov	r1, r9
 7184 01e6 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 7185              	.LVL872:
3824:Src/ff.c      **** #endif
 7186              		.loc 1 3824 11 view .LVU2462
 7187 01e8 FFF7FEFF 		bl	disk_read
 7188              	.LVL873:
3824:Src/ff.c      **** #endif
 7189              		.loc 1 3824 10 view .LVU2463
 7190 01ec 0028     		cmp	r0, #0
 7191 01ee 3FF419AF 		beq	.L523
3824:Src/ff.c      **** #endif
 7192              		.loc 1 3824 68 view .LVU2464
 7193 01f2 0124     		movs	r4, #1
 7194              	.LVL874:
3824:Src/ff.c      **** #endif
 7195              		.loc 1 3824 68 view .LVU2465
 7196 01f4 17E7     		b	.L537
 7197              	.LVL875:
 7198              	.L538:
3670:Src/ff.c      **** 
 7199              		.loc 1 3670 18 view .LVU2466
 7200 01f6 0924     		movs	r4, #9
 7201 01f8 17E7     		b	.L522
 7202              	.L555:
 7203 01fa 00BF     		.align	2
 7204              	.L554:
 7205 01fc 00002150 		.word	1344339968
 7206              		.cfi_endproc
 7207              	.LFE40:
 7209              		.section	.text.f_read,"ax",%progbits
 7210              		.align	1
 7211              		.global	f_read
 7212              		.syntax unified
 7213              		.thumb
 7214              		.thumb_func
 7215              		.fpu softvfp
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 232


 7217              	f_read:
 7218              	.LVL876:
 7219              	.LFB41:
3842:Src/ff.c      **** 
3843:Src/ff.c      **** 
3844:Src/ff.c      **** 
3845:Src/ff.c      **** 
3846:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3847:Src/ff.c      **** /* Read File                                                             */
3848:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3849:Src/ff.c      **** 
3850:Src/ff.c      **** FRESULT f_read (
3851:Src/ff.c      **** 	FIL* fp, 	/* Open file to be read */
3852:Src/ff.c      **** 	void* buff,	/* Data buffer to store the read data */
3853:Src/ff.c      **** 	UINT btr,	/* Number of bytes to read */
3854:Src/ff.c      **** 	UINT* br	/* Number of bytes read */
3855:Src/ff.c      **** )
3856:Src/ff.c      **** {
 7220              		.loc 1 3856 1 is_stmt 1 view -0
 7221              		.cfi_startproc
 7222              		@ args = 0, pretend = 0, frame = 16
 7223              		@ frame_needed = 0, uses_anonymous_args = 0
 7224              		.loc 1 3856 1 is_stmt 0 view .LVU2468
 7225 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7226              	.LCFI51:
 7227              		.cfi_def_cfa_offset 36
 7228              		.cfi_offset 4, -36
 7229              		.cfi_offset 5, -32
 7230              		.cfi_offset 6, -28
 7231              		.cfi_offset 7, -24
 7232              		.cfi_offset 8, -20
 7233              		.cfi_offset 9, -16
 7234              		.cfi_offset 10, -12
 7235              		.cfi_offset 11, -8
 7236              		.cfi_offset 14, -4
 7237 0004 85B0     		sub	sp, sp, #20
 7238              	.LCFI52:
 7239              		.cfi_def_cfa_offset 56
 7240 0006 0446     		mov	r4, r0
 7241 0008 0E46     		mov	r6, r1
 7242 000a 1746     		mov	r7, r2
 7243 000c 9846     		mov	r8, r3
3857:Src/ff.c      **** 	FRESULT res;
 7244              		.loc 1 3857 2 is_stmt 1 view .LVU2469
3858:Src/ff.c      **** 	FATFS *fs;
 7245              		.loc 1 3858 2 view .LVU2470
3859:Src/ff.c      **** 	DWORD clst;
 7246              		.loc 1 3859 2 view .LVU2471
3860:Src/ff.c      **** 	LBA_t sect;
 7247              		.loc 1 3860 2 view .LVU2472
3861:Src/ff.c      **** 	FSIZE_t remain;
 7248              		.loc 1 3861 2 view .LVU2473
3862:Src/ff.c      **** 	UINT rcnt, cc, csect;
 7249              		.loc 1 3862 2 view .LVU2474
3863:Src/ff.c      **** 	BYTE *rbuff = (BYTE*)buff;
 7250              		.loc 1 3863 2 view .LVU2475
 7251              	.LVL877:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 233


3864:Src/ff.c      **** 
3865:Src/ff.c      **** 
3866:Src/ff.c      **** 	*br = 0;	/* Clear read byte counter */
 7252              		.loc 1 3866 2 view .LVU2476
 7253              		.loc 1 3866 6 is_stmt 0 view .LVU2477
 7254 000e 0023     		movs	r3, #0
 7255              	.LVL878:
 7256              		.loc 1 3866 6 view .LVU2478
 7257 0010 C8F80030 		str	r3, [r8]
3867:Src/ff.c      **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 7258              		.loc 1 3867 2 is_stmt 1 view .LVU2479
 7259              		.loc 1 3867 8 is_stmt 0 view .LVU2480
 7260 0014 03A9     		add	r1, sp, #12
 7261              	.LVL879:
 7262              		.loc 1 3867 8 view .LVU2481
 7263 0016 FFF7FEFF 		bl	validate
 7264              	.LVL880:
3868:Src/ff.c      **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 7265              		.loc 1 3868 2 is_stmt 1 view .LVU2482
 7266              		.loc 1 3868 5 is_stmt 0 view .LVU2483
 7267 001a 0190     		str	r0, [sp, #4]
 7268 001c 0028     		cmp	r0, #0
 7269 001e 40F0A880 		bne	.L559
 7270              		.loc 1 3868 27 discriminator 2 view .LVU2484
 7271 0022 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 7272 0024 0193     		str	r3, [sp, #4]
 7273              	.LVL881:
 7274              		.loc 1 3868 19 discriminator 2 view .LVU2485
 7275 0026 002B     		cmp	r3, #0
 7276 0028 40F0A380 		bne	.L559
3869:Src/ff.c      **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 7277              		.loc 1 3869 2 is_stmt 1 view .LVU2486
 7278              		.loc 1 3869 10 is_stmt 0 view .LVU2487
 7279 002c 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 7280              	.LVL882:
 7281              		.loc 1 3869 5 view .LVU2488
 7282 002e 13F0010F 		tst	r3, #1
 7283 0032 00F0BD80 		beq	.L580
3870:Src/ff.c      **** 	remain = fp->obj.objsize - fp->fptr;
 7284              		.loc 1 3870 2 is_stmt 1 view .LVU2489
 7285              		.loc 1 3870 18 is_stmt 0 view .LVU2490
 7286 0036 E568     		ldr	r5, [r4, #12]
 7287              		.loc 1 3870 31 view .LVU2491
 7288 0038 6369     		ldr	r3, [r4, #20]
 7289              		.loc 1 3870 9 view .LVU2492
 7290 003a ED1A     		subs	r5, r5, r3
 7291              	.LVL883:
3871:Src/ff.c      **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 7292              		.loc 1 3871 2 is_stmt 1 view .LVU2493
 7293              		.loc 1 3871 5 is_stmt 0 view .LVU2494
 7294 003c BD42     		cmp	r5, r7
 7295 003e 5CD3     		bcc	.L578
 7296 0040 3D46     		mov	r5, r7
 7297              	.LVL884:
 7298              		.loc 1 3871 5 view .LVU2495
 7299 0042 5AE0     		b	.L578
 7300              	.LVL885:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 234


 7301              	.L564:
3872:Src/ff.c      **** 
3873:Src/ff.c      **** 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr 
3874:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
3875:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
3876:Src/ff.c      **** 			if (csect == 0) {					/* On the cluster boundary? */
3877:Src/ff.c      **** 				if (fp->fptr == 0) {			/* On the top of the file? */
3878:Src/ff.c      **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
3879:Src/ff.c      **** 				} else {						/* Middle or end of the file */
3880:Src/ff.c      **** #if FF_USE_FASTSEEK
3881:Src/ff.c      **** 					if (fp->cltbl) {
3882:Src/ff.c      **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3883:Src/ff.c      **** 					} else
3884:Src/ff.c      **** #endif
3885:Src/ff.c      **** 					{
3886:Src/ff.c      **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 7302              		.loc 1 3886 7 is_stmt 1 view .LVU2496
 7303              		.loc 1 3886 14 is_stmt 0 view .LVU2497
 7304 0044 A169     		ldr	r1, [r4, #24]
 7305 0046 2046     		mov	r0, r4
 7306 0048 FFF7FEFF 		bl	get_fat
 7307              	.LVL886:
 7308              		.loc 1 3886 14 view .LVU2498
 7309 004c 65E0     		b	.L565
 7310              	.L587:
3887:Src/ff.c      **** 					}
3888:Src/ff.c      **** 				}
3889:Src/ff.c      **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 7311              		.loc 1 3889 19 is_stmt 1 discriminator 1 view .LVU2499
 7312 004e 4FF0020A 		mov	r10, #2
 7313 0052 84F811A0 		strb	r10, [r4, #17]
 7314              		.loc 1 3889 19 discriminator 1 view .LVU2500
 7315 0056 CDF804A0 		str	r10, [sp, #4]
 7316              	.LVL887:
 7317              		.loc 1 3889 19 is_stmt 0 discriminator 1 view .LVU2501
 7318 005a 8AE0     		b	.L559
 7319              	.LVL888:
 7320              	.L588:
3890:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7321              		.loc 1 3890 29 is_stmt 1 discriminator 1 view .LVU2502
 7322 005c 4FF0010A 		mov	r10, #1
 7323 0060 84F811A0 		strb	r10, [r4, #17]
 7324              		.loc 1 3890 29 discriminator 1 view .LVU2503
 7325 0064 CDF804A0 		str	r10, [sp, #4]
 7326              	.LVL889:
 7327              		.loc 1 3890 29 is_stmt 0 discriminator 1 view .LVU2504
 7328 0068 83E0     		b	.L559
 7329              	.LVL890:
 7330              	.L589:
3891:Src/ff.c      **** 				fp->clust = clst;				/* Update current cluster */
3892:Src/ff.c      **** 			}
3893:Src/ff.c      **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
3894:Src/ff.c      **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 7331              		.loc 1 3894 19 is_stmt 1 discriminator 1 view .LVU2505
 7332 006a 4FF0020A 		mov	r10, #2
 7333 006e 84F811A0 		strb	r10, [r4, #17]
 7334              		.loc 1 3894 19 discriminator 1 view .LVU2506
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 235


 7335 0072 CDF804A0 		str	r10, [sp, #4]
 7336              	.LVL891:
 7337              		.loc 1 3894 19 is_stmt 0 discriminator 1 view .LVU2507
 7338 0076 7CE0     		b	.L559
 7339              	.LVL892:
 7340              	.L571:
3895:Src/ff.c      **** 			sect += csect;
3896:Src/ff.c      **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3897:Src/ff.c      **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
3898:Src/ff.c      **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3899:Src/ff.c      **** 					cc = fs->csize - csect;
3900:Src/ff.c      **** 				}
3901:Src/ff.c      **** 				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7341              		.loc 1 3901 79 is_stmt 1 discriminator 2 view .LVU2508
3902:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
3903:Src/ff.c      **** #if FF_FS_TINY
3904:Src/ff.c      **** 				if (fs->wflag && fs->winsect - sect < cc) {
3905:Src/ff.c      **** 					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3906:Src/ff.c      **** 				}
3907:Src/ff.c      **** #else
3908:Src/ff.c      **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 7342              		.loc 1 3908 5 discriminator 2 view .LVU2509
 7343              		.loc 1 3908 9 is_stmt 0 discriminator 2 view .LVU2510
 7344 0078 94F91030 		ldrsb	r3, [r4, #16]
 7345              		.loc 1 3908 8 discriminator 2 view .LVU2511
 7346 007c 002B     		cmp	r3, #0
 7347 007e 02DB     		blt	.L584
 7348              	.L572:
3909:Src/ff.c      **** 					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3910:Src/ff.c      **** 				}
3911:Src/ff.c      **** #endif
3912:Src/ff.c      **** #endif
3913:Src/ff.c      **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 7349              		.loc 1 3913 5 is_stmt 1 view .LVU2512
 7350              		.loc 1 3913 10 is_stmt 0 view .LVU2513
 7351 0080 4FEA4A27 		lsl	r7, r10, #9
 7352              	.LVL893:
3914:Src/ff.c      **** 				continue;
 7353              		.loc 1 3914 5 is_stmt 1 view .LVU2514
 7354 0084 2FE0     		b	.L573
 7355              	.LVL894:
 7356              	.L584:
3908:Src/ff.c      **** 					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 7357              		.loc 1 3908 36 is_stmt 0 discriminator 1 view .LVU2515
 7358 0086 E069     		ldr	r0, [r4, #28]
3908:Src/ff.c      **** 					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 7359              		.loc 1 3908 43 discriminator 1 view .LVU2516
 7360 0088 A0EB0900 		sub	r0, r0, r9
3908:Src/ff.c      **** 					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 7361              		.loc 1 3908 31 discriminator 1 view .LVU2517
 7362 008c 5045     		cmp	r0, r10
 7363 008e F7D2     		bcs	.L572
3909:Src/ff.c      **** 					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 7364              		.loc 1 3909 6 is_stmt 1 view .LVU2518
 7365 0090 4FF40072 		mov	r2, #512
 7366 0094 04F12801 		add	r1, r4, #40
 7367 0098 06EB4020 		add	r0, r6, r0, lsl #9
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 236


 7368 009c FFF7FEFF 		bl	memcpy
 7369              	.LVL895:
 7370 00a0 EEE7     		b	.L572
 7371              	.L569:
3915:Src/ff.c      **** 			}
3916:Src/ff.c      **** #if !FF_FS_TINY
3917:Src/ff.c      **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 7372              		.loc 1 3917 4 view .LVU2519
 7373              		.loc 1 3917 10 is_stmt 0 view .LVU2520
 7374 00a2 E269     		ldr	r2, [r4, #28]
 7375              		.loc 1 3917 7 view .LVU2521
 7376 00a4 4A45     		cmp	r2, r9
 7377 00a6 0DD0     		beq	.L574
3918:Src/ff.c      **** #if !FF_FS_READONLY
3919:Src/ff.c      **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 7378              		.loc 1 3919 5 is_stmt 1 view .LVU2522
 7379              		.loc 1 3919 9 is_stmt 0 view .LVU2523
 7380 00a8 94F91030 		ldrsb	r3, [r4, #16]
 7381              		.loc 1 3919 8 view .LVU2524
 7382 00ac 002B     		cmp	r3, #0
 7383 00ae 64DB     		blt	.L585
 7384              	.L575:
3920:Src/ff.c      **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3921:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
3922:Src/ff.c      **** 				}
3923:Src/ff.c      **** #endif
3924:Src/ff.c      **** 				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 7385              		.loc 1 3924 5 is_stmt 1 view .LVU2525
 7386              		.loc 1 3924 9 is_stmt 0 view .LVU2526
 7387 00b0 0123     		movs	r3, #1
 7388 00b2 4A46     		mov	r2, r9
 7389 00b4 04F12801 		add	r1, r4, #40
 7390 00b8 0398     		ldr	r0, [sp, #12]
 7391 00ba 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7392 00bc FFF7FEFF 		bl	disk_read
 7393              	.LVL896:
 7394              		.loc 1 3924 8 view .LVU2527
 7395 00c0 0028     		cmp	r0, #0
 7396 00c2 6ED1     		bne	.L586
 7397              	.L574:
 7398              		.loc 1 3924 80 is_stmt 1 discriminator 2 view .LVU2528
3925:Src/ff.c      **** 			}
3926:Src/ff.c      **** #endif
3927:Src/ff.c      **** 			fp->sect = sect;
 7399              		.loc 1 3927 4 discriminator 2 view .LVU2529
 7400              		.loc 1 3927 13 is_stmt 0 discriminator 2 view .LVU2530
 7401 00c4 C4F81C90 		str	r9, [r4, #28]
 7402              	.LVL897:
 7403              	.L562:
3928:Src/ff.c      **** 		}
3929:Src/ff.c      **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 7404              		.loc 1 3929 3 is_stmt 1 view .LVU2531
 7405              		.loc 1 3929 27 is_stmt 0 view .LVU2532
 7406 00c8 6369     		ldr	r3, [r4, #20]
 7407              		.loc 1 3929 34 view .LVU2533
 7408 00ca C3F30803 		ubfx	r3, r3, #0, #9
 7409              		.loc 1 3929 8 view .LVU2534
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 237


 7410 00ce C3F50077 		rsb	r7, r3, #512
 7411              	.LVL898:
3930:Src/ff.c      **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 7412              		.loc 1 3930 3 is_stmt 1 view .LVU2535
 7413              		.loc 1 3930 6 is_stmt 0 view .LVU2536
 7414 00d2 BD42     		cmp	r5, r7
 7415 00d4 00D2     		bcs	.L577
 7416              		.loc 1 3930 24 view .LVU2537
 7417 00d6 2F46     		mov	r7, r5
 7418              	.LVL899:
 7419              	.L577:
3931:Src/ff.c      **** #if FF_FS_TINY
3932:Src/ff.c      **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3933:Src/ff.c      **** 		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3934:Src/ff.c      **** #else
3935:Src/ff.c      **** 		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 7420              		.loc 1 3935 3 is_stmt 1 view .LVU2538
 7421              		.loc 1 3935 17 is_stmt 0 view .LVU2539
 7422 00d8 04F12801 		add	r1, r4, #40
 7423              		.loc 1 3935 3 view .LVU2540
 7424 00dc 3A46     		mov	r2, r7
 7425 00de 1944     		add	r1, r1, r3
 7426 00e0 3046     		mov	r0, r6
 7427 00e2 FFF7FEFF 		bl	memcpy
 7428              	.LVL900:
 7429              	.L573:
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7430              		.loc 1 3873 19 is_stmt 1 view .LVU2541
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7431              		.loc 1 3873 23 is_stmt 0 view .LVU2542
 7432 00e6 ED1B     		subs	r5, r5, r7
 7433              	.LVL901:
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7434              		.loc 1 3873 36 view .LVU2543
 7435 00e8 D8F80030 		ldr	r3, [r8]
 7436 00ec 3B44     		add	r3, r3, r7
 7437 00ee C8F80030 		str	r3, [r8]
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7438              		.loc 1 3873 51 view .LVU2544
 7439 00f2 3E44     		add	r6, r6, r7
 7440              	.LVL902:
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7441              		.loc 1 3873 69 view .LVU2545
 7442 00f4 6369     		ldr	r3, [r4, #20]
 7443 00f6 3B44     		add	r3, r3, r7
 7444 00f8 6361     		str	r3, [r4, #20]
 7445              	.LVL903:
 7446              	.L578:
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7447              		.loc 1 3873 10 is_stmt 1 discriminator 1 view .LVU2546
3873:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 7448              		.loc 1 3873 2 is_stmt 0 discriminator 1 view .LVU2547
 7449 00fa 002D     		cmp	r5, #0
 7450 00fc 39D0     		beq	.L559
3874:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 7451              		.loc 1 3874 3 is_stmt 1 view .LVU2548
3874:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 238


 7452              		.loc 1 3874 9 is_stmt 0 view .LVU2549
 7453 00fe 6369     		ldr	r3, [r4, #20]
3874:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 7454              		.loc 1 3874 16 view .LVU2550
 7455 0100 C3F30802 		ubfx	r2, r3, #0, #9
3874:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 7456              		.loc 1 3874 6 view .LVU2551
 7457 0104 002A     		cmp	r2, #0
 7458 0106 DFD1     		bne	.L562
3875:Src/ff.c      **** 			if (csect == 0) {					/* On the cluster boundary? */
 7459              		.loc 1 3875 4 is_stmt 1 view .LVU2552
3875:Src/ff.c      **** 			if (csect == 0) {					/* On the cluster boundary? */
 7460              		.loc 1 3875 42 is_stmt 0 view .LVU2553
 7461 0108 039A     		ldr	r2, [sp, #12]
 7462 010a 5789     		ldrh	r7, [r2, #10]
3875:Src/ff.c      **** 			if (csect == 0) {					/* On the cluster boundary? */
 7463              		.loc 1 3875 50 view .LVU2554
 7464 010c 013F     		subs	r7, r7, #1
 7465              	.LVL904:
3876:Src/ff.c      **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 7466              		.loc 1 3876 4 is_stmt 1 view .LVU2555
3876:Src/ff.c      **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 7467              		.loc 1 3876 7 is_stmt 0 view .LVU2556
 7468 010e 17EA5327 		ands	r7, r7, r3, lsr #9
 7469              	.LVL905:
3876:Src/ff.c      **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 7470              		.loc 1 3876 7 view .LVU2557
 7471 0112 08D1     		bne	.L563
3877:Src/ff.c      **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 7472              		.loc 1 3877 5 is_stmt 1 view .LVU2558
3877:Src/ff.c      **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 7473              		.loc 1 3877 8 is_stmt 0 view .LVU2559
 7474 0114 002B     		cmp	r3, #0
 7475 0116 95D1     		bne	.L564
3878:Src/ff.c      **** 				} else {						/* Middle or end of the file */
 7476              		.loc 1 3878 6 is_stmt 1 view .LVU2560
3878:Src/ff.c      **** 				} else {						/* Middle or end of the file */
 7477              		.loc 1 3878 11 is_stmt 0 view .LVU2561
 7478 0118 A068     		ldr	r0, [r4, #8]
 7479              	.LVL906:
 7480              	.L565:
3889:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7481              		.loc 1 3889 5 is_stmt 1 view .LVU2562
3889:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7482              		.loc 1 3889 8 is_stmt 0 view .LVU2563
 7483 011a 0128     		cmp	r0, #1
 7484 011c 97D9     		bls	.L587
3889:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7485              		.loc 1 3889 40 is_stmt 1 discriminator 2 view .LVU2564
3890:Src/ff.c      **** 				fp->clust = clst;				/* Update current cluster */
 7486              		.loc 1 3890 5 discriminator 2 view .LVU2565
3890:Src/ff.c      **** 				fp->clust = clst;				/* Update current cluster */
 7487              		.loc 1 3890 8 is_stmt 0 discriminator 2 view .LVU2566
 7488 011e B0F1FF3F 		cmp	r0, #-1
 7489 0122 9BD0     		beq	.L588
3890:Src/ff.c      **** 				fp->clust = clst;				/* Update current cluster */
 7490              		.loc 1 3890 51 is_stmt 1 discriminator 2 view .LVU2567
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 239


3891:Src/ff.c      **** 			}
 7491              		.loc 1 3891 5 discriminator 2 view .LVU2568
3891:Src/ff.c      **** 			}
 7492              		.loc 1 3891 15 is_stmt 0 discriminator 2 view .LVU2569
 7493 0124 A061     		str	r0, [r4, #24]
 7494              	.LVL907:
 7495              	.L563:
3893:Src/ff.c      **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 7496              		.loc 1 3893 4 is_stmt 1 view .LVU2570
3893:Src/ff.c      **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 7497              		.loc 1 3893 11 is_stmt 0 view .LVU2571
 7498 0126 DDF80CB0 		ldr	fp, [sp, #12]
 7499 012a A169     		ldr	r1, [r4, #24]
 7500 012c 5846     		mov	r0, fp
 7501 012e FFF7FEFF 		bl	clst2sect
 7502              	.LVL908:
3894:Src/ff.c      **** 			sect += csect;
 7503              		.loc 1 3894 4 is_stmt 1 view .LVU2572
3894:Src/ff.c      **** 			sect += csect;
 7504              		.loc 1 3894 7 is_stmt 0 view .LVU2573
 7505 0132 8146     		mov	r9, r0
 7506 0134 0028     		cmp	r0, #0
 7507 0136 98D0     		beq	.L589
3894:Src/ff.c      **** 			sect += csect;
 7508              		.loc 1 3894 40 is_stmt 1 discriminator 2 view .LVU2574
3895:Src/ff.c      **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 7509              		.loc 1 3895 4 discriminator 2 view .LVU2575
3895:Src/ff.c      **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 7510              		.loc 1 3895 9 is_stmt 0 discriminator 2 view .LVU2576
 7511 0138 B944     		add	r9, r9, r7
 7512              	.LVL909:
3896:Src/ff.c      **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 7513              		.loc 1 3896 4 is_stmt 1 discriminator 2 view .LVU2577
3896:Src/ff.c      **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 7514              		.loc 1 3896 7 is_stmt 0 discriminator 2 view .LVU2578
 7515 013a 4FEA552A 		lsr	r10, r5, #9
 7516              	.LVL910:
3897:Src/ff.c      **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 7517              		.loc 1 3897 4 is_stmt 1 discriminator 2 view .LVU2579
3897:Src/ff.c      **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 7518              		.loc 1 3897 7 is_stmt 0 discriminator 2 view .LVU2580
 7519 013e B5F5007F 		cmp	r5, #512
 7520 0142 AED3     		bcc	.L569
3898:Src/ff.c      **** 					cc = fs->csize - csect;
 7521              		.loc 1 3898 5 is_stmt 1 view .LVU2581
3898:Src/ff.c      **** 					cc = fs->csize - csect;
 7522              		.loc 1 3898 15 is_stmt 0 view .LVU2582
 7523 0144 07EB0A03 		add	r3, r7, r10
3898:Src/ff.c      **** 					cc = fs->csize - csect;
 7524              		.loc 1 3898 24 view .LVU2583
 7525 0148 BBF80A20 		ldrh	r2, [fp, #10]
3898:Src/ff.c      **** 					cc = fs->csize - csect;
 7526              		.loc 1 3898 8 view .LVU2584
 7527 014c 9342     		cmp	r3, r2
 7528 014e 01D9     		bls	.L570
3899:Src/ff.c      **** 				}
 7529              		.loc 1 3899 6 is_stmt 1 view .LVU2585
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 240


3899:Src/ff.c      **** 				}
 7530              		.loc 1 3899 9 is_stmt 0 view .LVU2586
 7531 0150 A2EB070A 		sub	r10, r2, r7
 7532              	.LVL911:
 7533              	.L570:
3901:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 7534              		.loc 1 3901 5 is_stmt 1 view .LVU2587
3901:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 7535              		.loc 1 3901 9 is_stmt 0 view .LVU2588
 7536 0154 5346     		mov	r3, r10
 7537 0156 4A46     		mov	r2, r9
 7538 0158 3146     		mov	r1, r6
 7539 015a 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 7540 015e FFF7FEFF 		bl	disk_read
 7541              	.LVL912:
3901:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 7542              		.loc 1 3901 8 view .LVU2589
 7543 0162 0028     		cmp	r0, #0
 7544 0164 88D0     		beq	.L571
3901:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 7545              		.loc 1 3901 57 is_stmt 1 discriminator 1 view .LVU2590
 7546 0166 4FF0010A 		mov	r10, #1
 7547              	.LVL913:
3901:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 7548              		.loc 1 3901 57 is_stmt 0 discriminator 1 view .LVU2591
 7549 016a 84F811A0 		strb	r10, [r4, #17]
3901:Src/ff.c      **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
 7550              		.loc 1 3901 57 is_stmt 1 discriminator 1 view .LVU2592
 7551 016e CDF804A0 		str	r10, [sp, #4]
 7552              	.LVL914:
 7553              	.L559:
3936:Src/ff.c      **** #endif
3937:Src/ff.c      **** 	}
3938:Src/ff.c      **** 
3939:Src/ff.c      **** 	LEAVE_FF(fs, FR_OK);
3940:Src/ff.c      **** }
 7554              		.loc 1 3940 1 is_stmt 0 view .LVU2593
 7555 0172 0198     		ldr	r0, [sp, #4]
 7556 0174 05B0     		add	sp, sp, #20
 7557              	.LCFI53:
 7558              		.cfi_remember_state
 7559              		.cfi_def_cfa_offset 36
 7560              		@ sp needed
 7561 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7562              	.LVL915:
 7563              	.L585:
 7564              	.LCFI54:
 7565              		.cfi_restore_state
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7566              		.loc 1 3920 6 is_stmt 1 view .LVU2594
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7567              		.loc 1 3920 10 is_stmt 0 view .LVU2595
 7568 017a 0123     		movs	r3, #1
 7569 017c 04F12801 		add	r1, r4, #40
 7570 0180 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 7571 0184 FFF7FEFF 		bl	disk_write
 7572              	.LVL916:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 241


3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7573              		.loc 1 3920 9 view .LVU2596
 7574 0188 20B9     		cbnz	r0, .L590
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7575              		.loc 1 3920 86 is_stmt 1 discriminator 2 view .LVU2597
3921:Src/ff.c      **** 				}
 7576              		.loc 1 3921 6 discriminator 2 view .LVU2598
3921:Src/ff.c      **** 				}
 7577              		.loc 1 3921 15 is_stmt 0 discriminator 2 view .LVU2599
 7578 018a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 7579 018c 03F07F03 		and	r3, r3, #127
 7580 0190 2374     		strb	r3, [r4, #16]
 7581 0192 8DE7     		b	.L575
 7582              	.L590:
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7583              		.loc 1 3920 64 is_stmt 1 discriminator 1 view .LVU2600
 7584 0194 4FF0010A 		mov	r10, #1
 7585              	.LVL917:
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7586              		.loc 1 3920 64 is_stmt 0 discriminator 1 view .LVU2601
 7587 0198 84F811A0 		strb	r10, [r4, #17]
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7588              		.loc 1 3920 64 is_stmt 1 discriminator 1 view .LVU2602
 7589 019c CDF804A0 		str	r10, [sp, #4]
 7590              	.LVL918:
3920:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7591              		.loc 1 3920 64 is_stmt 0 discriminator 1 view .LVU2603
 7592 01a0 E7E7     		b	.L559
 7593              	.LVL919:
 7594              	.L586:
3924:Src/ff.c      **** 			}
 7595              		.loc 1 3924 58 is_stmt 1 discriminator 1 view .LVU2604
 7596 01a2 4FF0010A 		mov	r10, #1
 7597              	.LVL920:
3924:Src/ff.c      **** 			}
 7598              		.loc 1 3924 58 is_stmt 0 discriminator 1 view .LVU2605
 7599 01a6 84F811A0 		strb	r10, [r4, #17]
3924:Src/ff.c      **** 			}
 7600              		.loc 1 3924 58 is_stmt 1 discriminator 1 view .LVU2606
 7601 01aa CDF804A0 		str	r10, [sp, #4]
 7602              	.LVL921:
3924:Src/ff.c      **** 			}
 7603              		.loc 1 3924 58 is_stmt 0 discriminator 1 view .LVU2607
 7604 01ae E0E7     		b	.L559
 7605              	.LVL922:
 7606              	.L580:
3869:Src/ff.c      **** 	remain = fp->obj.objsize - fp->fptr;
 7607              		.loc 1 3869 29 view .LVU2608
 7608 01b0 0723     		movs	r3, #7
 7609 01b2 0193     		str	r3, [sp, #4]
 7610              	.LVL923:
3869:Src/ff.c      **** 	remain = fp->obj.objsize - fp->fptr;
 7611              		.loc 1 3869 29 view .LVU2609
 7612 01b4 DDE7     		b	.L559
 7613              		.cfi_endproc
 7614              	.LFE41:
 7616              		.section	.text.f_write,"ax",%progbits
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 242


 7617              		.align	1
 7618              		.global	f_write
 7619              		.syntax unified
 7620              		.thumb
 7621              		.thumb_func
 7622              		.fpu softvfp
 7624              	f_write:
 7625              	.LVL924:
 7626              	.LFB42:
3941:Src/ff.c      **** 
3942:Src/ff.c      **** 
3943:Src/ff.c      **** 
3944:Src/ff.c      **** 
3945:Src/ff.c      **** #if !FF_FS_READONLY
3946:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3947:Src/ff.c      **** /* Write File                                                            */
3948:Src/ff.c      **** /*-----------------------------------------------------------------------*/
3949:Src/ff.c      **** 
3950:Src/ff.c      **** FRESULT f_write (
3951:Src/ff.c      **** 	FIL* fp,			/* Open file to be written */
3952:Src/ff.c      **** 	const void* buff,	/* Data to be written */
3953:Src/ff.c      **** 	UINT btw,			/* Number of bytes to write */
3954:Src/ff.c      **** 	UINT* bw			/* Number of bytes written */
3955:Src/ff.c      **** )
3956:Src/ff.c      **** {
 7627              		.loc 1 3956 1 is_stmt 1 view -0
 7628              		.cfi_startproc
 7629              		@ args = 0, pretend = 0, frame = 16
 7630              		@ frame_needed = 0, uses_anonymous_args = 0
 7631              		.loc 1 3956 1 is_stmt 0 view .LVU2611
 7632 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7633              	.LCFI55:
 7634              		.cfi_def_cfa_offset 36
 7635              		.cfi_offset 4, -36
 7636              		.cfi_offset 5, -32
 7637              		.cfi_offset 6, -28
 7638              		.cfi_offset 7, -24
 7639              		.cfi_offset 8, -20
 7640              		.cfi_offset 9, -16
 7641              		.cfi_offset 10, -12
 7642              		.cfi_offset 11, -8
 7643              		.cfi_offset 14, -4
 7644 0004 85B0     		sub	sp, sp, #20
 7645              	.LCFI56:
 7646              		.cfi_def_cfa_offset 56
 7647 0006 0446     		mov	r4, r0
 7648 0008 0E46     		mov	r6, r1
 7649 000a 1546     		mov	r5, r2
 7650 000c 9846     		mov	r8, r3
3957:Src/ff.c      **** 	FRESULT res;
 7651              		.loc 1 3957 2 is_stmt 1 view .LVU2612
3958:Src/ff.c      **** 	FATFS *fs;
 7652              		.loc 1 3958 2 view .LVU2613
3959:Src/ff.c      **** 	DWORD clst;
 7653              		.loc 1 3959 2 view .LVU2614
3960:Src/ff.c      **** 	LBA_t sect;
 7654              		.loc 1 3960 2 view .LVU2615
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 243


3961:Src/ff.c      **** 	UINT wcnt, cc, csect;
 7655              		.loc 1 3961 2 view .LVU2616
3962:Src/ff.c      **** 	const BYTE *wbuff = (const BYTE*)buff;
 7656              		.loc 1 3962 2 view .LVU2617
 7657              	.LVL925:
3963:Src/ff.c      **** 
3964:Src/ff.c      **** 
3965:Src/ff.c      **** 	*bw = 0;	/* Clear write byte counter */
 7658              		.loc 1 3965 2 view .LVU2618
 7659              		.loc 1 3965 6 is_stmt 0 view .LVU2619
 7660 000e 0023     		movs	r3, #0
 7661              	.LVL926:
 7662              		.loc 1 3965 6 view .LVU2620
 7663 0010 C8F80030 		str	r3, [r8]
3966:Src/ff.c      **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 7664              		.loc 1 3966 2 is_stmt 1 view .LVU2621
 7665              		.loc 1 3966 8 is_stmt 0 view .LVU2622
 7666 0014 03A9     		add	r1, sp, #12
 7667              	.LVL927:
 7668              		.loc 1 3966 8 view .LVU2623
 7669 0016 FFF7FEFF 		bl	validate
 7670              	.LVL928:
3967:Src/ff.c      **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 7671              		.loc 1 3967 2 is_stmt 1 view .LVU2624
 7672              		.loc 1 3967 5 is_stmt 0 view .LVU2625
 7673 001a 0190     		str	r0, [sp, #4]
 7674 001c 0028     		cmp	r0, #0
 7675 001e 40F0CD80 		bne	.L594
 7676              		.loc 1 3967 27 discriminator 2 view .LVU2626
 7677 0022 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 7678 0024 0193     		str	r3, [sp, #4]
 7679              	.LVL929:
 7680              		.loc 1 3967 19 discriminator 2 view .LVU2627
 7681 0026 002B     		cmp	r3, #0
 7682 0028 40F0C880 		bne	.L594
3968:Src/ff.c      **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 7683              		.loc 1 3968 2 is_stmt 1 view .LVU2628
 7684              		.loc 1 3968 10 is_stmt 0 view .LVU2629
 7685 002c 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 7686              	.LVL930:
 7687              		.loc 1 3968 5 view .LVU2630
 7688 002e 13F0020F 		tst	r3, #2
 7689 0032 00F0DD80 		beq	.L615
3969:Src/ff.c      **** 
3970:Src/ff.c      **** 	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
3971:Src/ff.c      **** 	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 7690              		.loc 1 3971 2 is_stmt 1 view .LVU2631
 7691              		.loc 1 3971 61 is_stmt 0 view .LVU2632
 7692 0036 6369     		ldr	r3, [r4, #20]
 7693              		.loc 1 3971 5 view .LVU2633
 7694 0038 EB42     		cmn	r3, r5
 7695 003a 75D3     		bcc	.L613
3972:Src/ff.c      **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 7696              		.loc 1 3972 3 is_stmt 1 view .LVU2634
 7697              		.loc 1 3972 7 is_stmt 0 view .LVU2635
 7698 003c DD43     		mvns	r5, r3
 7699              	.LVL931:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 244


 7700              		.loc 1 3972 7 view .LVU2636
 7701 003e 73E0     		b	.L613
 7702              	.LVL932:
 7703              	.L621:
3973:Src/ff.c      **** 	}
3974:Src/ff.c      **** 
3975:Src/ff.c      **** 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp-
3976:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
3977:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
3978:Src/ff.c      **** 			if (csect == 0) {				/* On the cluster boundary? */
3979:Src/ff.c      **** 				if (fp->fptr == 0) {		/* On the top of the file? */
3980:Src/ff.c      **** 					clst = fp->obj.sclust;	/* Follow from the origin */
3981:Src/ff.c      **** 					if (clst == 0) {		/* If no cluster is allocated, */
3982:Src/ff.c      **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 7704              		.loc 1 3982 7 is_stmt 1 view .LVU2637
 7705              		.loc 1 3982 14 is_stmt 0 view .LVU2638
 7706 0040 0021     		movs	r1, #0
 7707 0042 2046     		mov	r0, r4
 7708              	.LVL933:
 7709              		.loc 1 3982 14 view .LVU2639
 7710 0044 FFF7FEFF 		bl	create_chain
 7711              	.LVL934:
 7712              		.loc 1 3982 14 view .LVU2640
 7713 0048 81E0     		b	.L599
 7714              	.LVL935:
 7715              	.L598:
3983:Src/ff.c      **** 					}
3984:Src/ff.c      **** 				} else {					/* On the middle or end of the file */
3985:Src/ff.c      **** #if FF_USE_FASTSEEK
3986:Src/ff.c      **** 					if (fp->cltbl) {
3987:Src/ff.c      **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3988:Src/ff.c      **** 					} else
3989:Src/ff.c      **** #endif
3990:Src/ff.c      **** 					{
3991:Src/ff.c      **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 7716              		.loc 1 3991 7 is_stmt 1 view .LVU2641
 7717              		.loc 1 3991 14 is_stmt 0 view .LVU2642
 7718 004a A169     		ldr	r1, [r4, #24]
 7719 004c 2046     		mov	r0, r4
 7720 004e FFF7FEFF 		bl	create_chain
 7721              	.LVL936:
 7722              		.loc 1 3991 14 view .LVU2643
 7723 0052 7CE0     		b	.L599
 7724              	.L622:
3992:Src/ff.c      **** 					}
3993:Src/ff.c      **** 				}
3994:Src/ff.c      **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
3995:Src/ff.c      **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 7725              		.loc 1 3995 20 is_stmt 1 discriminator 1 view .LVU2644
 7726 0054 4FF0020A 		mov	r10, #2
 7727 0058 84F811A0 		strb	r10, [r4, #17]
 7728              		.loc 1 3995 20 discriminator 1 view .LVU2645
 7729 005c CDF804A0 		str	r10, [sp, #4]
 7730              	.LVL937:
 7731              		.loc 1 3995 20 is_stmt 0 discriminator 1 view .LVU2646
 7732 0060 ACE0     		b	.L594
 7733              	.LVL938:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 245


 7734              	.L623:
3996:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7735              		.loc 1 3996 29 is_stmt 1 discriminator 1 view .LVU2647
 7736 0062 4FF0010A 		mov	r10, #1
 7737 0066 84F811A0 		strb	r10, [r4, #17]
 7738              		.loc 1 3996 29 discriminator 1 view .LVU2648
 7739 006a CDF804A0 		str	r10, [sp, #4]
 7740              	.LVL939:
 7741              		.loc 1 3996 29 is_stmt 0 discriminator 1 view .LVU2649
 7742 006e A5E0     		b	.L594
 7743              	.LVL940:
 7744              	.L624:
3997:Src/ff.c      **** 				fp->clust = clst;			/* Update current cluster */
3998:Src/ff.c      **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
3999:Src/ff.c      **** 			}
4000:Src/ff.c      **** #if FF_FS_TINY
4001:Src/ff.c      **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
4002:Src/ff.c      **** #else
4003:Src/ff.c      **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
4004:Src/ff.c      **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7745              		.loc 1 4004 5 is_stmt 1 view .LVU2650
 7746              		.loc 1 4004 9 is_stmt 0 view .LVU2651
 7747 0070 0123     		movs	r3, #1
 7748 0072 E269     		ldr	r2, [r4, #28]
 7749 0074 04F12801 		add	r1, r4, #40
 7750 0078 0398     		ldr	r0, [sp, #12]
 7751 007a 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 7752 007c FFF7FEFF 		bl	disk_write
 7753              	.LVL941:
 7754              		.loc 1 4004 8 view .LVU2652
 7755 0080 20B9     		cbnz	r0, .L618
 7756              		.loc 1 4004 85 is_stmt 1 discriminator 2 view .LVU2653
4005:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7757              		.loc 1 4005 5 discriminator 2 view .LVU2654
 7758              		.loc 1 4005 14 is_stmt 0 discriminator 2 view .LVU2655
 7759 0082 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 7760 0084 03F07F03 		and	r3, r3, #127
 7761 0088 2374     		strb	r3, [r4, #16]
 7762 008a 70E0     		b	.L603
 7763              	.L618:
4004:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7764              		.loc 1 4004 63 is_stmt 1 discriminator 1 view .LVU2656
 7765 008c 4FF0010A 		mov	r10, #1
 7766 0090 84F811A0 		strb	r10, [r4, #17]
4004:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7767              		.loc 1 4004 63 discriminator 1 view .LVU2657
 7768 0094 CDF804A0 		str	r10, [sp, #4]
 7769              	.LVL942:
4004:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7770              		.loc 1 4004 63 is_stmt 0 discriminator 1 view .LVU2658
 7771 0098 90E0     		b	.L594
 7772              	.LVL943:
 7773              	.L625:
4006:Src/ff.c      **** 			}
4007:Src/ff.c      **** #endif
4008:Src/ff.c      **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
4009:Src/ff.c      **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 246


 7774              		.loc 1 4009 19 is_stmt 1 discriminator 1 view .LVU2659
 7775 009a 4FF0020A 		mov	r10, #2
 7776 009e 84F811A0 		strb	r10, [r4, #17]
 7777              		.loc 1 4009 19 discriminator 1 view .LVU2660
 7778 00a2 CDF804A0 		str	r10, [sp, #4]
 7779              	.LVL944:
 7780              		.loc 1 4009 19 is_stmt 0 discriminator 1 view .LVU2661
 7781 00a6 89E0     		b	.L594
 7782              	.LVL945:
 7783              	.L608:
4010:Src/ff.c      **** 			sect += csect;
4011:Src/ff.c      **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
4012:Src/ff.c      **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
4013:Src/ff.c      **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
4014:Src/ff.c      **** 					cc = fs->csize - csect;
4015:Src/ff.c      **** 				}
4016:Src/ff.c      **** 				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7784              		.loc 1 4016 80 is_stmt 1 discriminator 2 view .LVU2662
4017:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
4018:Src/ff.c      **** #if FF_FS_TINY
4019:Src/ff.c      **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
4020:Src/ff.c      **** 					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
4021:Src/ff.c      **** 					fs->wflag = 0;
4022:Src/ff.c      **** 				}
4023:Src/ff.c      **** #else
4024:Src/ff.c      **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 7785              		.loc 1 4024 5 discriminator 2 view .LVU2663
 7786              		.loc 1 4024 11 is_stmt 0 discriminator 2 view .LVU2664
 7787 00a8 E169     		ldr	r1, [r4, #28]
 7788              		.loc 1 4024 18 discriminator 2 view .LVU2665
 7789 00aa A1EB0901 		sub	r1, r1, r9
 7790              		.loc 1 4024 8 discriminator 2 view .LVU2666
 7791 00ae 5145     		cmp	r1, r10
 7792 00b0 02D3     		bcc	.L619
 7793              	.L609:
4025:Src/ff.c      **** 					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
4026:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_DIRTY;
4027:Src/ff.c      **** 				}
4028:Src/ff.c      **** #endif
4029:Src/ff.c      **** #endif
4030:Src/ff.c      **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 7794              		.loc 1 4030 5 is_stmt 1 view .LVU2667
 7795              		.loc 1 4030 10 is_stmt 0 view .LVU2668
 7796 00b2 4FEA4A27 		lsl	r7, r10, #9
 7797              	.LVL946:
4031:Src/ff.c      **** 				continue;
 7798              		.loc 1 4031 5 is_stmt 1 view .LVU2669
 7799 00b6 28E0     		b	.L610
 7800              	.LVL947:
 7801              	.L619:
4025:Src/ff.c      **** 					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 7802              		.loc 1 4025 6 view .LVU2670
 7803 00b8 4FF40072 		mov	r2, #512
 7804 00bc 06EB4121 		add	r1, r6, r1, lsl #9
 7805 00c0 04F12800 		add	r0, r4, #40
 7806 00c4 FFF7FEFF 		bl	memcpy
 7807              	.LVL948:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 247


4026:Src/ff.c      **** 				}
 7808              		.loc 1 4026 6 view .LVU2671
4026:Src/ff.c      **** 				}
 7809              		.loc 1 4026 15 is_stmt 0 view .LVU2672
 7810 00c8 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 7811 00ca 03F07F03 		and	r3, r3, #127
 7812 00ce 2374     		strb	r3, [r4, #16]
 7813 00d0 EFE7     		b	.L609
 7814              	.L606:
4032:Src/ff.c      **** 			}
4033:Src/ff.c      **** #if FF_FS_TINY
4034:Src/ff.c      **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
4035:Src/ff.c      **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
4036:Src/ff.c      **** 				fs->winsect = sect;
4037:Src/ff.c      **** 			}
4038:Src/ff.c      **** #else
4039:Src/ff.c      **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
 7815              		.loc 1 4039 4 is_stmt 1 view .LVU2673
 7816              		.loc 1 4039 10 is_stmt 0 view .LVU2674
 7817 00d2 E369     		ldr	r3, [r4, #28]
 7818              		.loc 1 4039 7 view .LVU2675
 7819 00d4 4B45     		cmp	r3, r9
 7820 00d6 03D0     		beq	.L611
4040:Src/ff.c      **** 				fp->fptr < fp->obj.objsize &&
 7821              		.loc 1 4040 7 discriminator 1 view .LVU2676
 7822 00d8 6269     		ldr	r2, [r4, #20]
 7823              		.loc 1 4040 23 discriminator 1 view .LVU2677
 7824 00da E368     		ldr	r3, [r4, #12]
4039:Src/ff.c      **** 				fp->fptr < fp->obj.objsize &&
 7825              		.loc 1 4039 25 discriminator 1 view .LVU2678
 7826 00dc 9A42     		cmp	r2, r3
 7827 00de 71D3     		bcc	.L620
 7828              	.L611:
4041:Src/ff.c      **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
4042:Src/ff.c      **** 					ABORT(fs, FR_DISK_ERR);
 7829              		.loc 1 4042 28 is_stmt 1 view .LVU2679
4043:Src/ff.c      **** 			}
4044:Src/ff.c      **** #endif
4045:Src/ff.c      **** 			fp->sect = sect;
 7830              		.loc 1 4045 4 view .LVU2680
 7831              		.loc 1 4045 13 is_stmt 0 view .LVU2681
 7832 00e0 C4F81C90 		str	r9, [r4, #28]
 7833              	.LVL949:
 7834              	.L596:
4046:Src/ff.c      **** 		}
4047:Src/ff.c      **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 7835              		.loc 1 4047 3 is_stmt 1 view .LVU2682
 7836              		.loc 1 4047 27 is_stmt 0 view .LVU2683
 7837 00e4 6369     		ldr	r3, [r4, #20]
 7838              		.loc 1 4047 34 view .LVU2684
 7839 00e6 C3F30803 		ubfx	r3, r3, #0, #9
 7840              		.loc 1 4047 8 view .LVU2685
 7841 00ea C3F50077 		rsb	r7, r3, #512
 7842              	.LVL950:
4048:Src/ff.c      **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 7843              		.loc 1 4048 3 is_stmt 1 view .LVU2686
 7844              		.loc 1 4048 6 is_stmt 0 view .LVU2687
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 248


 7845 00ee BD42     		cmp	r5, r7
 7846 00f0 00D2     		bcs	.L612
 7847              		.loc 1 4048 24 view .LVU2688
 7848 00f2 2F46     		mov	r7, r5
 7849              	.LVL951:
 7850              	.L612:
4049:Src/ff.c      **** #if FF_FS_TINY
4050:Src/ff.c      **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
4051:Src/ff.c      **** 		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
4052:Src/ff.c      **** 		fs->wflag = 1;
4053:Src/ff.c      **** #else
4054:Src/ff.c      **** 		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 7851              		.loc 1 4054 3 is_stmt 1 view .LVU2689
 7852              		.loc 1 4054 10 is_stmt 0 view .LVU2690
 7853 00f4 04F12800 		add	r0, r4, #40
 7854              		.loc 1 4054 3 view .LVU2691
 7855 00f8 3A46     		mov	r2, r7
 7856 00fa 3146     		mov	r1, r6
 7857 00fc 1844     		add	r0, r0, r3
 7858 00fe FFF7FEFF 		bl	memcpy
 7859              	.LVL952:
4055:Src/ff.c      **** 		fp->flag |= FA_DIRTY;
 7860              		.loc 1 4055 3 is_stmt 1 view .LVU2692
 7861              		.loc 1 4055 12 is_stmt 0 view .LVU2693
 7862 0102 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 7863 0104 63F07F03 		orn	r3, r3, #127
 7864 0108 2374     		strb	r3, [r4, #16]
 7865              	.L610:
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7866              		.loc 1 3975 19 is_stmt 1 view .LVU2694
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7867              		.loc 1 3975 23 is_stmt 0 view .LVU2695
 7868 010a ED1B     		subs	r5, r5, r7
 7869              	.LVL953:
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7870              		.loc 1 3975 36 view .LVU2696
 7871 010c D8F80030 		ldr	r3, [r8]
 7872 0110 3B44     		add	r3, r3, r7
 7873 0112 C8F80030 		str	r3, [r8]
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7874              		.loc 1 3975 51 view .LVU2697
 7875 0116 3E44     		add	r6, r6, r7
 7876              	.LVL954:
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7877              		.loc 1 3975 69 view .LVU2698
 7878 0118 6369     		ldr	r3, [r4, #20]
 7879 011a 1F44     		add	r7, r7, r3
 7880              	.LVL955:
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7881              		.loc 1 3975 69 view .LVU2699
 7882 011c 6761     		str	r7, [r4, #20]
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7883              		.loc 1 3975 115 view .LVU2700
 7884 011e E368     		ldr	r3, [r4, #12]
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7885              		.loc 1 3975 136 view .LVU2701
 7886 0120 9F42     		cmp	r7, r3
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 249


 7887 0122 38BF     		it	cc
 7888 0124 1F46     		movcc	r7, r3
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7889              		.loc 1 3975 94 view .LVU2702
 7890 0126 E760     		str	r7, [r4, #12]
 7891              	.L613:
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7892              		.loc 1 3975 10 is_stmt 1 discriminator 1 view .LVU2703
3975:Src/ff.c      **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7893              		.loc 1 3975 2 is_stmt 0 discriminator 1 view .LVU2704
 7894 0128 002D     		cmp	r5, #0
 7895 012a 5CD0     		beq	.L600
3976:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 7896              		.loc 1 3976 3 is_stmt 1 view .LVU2705
3976:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 7897              		.loc 1 3976 9 is_stmt 0 view .LVU2706
 7898 012c 6369     		ldr	r3, [r4, #20]
3976:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 7899              		.loc 1 3976 16 view .LVU2707
 7900 012e C3F30802 		ubfx	r2, r3, #0, #9
3976:Src/ff.c      **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 7901              		.loc 1 3976 6 view .LVU2708
 7902 0132 002A     		cmp	r2, #0
 7903 0134 D6D1     		bne	.L596
3977:Src/ff.c      **** 			if (csect == 0) {				/* On the cluster boundary? */
 7904              		.loc 1 3977 4 is_stmt 1 view .LVU2709
3977:Src/ff.c      **** 			if (csect == 0) {				/* On the cluster boundary? */
 7905              		.loc 1 3977 43 is_stmt 0 view .LVU2710
 7906 0136 039A     		ldr	r2, [sp, #12]
 7907 0138 5789     		ldrh	r7, [r2, #10]
3977:Src/ff.c      **** 			if (csect == 0) {				/* On the cluster boundary? */
 7908              		.loc 1 3977 51 view .LVU2711
 7909 013a 013F     		subs	r7, r7, #1
 7910              	.LVL956:
3978:Src/ff.c      **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 7911              		.loc 1 3978 4 is_stmt 1 view .LVU2712
3978:Src/ff.c      **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 7912              		.loc 1 3978 7 is_stmt 0 view .LVU2713
 7913 013c 17EA5327 		ands	r7, r7, r3, lsr #9
 7914              	.LVL957:
3978:Src/ff.c      **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 7915              		.loc 1 3978 7 view .LVU2714
 7916 0140 11D1     		bne	.L597
3979:Src/ff.c      **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 7917              		.loc 1 3979 5 is_stmt 1 view .LVU2715
3979:Src/ff.c      **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 7918              		.loc 1 3979 8 is_stmt 0 view .LVU2716
 7919 0142 002B     		cmp	r3, #0
 7920 0144 81D1     		bne	.L598
3980:Src/ff.c      **** 					if (clst == 0) {		/* If no cluster is allocated, */
 7921              		.loc 1 3980 6 is_stmt 1 view .LVU2717
3980:Src/ff.c      **** 					if (clst == 0) {		/* If no cluster is allocated, */
 7922              		.loc 1 3980 11 is_stmt 0 view .LVU2718
 7923 0146 A068     		ldr	r0, [r4, #8]
 7924              	.LVL958:
3981:Src/ff.c      **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 7925              		.loc 1 3981 6 is_stmt 1 view .LVU2719
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 250


3981:Src/ff.c      **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 7926              		.loc 1 3981 9 is_stmt 0 view .LVU2720
 7927 0148 0028     		cmp	r0, #0
 7928 014a 3FF479AF 		beq	.L621
 7929              	.L599:
3994:Src/ff.c      **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 7930              		.loc 1 3994 5 is_stmt 1 view .LVU2721
3994:Src/ff.c      **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 7931              		.loc 1 3994 8 is_stmt 0 view .LVU2722
 7932 014e 0028     		cmp	r0, #0
 7933 0150 49D0     		beq	.L600
3995:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7934              		.loc 1 3995 5 is_stmt 1 view .LVU2723
3995:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7935              		.loc 1 3995 8 is_stmt 0 view .LVU2724
 7936 0152 0128     		cmp	r0, #1
 7937 0154 3FF47EAF 		beq	.L622
3995:Src/ff.c      **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 7938              		.loc 1 3995 41 is_stmt 1 discriminator 2 view .LVU2725
3996:Src/ff.c      **** 				fp->clust = clst;			/* Update current cluster */
 7939              		.loc 1 3996 5 discriminator 2 view .LVU2726
3996:Src/ff.c      **** 				fp->clust = clst;			/* Update current cluster */
 7940              		.loc 1 3996 8 is_stmt 0 discriminator 2 view .LVU2727
 7941 0158 B0F1FF3F 		cmp	r0, #-1
 7942 015c 81D0     		beq	.L623
3996:Src/ff.c      **** 				fp->clust = clst;			/* Update current cluster */
 7943              		.loc 1 3996 51 is_stmt 1 discriminator 2 view .LVU2728
3997:Src/ff.c      **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 7944              		.loc 1 3997 5 discriminator 2 view .LVU2729
3997:Src/ff.c      **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 7945              		.loc 1 3997 15 is_stmt 0 discriminator 2 view .LVU2730
 7946 015e A061     		str	r0, [r4, #24]
3998:Src/ff.c      **** 			}
 7947              		.loc 1 3998 5 is_stmt 1 discriminator 2 view .LVU2731
3998:Src/ff.c      **** 			}
 7948              		.loc 1 3998 16 is_stmt 0 discriminator 2 view .LVU2732
 7949 0160 A368     		ldr	r3, [r4, #8]
3998:Src/ff.c      **** 			}
 7950              		.loc 1 3998 8 discriminator 2 view .LVU2733
 7951 0162 03B9     		cbnz	r3, .L597
3998:Src/ff.c      **** 			}
 7952              		.loc 1 3998 30 is_stmt 1 discriminator 1 view .LVU2734
3998:Src/ff.c      **** 			}
 7953              		.loc 1 3998 45 is_stmt 0 discriminator 1 view .LVU2735
 7954 0164 A060     		str	r0, [r4, #8]
 7955              	.LVL959:
 7956              	.L597:
4003:Src/ff.c      **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7957              		.loc 1 4003 4 is_stmt 1 view .LVU2736
4003:Src/ff.c      **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7958              		.loc 1 4003 8 is_stmt 0 view .LVU2737
 7959 0166 94F91030 		ldrsb	r3, [r4, #16]
4003:Src/ff.c      **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7960              		.loc 1 4003 7 view .LVU2738
 7961 016a 002B     		cmp	r3, #0
 7962 016c 80DB     		blt	.L624
 7963              	.L603:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 251


4008:Src/ff.c      **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 7964              		.loc 1 4008 4 is_stmt 1 view .LVU2739
4008:Src/ff.c      **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 7965              		.loc 1 4008 11 is_stmt 0 view .LVU2740
 7966 016e DDF80CB0 		ldr	fp, [sp, #12]
 7967 0172 A169     		ldr	r1, [r4, #24]
 7968 0174 5846     		mov	r0, fp
 7969 0176 FFF7FEFF 		bl	clst2sect
 7970              	.LVL960:
4009:Src/ff.c      **** 			sect += csect;
 7971              		.loc 1 4009 4 is_stmt 1 view .LVU2741
4009:Src/ff.c      **** 			sect += csect;
 7972              		.loc 1 4009 7 is_stmt 0 view .LVU2742
 7973 017a 8146     		mov	r9, r0
 7974 017c 0028     		cmp	r0, #0
 7975 017e 8CD0     		beq	.L625
4009:Src/ff.c      **** 			sect += csect;
 7976              		.loc 1 4009 40 is_stmt 1 discriminator 2 view .LVU2743
4010:Src/ff.c      **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 7977              		.loc 1 4010 4 discriminator 2 view .LVU2744
4010:Src/ff.c      **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 7978              		.loc 1 4010 9 is_stmt 0 discriminator 2 view .LVU2745
 7979 0180 B944     		add	r9, r9, r7
 7980              	.LVL961:
4011:Src/ff.c      **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 7981              		.loc 1 4011 4 is_stmt 1 discriminator 2 view .LVU2746
4011:Src/ff.c      **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 7982              		.loc 1 4011 7 is_stmt 0 discriminator 2 view .LVU2747
 7983 0182 4FEA552A 		lsr	r10, r5, #9
 7984              	.LVL962:
4012:Src/ff.c      **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 7985              		.loc 1 4012 4 is_stmt 1 discriminator 2 view .LVU2748
4012:Src/ff.c      **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 7986              		.loc 1 4012 7 is_stmt 0 discriminator 2 view .LVU2749
 7987 0186 B5F5007F 		cmp	r5, #512
 7988 018a A2D3     		bcc	.L606
4013:Src/ff.c      **** 					cc = fs->csize - csect;
 7989              		.loc 1 4013 5 is_stmt 1 view .LVU2750
4013:Src/ff.c      **** 					cc = fs->csize - csect;
 7990              		.loc 1 4013 15 is_stmt 0 view .LVU2751
 7991 018c 07EB0A03 		add	r3, r7, r10
4013:Src/ff.c      **** 					cc = fs->csize - csect;
 7992              		.loc 1 4013 24 view .LVU2752
 7993 0190 BBF80A20 		ldrh	r2, [fp, #10]
4013:Src/ff.c      **** 					cc = fs->csize - csect;
 7994              		.loc 1 4013 8 view .LVU2753
 7995 0194 9342     		cmp	r3, r2
 7996 0196 01D9     		bls	.L607
4014:Src/ff.c      **** 				}
 7997              		.loc 1 4014 6 is_stmt 1 view .LVU2754
4014:Src/ff.c      **** 				}
 7998              		.loc 1 4014 9 is_stmt 0 view .LVU2755
 7999 0198 A2EB070A 		sub	r10, r2, r7
 8000              	.LVL963:
 8001              	.L607:
4016:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
 8002              		.loc 1 4016 5 is_stmt 1 view .LVU2756
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 252


4016:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
 8003              		.loc 1 4016 9 is_stmt 0 view .LVU2757
 8004 019c 5346     		mov	r3, r10
 8005 019e 4A46     		mov	r2, r9
 8006 01a0 3146     		mov	r1, r6
 8007 01a2 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 8008 01a6 FFF7FEFF 		bl	disk_write
 8009              	.LVL964:
4016:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
 8010              		.loc 1 4016 8 view .LVU2758
 8011 01aa 0028     		cmp	r0, #0
 8012 01ac 3FF47CAF 		beq	.L608
4016:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
 8013              		.loc 1 4016 58 is_stmt 1 discriminator 1 view .LVU2759
 8014 01b0 4FF0010A 		mov	r10, #1
 8015              	.LVL965:
4016:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
 8016              		.loc 1 4016 58 is_stmt 0 discriminator 1 view .LVU2760
 8017 01b4 84F811A0 		strb	r10, [r4, #17]
4016:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
 8018              		.loc 1 4016 58 is_stmt 1 discriminator 1 view .LVU2761
 8019 01b8 CDF804A0 		str	r10, [sp, #4]
 8020              	.LVL966:
 8021              	.L594:
4056:Src/ff.c      **** #endif
4057:Src/ff.c      **** 	}
4058:Src/ff.c      **** 
4059:Src/ff.c      **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
4060:Src/ff.c      **** 
4061:Src/ff.c      **** 	LEAVE_FF(fs, FR_OK);
4062:Src/ff.c      **** }
 8022              		.loc 1 4062 1 is_stmt 0 view .LVU2762
 8023 01bc 0198     		ldr	r0, [sp, #4]
 8024 01be 05B0     		add	sp, sp, #20
 8025              	.LCFI57:
 8026              		.cfi_remember_state
 8027              		.cfi_def_cfa_offset 36
 8028              		@ sp needed
 8029 01c0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8030              	.LVL967:
 8031              	.L620:
 8032              	.LCFI58:
 8033              		.cfi_restore_state
4041:Src/ff.c      **** 					ABORT(fs, FR_DISK_ERR);
 8034              		.loc 1 4041 5 view .LVU2763
 8035 01c4 0123     		movs	r3, #1
 8036 01c6 4A46     		mov	r2, r9
 8037 01c8 04F12801 		add	r1, r4, #40
 8038 01cc 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 8039 01d0 FFF7FEFF 		bl	disk_read
 8040              	.LVL968:
4040:Src/ff.c      **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8041              		.loc 1 4040 32 view .LVU2764
 8042 01d4 0028     		cmp	r0, #0
 8043 01d6 83D0     		beq	.L611
4042:Src/ff.c      **** 			}
 8044              		.loc 1 4042 6 is_stmt 1 view .LVU2765
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 253


 8045 01d8 4FF0010A 		mov	r10, #1
 8046              	.LVL969:
4042:Src/ff.c      **** 			}
 8047              		.loc 1 4042 6 is_stmt 0 view .LVU2766
 8048 01dc 84F811A0 		strb	r10, [r4, #17]
4042:Src/ff.c      **** 			}
 8049              		.loc 1 4042 6 is_stmt 1 view .LVU2767
 8050 01e0 CDF804A0 		str	r10, [sp, #4]
 8051              	.LVL970:
4042:Src/ff.c      **** 			}
 8052              		.loc 1 4042 6 is_stmt 0 view .LVU2768
 8053 01e4 EAE7     		b	.L594
 8054              	.LVL971:
 8055              	.L600:
4059:Src/ff.c      **** 
 8056              		.loc 1 4059 2 is_stmt 1 view .LVU2769
4059:Src/ff.c      **** 
 8057              		.loc 1 4059 11 is_stmt 0 view .LVU2770
 8058 01e6 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 8059 01e8 43F04003 		orr	r3, r3, #64
 8060 01ec 2374     		strb	r3, [r4, #16]
4061:Src/ff.c      **** }
 8061              		.loc 1 4061 2 is_stmt 1 view .LVU2771
 8062 01ee E5E7     		b	.L594
 8063              	.LVL972:
 8064              	.L615:
3968:Src/ff.c      **** 
 8065              		.loc 1 3968 30 is_stmt 0 view .LVU2772
 8066 01f0 0723     		movs	r3, #7
 8067 01f2 0193     		str	r3, [sp, #4]
 8068              	.LVL973:
3968:Src/ff.c      **** 
 8069              		.loc 1 3968 30 view .LVU2773
 8070 01f4 E2E7     		b	.L594
 8071              		.cfi_endproc
 8072              	.LFE42:
 8074              		.section	.text.f_sync,"ax",%progbits
 8075              		.align	1
 8076              		.global	f_sync
 8077              		.syntax unified
 8078              		.thumb
 8079              		.thumb_func
 8080              		.fpu softvfp
 8082              	f_sync:
 8083              	.LVL974:
 8084              	.LFB43:
4063:Src/ff.c      **** 
4064:Src/ff.c      **** 
4065:Src/ff.c      **** 
4066:Src/ff.c      **** 
4067:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4068:Src/ff.c      **** /* Synchronize the File                                                  */
4069:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4070:Src/ff.c      **** 
4071:Src/ff.c      **** FRESULT f_sync (
4072:Src/ff.c      **** 	FIL* fp		/* Open file to be synced */
4073:Src/ff.c      **** )
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 254


4074:Src/ff.c      **** {
 8085              		.loc 1 4074 1 is_stmt 1 view -0
 8086              		.cfi_startproc
 8087              		@ args = 0, pretend = 0, frame = 8
 8088              		@ frame_needed = 0, uses_anonymous_args = 0
 8089              		.loc 1 4074 1 is_stmt 0 view .LVU2775
 8090 0000 30B5     		push	{r4, r5, lr}
 8091              	.LCFI59:
 8092              		.cfi_def_cfa_offset 12
 8093              		.cfi_offset 4, -12
 8094              		.cfi_offset 5, -8
 8095              		.cfi_offset 14, -4
 8096 0002 83B0     		sub	sp, sp, #12
 8097              	.LCFI60:
 8098              		.cfi_def_cfa_offset 24
 8099 0004 0446     		mov	r4, r0
4075:Src/ff.c      **** 	FRESULT res;
 8100              		.loc 1 4075 2 is_stmt 1 view .LVU2776
4076:Src/ff.c      **** 	FATFS *fs;
 8101              		.loc 1 4076 2 view .LVU2777
4077:Src/ff.c      **** 	DWORD tm;
 8102              		.loc 1 4077 2 view .LVU2778
4078:Src/ff.c      **** 	BYTE *dir;
 8103              		.loc 1 4078 2 view .LVU2779
4079:Src/ff.c      **** 
4080:Src/ff.c      **** 
4081:Src/ff.c      **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8104              		.loc 1 4081 2 view .LVU2780
 8105              		.loc 1 4081 8 is_stmt 0 view .LVU2781
 8106 0006 01A9     		add	r1, sp, #4
 8107 0008 FFF7FEFF 		bl	validate
 8108              	.LVL975:
4082:Src/ff.c      **** 	if (res == FR_OK) {
 8109              		.loc 1 4082 2 is_stmt 1 view .LVU2782
 8110              		.loc 1 4082 5 is_stmt 0 view .LVU2783
 8111 000c 58B9     		cbnz	r0, .L627
4083:Src/ff.c      **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8112              		.loc 1 4083 3 is_stmt 1 view .LVU2784
 8113              		.loc 1 4083 9 is_stmt 0 view .LVU2785
 8114 000e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 8115              		.loc 1 4083 6 view .LVU2786
 8116 0010 13F0400F 		tst	r3, #64
 8117 0014 07D0     		beq	.L627
4084:Src/ff.c      **** #if !FF_FS_TINY
4085:Src/ff.c      **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8118              		.loc 1 4085 4 is_stmt 1 view .LVU2787
 8119              		.loc 1 4085 7 is_stmt 0 view .LVU2788
 8120 0016 13F0800F 		tst	r3, #128
 8121 001a 06D1     		bne	.L631
 8122              	.L628:
4086:Src/ff.c      **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
4087:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
4088:Src/ff.c      **** 			}
4089:Src/ff.c      **** #endif
4090:Src/ff.c      **** 			/* Update the directory entry */
4091:Src/ff.c      **** 			tm = GET_FATTIME();				/* Modified time */
 8123              		.loc 1 4091 4 is_stmt 1 view .LVU2789
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 255


 8124              	.LVL976:
4092:Src/ff.c      **** #if FF_FS_EXFAT
4093:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {
4094:Src/ff.c      **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
4095:Src/ff.c      **** 				if (res == FR_OK) {
4096:Src/ff.c      **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
4097:Src/ff.c      **** 				}
4098:Src/ff.c      **** 				if (res == FR_OK) {
4099:Src/ff.c      **** 					DIR dj;
4100:Src/ff.c      **** 					DEF_NAMBUF
4101:Src/ff.c      **** 
4102:Src/ff.c      **** 					INIT_NAMBUF(fs);
4103:Src/ff.c      **** 					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
4104:Src/ff.c      **** 					if (res == FR_OK) {
4105:Src/ff.c      **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has be
4106:Src/ff.c      **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
4107:Src/ff.c      **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
4108:Src/ff.c      **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
4109:Src/ff.c      **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid 
4110:Src/ff.c      **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
4111:Src/ff.c      **** 						fs->dirbuf[XDIR_ModTime10] = 0;
4112:Src/ff.c      **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
4113:Src/ff.c      **** 						res = store_xdir(&dj);	/* Restore it to the directory */
4114:Src/ff.c      **** 						if (res == FR_OK) {
4115:Src/ff.c      **** 							res = sync_fs(fs);
4116:Src/ff.c      **** 							fp->flag &= (BYTE)~FA_MODIFIED;
4117:Src/ff.c      **** 						}
4118:Src/ff.c      **** 					}
4119:Src/ff.c      **** 					FREE_NAMBUF();
4120:Src/ff.c      **** 				}
4121:Src/ff.c      **** 			} else
4122:Src/ff.c      **** #endif
4123:Src/ff.c      **** 			{
4124:Src/ff.c      **** 				res = move_window(fs, fp->dir_sect);
 8125              		.loc 1 4124 5 view .LVU2790
 8126              		.loc 1 4124 11 is_stmt 0 view .LVU2791
 8127 001c 216A     		ldr	r1, [r4, #32]
 8128 001e 0198     		ldr	r0, [sp, #4]
 8129 0020 FFF7FEFF 		bl	move_window
 8130              	.LVL977:
4125:Src/ff.c      **** 				if (res == FR_OK) {
 8131              		.loc 1 4125 5 is_stmt 1 view .LVU2792
 8132              		.loc 1 4125 8 is_stmt 0 view .LVU2793
 8133 0024 78B1     		cbz	r0, .L632
 8134              	.LVL978:
 8135              	.L627:
4126:Src/ff.c      **** 					dir = fp->dir_ptr;
4127:Src/ff.c      **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
4128:Src/ff.c      **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
4129:Src/ff.c      **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
4130:Src/ff.c      **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
4131:Src/ff.c      **** 					st_word(dir + DIR_LstAccDate, 0);
4132:Src/ff.c      **** 					fs->wflag = 1;
4133:Src/ff.c      **** 					res = sync_fs(fs);					/* Restore it to the directory */
4134:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_MODIFIED;
4135:Src/ff.c      **** 				}
4136:Src/ff.c      **** 			}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 256


4137:Src/ff.c      **** 		}
4138:Src/ff.c      **** 	}
4139:Src/ff.c      **** 
4140:Src/ff.c      **** 	LEAVE_FF(fs, res);
4141:Src/ff.c      **** }
 8136              		.loc 1 4141 1 view .LVU2794
 8137 0026 03B0     		add	sp, sp, #12
 8138              	.LCFI61:
 8139              		.cfi_remember_state
 8140              		.cfi_def_cfa_offset 12
 8141              		@ sp needed
 8142 0028 30BD     		pop	{r4, r5, pc}
 8143              	.LVL979:
 8144              	.L631:
 8145              	.LCFI62:
 8146              		.cfi_restore_state
4086:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8147              		.loc 1 4086 5 is_stmt 1 view .LVU2795
4086:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8148              		.loc 1 4086 9 is_stmt 0 view .LVU2796
 8149 002a 0123     		movs	r3, #1
 8150 002c E269     		ldr	r2, [r4, #28]
 8151 002e 04F12801 		add	r1, r4, #40
 8152 0032 0198     		ldr	r0, [sp, #4]
 8153 0034 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 8154 0036 FFF7FEFF 		bl	disk_write
 8155              	.LVL980:
4086:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8156              		.loc 1 4086 8 view .LVU2797
 8157 003a 40BB     		cbnz	r0, .L629
4087:Src/ff.c      **** 			}
 8158              		.loc 1 4087 5 is_stmt 1 view .LVU2798
4087:Src/ff.c      **** 			}
 8159              		.loc 1 4087 14 is_stmt 0 view .LVU2799
 8160 003c 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 8161 003e 03F07F03 		and	r3, r3, #127
 8162 0042 2374     		strb	r3, [r4, #16]
 8163 0044 EAE7     		b	.L628
 8164              	.LVL981:
 8165              	.L632:
4126:Src/ff.c      **** 					dir = fp->dir_ptr;
 8166              		.loc 1 4126 6 is_stmt 1 view .LVU2800
4126:Src/ff.c      **** 					dir = fp->dir_ptr;
 8167              		.loc 1 4126 10 is_stmt 0 view .LVU2801
 8168 0046 656A     		ldr	r5, [r4, #36]
 8169              	.LVL982:
4127:Src/ff.c      **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8170              		.loc 1 4127 6 is_stmt 1 view .LVU2802
4127:Src/ff.c      **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8171              		.loc 1 4127 20 is_stmt 0 view .LVU2803
 8172 0048 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 8173 004a 43F02003 		orr	r3, r3, #32
 8174 004e EB72     		strb	r3, [r5, #11]
4128:Src/ff.c      **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8175              		.loc 1 4128 6 is_stmt 1 view .LVU2804
 8176 0050 A268     		ldr	r2, [r4, #8]
 8177 0052 2946     		mov	r1, r5
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 257


 8178 0054 2068     		ldr	r0, [r4]
 8179              	.LVL983:
4128:Src/ff.c      **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8180              		.loc 1 4128 6 is_stmt 0 view .LVU2805
 8181 0056 FFF7FEFF 		bl	st_clust
 8182              	.LVL984:
4129:Src/ff.c      **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8183              		.loc 1 4129 6 is_stmt 1 view .LVU2806
 8184 005a E168     		ldr	r1, [r4, #12]
 8185 005c 05F11C00 		add	r0, r5, #28
 8186 0060 FFF7FEFF 		bl	st_dword
 8187              	.LVL985:
4130:Src/ff.c      **** 					st_word(dir + DIR_LstAccDate, 0);
 8188              		.loc 1 4130 6 view .LVU2807
 8189 0064 0B49     		ldr	r1, .L633
 8190 0066 05F11600 		add	r0, r5, #22
 8191 006a FFF7FEFF 		bl	st_dword
 8192              	.LVL986:
4131:Src/ff.c      **** 					fs->wflag = 1;
 8193              		.loc 1 4131 6 view .LVU2808
 8194 006e 0021     		movs	r1, #0
 8195 0070 05F11200 		add	r0, r5, #18
 8196 0074 FFF7FEFF 		bl	st_word
 8197              	.LVL987:
4132:Src/ff.c      **** 					res = sync_fs(fs);					/* Restore it to the directory */
 8198              		.loc 1 4132 6 view .LVU2809
4132:Src/ff.c      **** 					res = sync_fs(fs);					/* Restore it to the directory */
 8199              		.loc 1 4132 16 is_stmt 0 view .LVU2810
 8200 0078 019B     		ldr	r3, [sp, #4]
 8201 007a 0122     		movs	r2, #1
 8202 007c DA70     		strb	r2, [r3, #3]
4133:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 8203              		.loc 1 4133 6 is_stmt 1 view .LVU2811
4133:Src/ff.c      **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 8204              		.loc 1 4133 12 is_stmt 0 view .LVU2812
 8205 007e 0198     		ldr	r0, [sp, #4]
 8206 0080 FFF7FEFF 		bl	sync_fs
 8207              	.LVL988:
4134:Src/ff.c      **** 				}
 8208              		.loc 1 4134 6 is_stmt 1 view .LVU2813
4134:Src/ff.c      **** 				}
 8209              		.loc 1 4134 15 is_stmt 0 view .LVU2814
 8210 0084 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 8211 0086 23F04003 		bic	r3, r3, #64
 8212 008a 2374     		strb	r3, [r4, #16]
 8213 008c CBE7     		b	.L627
 8214              	.LVL989:
 8215              	.L629:
4086:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8216              		.loc 1 4086 63 view .LVU2815
 8217 008e 0120     		movs	r0, #1
 8218 0090 C9E7     		b	.L627
 8219              	.L634:
 8220 0092 00BF     		.align	2
 8221              	.L633:
 8222 0094 00002150 		.word	1344339968
 8223              		.cfi_endproc
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 258


 8224              	.LFE43:
 8226              		.section	.text.f_close,"ax",%progbits
 8227              		.align	1
 8228              		.global	f_close
 8229              		.syntax unified
 8230              		.thumb
 8231              		.thumb_func
 8232              		.fpu softvfp
 8234              	f_close:
 8235              	.LVL990:
 8236              	.LFB44:
4142:Src/ff.c      **** 
4143:Src/ff.c      **** #endif /* !FF_FS_READONLY */
4144:Src/ff.c      **** 
4145:Src/ff.c      **** 
4146:Src/ff.c      **** 
4147:Src/ff.c      **** 
4148:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4149:Src/ff.c      **** /* Close File                                                            */
4150:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4151:Src/ff.c      **** 
4152:Src/ff.c      **** FRESULT f_close (
4153:Src/ff.c      **** 	FIL* fp		/* Open file to be closed */
4154:Src/ff.c      **** )
4155:Src/ff.c      **** {
 8237              		.loc 1 4155 1 is_stmt 1 view -0
 8238              		.cfi_startproc
 8239              		@ args = 0, pretend = 0, frame = 8
 8240              		@ frame_needed = 0, uses_anonymous_args = 0
 8241              		.loc 1 4155 1 is_stmt 0 view .LVU2817
 8242 0000 10B5     		push	{r4, lr}
 8243              	.LCFI63:
 8244              		.cfi_def_cfa_offset 8
 8245              		.cfi_offset 4, -8
 8246              		.cfi_offset 14, -4
 8247 0002 82B0     		sub	sp, sp, #8
 8248              	.LCFI64:
 8249              		.cfi_def_cfa_offset 16
 8250 0004 0446     		mov	r4, r0
4156:Src/ff.c      **** 	FRESULT res;
 8251              		.loc 1 4156 2 is_stmt 1 view .LVU2818
4157:Src/ff.c      **** 	FATFS *fs;
 8252              		.loc 1 4157 2 view .LVU2819
4158:Src/ff.c      **** 
4159:Src/ff.c      **** #if !FF_FS_READONLY
4160:Src/ff.c      **** 	res = f_sync(fp);					/* Flush cached data */
 8253              		.loc 1 4160 2 view .LVU2820
 8254              		.loc 1 4160 8 is_stmt 0 view .LVU2821
 8255 0006 FFF7FEFF 		bl	f_sync
 8256              	.LVL991:
4161:Src/ff.c      **** 	if (res == FR_OK)
 8257              		.loc 1 4161 2 is_stmt 1 view .LVU2822
 8258              		.loc 1 4161 5 is_stmt 0 view .LVU2823
 8259 000a 08B1     		cbz	r0, .L638
 8260              	.L636:
 8261              	.LVL992:
4162:Src/ff.c      **** #endif
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 259


4163:Src/ff.c      **** 	{
4164:Src/ff.c      **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
4165:Src/ff.c      **** 		if (res == FR_OK) {
4166:Src/ff.c      **** #if FF_FS_LOCK != 0
4167:Src/ff.c      **** 			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
4168:Src/ff.c      **** 			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
4169:Src/ff.c      **** #else
4170:Src/ff.c      **** 			fp->obj.fs = 0;	/* Invalidate file object */
4171:Src/ff.c      **** #endif
4172:Src/ff.c      **** #if FF_FS_REENTRANT
4173:Src/ff.c      **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
4174:Src/ff.c      **** #endif
4175:Src/ff.c      **** 		}
4176:Src/ff.c      **** 	}
4177:Src/ff.c      **** 	return res;
 8262              		.loc 1 4177 2 is_stmt 1 view .LVU2824
4178:Src/ff.c      **** }
 8263              		.loc 1 4178 1 is_stmt 0 view .LVU2825
 8264 000c 02B0     		add	sp, sp, #8
 8265              	.LCFI65:
 8266              		.cfi_remember_state
 8267              		.cfi_def_cfa_offset 8
 8268              		@ sp needed
 8269 000e 10BD     		pop	{r4, pc}
 8270              	.LVL993:
 8271              	.L638:
 8272              	.LCFI66:
 8273              		.cfi_restore_state
4164:Src/ff.c      **** 		if (res == FR_OK) {
 8274              		.loc 1 4164 3 is_stmt 1 view .LVU2826
4164:Src/ff.c      **** 		if (res == FR_OK) {
 8275              		.loc 1 4164 9 is_stmt 0 view .LVU2827
 8276 0010 01A9     		add	r1, sp, #4
 8277 0012 2046     		mov	r0, r4
 8278 0014 FFF7FEFF 		bl	validate
 8279              	.LVL994:
4165:Src/ff.c      **** #if FF_FS_LOCK != 0
 8280              		.loc 1 4165 3 is_stmt 1 view .LVU2828
4165:Src/ff.c      **** #if FF_FS_LOCK != 0
 8281              		.loc 1 4165 6 is_stmt 0 view .LVU2829
 8282 0018 0028     		cmp	r0, #0
 8283 001a F7D1     		bne	.L636
4170:Src/ff.c      **** #endif
 8284              		.loc 1 4170 4 is_stmt 1 view .LVU2830
4170:Src/ff.c      **** #endif
 8285              		.loc 1 4170 15 is_stmt 0 view .LVU2831
 8286 001c 2060     		str	r0, [r4]
 8287 001e F5E7     		b	.L636
 8288              		.cfi_endproc
 8289              	.LFE44:
 8291              		.section	.text.f_lseek,"ax",%progbits
 8292              		.align	1
 8293              		.global	f_lseek
 8294              		.syntax unified
 8295              		.thumb
 8296              		.thumb_func
 8297              		.fpu softvfp
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 260


 8299              	f_lseek:
 8300              	.LVL995:
 8301              	.LFB45:
4179:Src/ff.c      **** 
4180:Src/ff.c      **** 
4181:Src/ff.c      **** 
4182:Src/ff.c      **** 
4183:Src/ff.c      **** #if FF_FS_RPATH >= 1
4184:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4185:Src/ff.c      **** /* Change Current Directory or Current Drive, Get Current Directory      */
4186:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4187:Src/ff.c      **** 
4188:Src/ff.c      **** FRESULT f_chdrive (
4189:Src/ff.c      **** 	const TCHAR* path		/* Drive number to set */
4190:Src/ff.c      **** )
4191:Src/ff.c      **** {
4192:Src/ff.c      **** 	int vol;
4193:Src/ff.c      **** 
4194:Src/ff.c      **** 
4195:Src/ff.c      **** 	/* Get logical drive number */
4196:Src/ff.c      **** 	vol = get_ldnumber(&path);
4197:Src/ff.c      **** 	if (vol < 0) return FR_INVALID_DRIVE;
4198:Src/ff.c      **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
4199:Src/ff.c      **** 
4200:Src/ff.c      **** 	return FR_OK;
4201:Src/ff.c      **** }
4202:Src/ff.c      **** 
4203:Src/ff.c      **** 
4204:Src/ff.c      **** 
4205:Src/ff.c      **** FRESULT f_chdir (
4206:Src/ff.c      **** 	const TCHAR* path	/* Pointer to the directory path */
4207:Src/ff.c      **** )
4208:Src/ff.c      **** {
4209:Src/ff.c      **** #if FF_STR_VOLUME_ID == 2
4210:Src/ff.c      **** 	UINT i;
4211:Src/ff.c      **** #endif
4212:Src/ff.c      **** 	FRESULT res;
4213:Src/ff.c      **** 	DIR dj;
4214:Src/ff.c      **** 	FATFS *fs;
4215:Src/ff.c      **** 	DEF_NAMBUF
4216:Src/ff.c      **** 
4217:Src/ff.c      **** 
4218:Src/ff.c      **** 	/* Get logical drive */
4219:Src/ff.c      **** 	res = mount_volume(&path, &fs, 0);
4220:Src/ff.c      **** 	if (res == FR_OK) {
4221:Src/ff.c      **** 		dj.obj.fs = fs;
4222:Src/ff.c      **** 		INIT_NAMBUF(fs);
4223:Src/ff.c      **** 		res = follow_path(&dj, path);		/* Follow the path */
4224:Src/ff.c      **** 		if (res == FR_OK) {					/* Follow completed */
4225:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
4226:Src/ff.c      **** 				fs->cdir = dj.obj.sclust;
4227:Src/ff.c      **** #if FF_FS_EXFAT
4228:Src/ff.c      **** 				if (fs->fs_type == FS_EXFAT) {
4229:Src/ff.c      **** 					fs->cdc_scl = dj.obj.c_scl;
4230:Src/ff.c      **** 					fs->cdc_size = dj.obj.c_size;
4231:Src/ff.c      **** 					fs->cdc_ofs = dj.obj.c_ofs;
4232:Src/ff.c      **** 				}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 261


4233:Src/ff.c      **** #endif
4234:Src/ff.c      **** 			} else {
4235:Src/ff.c      **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
4236:Src/ff.c      **** #if FF_FS_EXFAT
4237:Src/ff.c      **** 					if (fs->fs_type == FS_EXFAT) {
4238:Src/ff.c      **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
4239:Src/ff.c      **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
4240:Src/ff.c      **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
4241:Src/ff.c      **** 						fs->cdc_ofs = dj.blk_ofs;
4242:Src/ff.c      **** 					} else
4243:Src/ff.c      **** #endif
4244:Src/ff.c      **** 					{
4245:Src/ff.c      **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
4246:Src/ff.c      **** 					}
4247:Src/ff.c      **** 				} else {
4248:Src/ff.c      **** 					res = FR_NO_PATH;		/* Reached but a file */
4249:Src/ff.c      **** 				}
4250:Src/ff.c      **** 			}
4251:Src/ff.c      **** 		}
4252:Src/ff.c      **** 		FREE_NAMBUF();
4253:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4254:Src/ff.c      **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed if in Unix style volume ID */
4255:Src/ff.c      **** 		if (res == FR_OK) {
4256:Src/ff.c      **** 			for (i = FF_VOLUMES - 1; i && fs != FatFs[i]; i--) ;	/* Set current drive */
4257:Src/ff.c      **** 			CurrVol = (BYTE)i;
4258:Src/ff.c      **** 		}
4259:Src/ff.c      **** #endif
4260:Src/ff.c      **** 	}
4261:Src/ff.c      **** 
4262:Src/ff.c      **** 	LEAVE_FF(fs, res);
4263:Src/ff.c      **** }
4264:Src/ff.c      **** 
4265:Src/ff.c      **** 
4266:Src/ff.c      **** #if FF_FS_RPATH >= 2
4267:Src/ff.c      **** FRESULT f_getcwd (
4268:Src/ff.c      **** 	TCHAR* buff,	/* Pointer to the directory path */
4269:Src/ff.c      **** 	UINT len		/* Size of buff in unit of TCHAR */
4270:Src/ff.c      **** )
4271:Src/ff.c      **** {
4272:Src/ff.c      **** 	FRESULT res;
4273:Src/ff.c      **** 	DIR dj;
4274:Src/ff.c      **** 	FATFS *fs;
4275:Src/ff.c      **** 	UINT i, n;
4276:Src/ff.c      **** 	DWORD ccl;
4277:Src/ff.c      **** 	TCHAR *tp = buff;
4278:Src/ff.c      **** #if FF_VOLUMES >= 2
4279:Src/ff.c      **** 	UINT vl;
4280:Src/ff.c      **** #if FF_STR_VOLUME_ID
4281:Src/ff.c      **** 	const char *vp;
4282:Src/ff.c      **** #endif
4283:Src/ff.c      **** #endif
4284:Src/ff.c      **** 	FILINFO fno;
4285:Src/ff.c      **** 	DEF_NAMBUF
4286:Src/ff.c      **** 
4287:Src/ff.c      **** 
4288:Src/ff.c      **** 	/* Get logical drive */
4289:Src/ff.c      **** 	buff[0] = 0;	/* Set null string to get current volume */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 262


4290:Src/ff.c      **** 	res = mount_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
4291:Src/ff.c      **** 	if (res == FR_OK) {
4292:Src/ff.c      **** 		dj.obj.fs = fs;
4293:Src/ff.c      **** 		INIT_NAMBUF(fs);
4294:Src/ff.c      **** 
4295:Src/ff.c      **** 		/* Follow parent directories and create the path */
4296:Src/ff.c      **** 		i = len;			/* Bottom of buffer (directory stack base) */
4297:Src/ff.c      **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root pat
4298:Src/ff.c      **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
4299:Src/ff.c      **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
4300:Src/ff.c      **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
4301:Src/ff.c      **** 				if (res != FR_OK) break;
4302:Src/ff.c      **** 				res = move_window(fs, dj.sect);
4303:Src/ff.c      **** 				if (res != FR_OK) break;
4304:Src/ff.c      **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
4305:Src/ff.c      **** 				res = dir_sdi(&dj, 0);
4306:Src/ff.c      **** 				if (res != FR_OK) break;
4307:Src/ff.c      **** 				do {							/* Find the entry links to the child directory */
4308:Src/ff.c      **** 					res = DIR_READ_FILE(&dj);
4309:Src/ff.c      **** 					if (res != FR_OK) break;
4310:Src/ff.c      **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
4311:Src/ff.c      **** 					res = dir_next(&dj, 0);
4312:Src/ff.c      **** 				} while (res == FR_OK);
4313:Src/ff.c      **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
4314:Src/ff.c      **** 				if (res != FR_OK) break;
4315:Src/ff.c      **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
4316:Src/ff.c      **** 				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
4317:Src/ff.c      **** 				if (i < n + 1) {	/* Insufficient space to store the path name? */
4318:Src/ff.c      **** 					res = FR_NOT_ENOUGH_CORE; break;
4319:Src/ff.c      **** 				}
4320:Src/ff.c      **** 				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
4321:Src/ff.c      **** 				buff[--i] = '/';
4322:Src/ff.c      **** 			}
4323:Src/ff.c      **** 		}
4324:Src/ff.c      **** 		if (res == FR_OK) {
4325:Src/ff.c      **** 			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
4326:Src/ff.c      **** #if FF_VOLUMES >= 2			/* Put drive prefix */
4327:Src/ff.c      **** 			vl = 0;
4328:Src/ff.c      **** #if FF_STR_VOLUME_ID >= 1	/* String volume ID */
4329:Src/ff.c      **** 			for (n = 0, vp = (const char*)VolumeStr[CurrVol]; vp[n]; n++) ;
4330:Src/ff.c      **** 			if (i >= n + 2) {
4331:Src/ff.c      **** 				if (FF_STR_VOLUME_ID == 2) *tp++ = (TCHAR)'/';
4332:Src/ff.c      **** 				for (vl = 0; vl < n; *tp++ = (TCHAR)vp[vl], vl++) ;
4333:Src/ff.c      **** 				if (FF_STR_VOLUME_ID == 1) *tp++ = (TCHAR)':';
4334:Src/ff.c      **** 				vl++;
4335:Src/ff.c      **** 			}
4336:Src/ff.c      **** #else						/* Numeric volume ID */
4337:Src/ff.c      **** 			if (i >= 3) {
4338:Src/ff.c      **** 				*tp++ = (TCHAR)'0' + CurrVol;
4339:Src/ff.c      **** 				*tp++ = (TCHAR)':';
4340:Src/ff.c      **** 				vl = 2;
4341:Src/ff.c      **** 			}
4342:Src/ff.c      **** #endif
4343:Src/ff.c      **** 			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
4344:Src/ff.c      **** #endif
4345:Src/ff.c      **** 			/* Add current directory path */
4346:Src/ff.c      **** 			if (res == FR_OK) {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 263


4347:Src/ff.c      **** 				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
4348:Src/ff.c      **** 			}
4349:Src/ff.c      **** 		}
4350:Src/ff.c      **** 		FREE_NAMBUF();
4351:Src/ff.c      **** 	}
4352:Src/ff.c      **** 
4353:Src/ff.c      **** 	*tp = 0;
4354:Src/ff.c      **** 	LEAVE_FF(fs, res);
4355:Src/ff.c      **** }
4356:Src/ff.c      **** 
4357:Src/ff.c      **** #endif /* FF_FS_RPATH >= 2 */
4358:Src/ff.c      **** #endif /* FF_FS_RPATH >= 1 */
4359:Src/ff.c      **** 
4360:Src/ff.c      **** 
4361:Src/ff.c      **** 
4362:Src/ff.c      **** #if FF_FS_MINIMIZE <= 2
4363:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4364:Src/ff.c      **** /* Seek File Read/Write Pointer                                          */
4365:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4366:Src/ff.c      **** 
4367:Src/ff.c      **** FRESULT f_lseek (
4368:Src/ff.c      **** 	FIL* fp,		/* Pointer to the file object */
4369:Src/ff.c      **** 	FSIZE_t ofs		/* File pointer from top of file */
4370:Src/ff.c      **** )
4371:Src/ff.c      **** {
 8302              		.loc 1 4371 1 is_stmt 1 view -0
 8303              		.cfi_startproc
 8304              		@ args = 0, pretend = 0, frame = 8
 8305              		@ frame_needed = 0, uses_anonymous_args = 0
 8306              		.loc 1 4371 1 is_stmt 0 view .LVU2833
 8307 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8308              	.LCFI67:
 8309              		.cfi_def_cfa_offset 24
 8310              		.cfi_offset 4, -24
 8311              		.cfi_offset 5, -20
 8312              		.cfi_offset 6, -16
 8313              		.cfi_offset 7, -12
 8314              		.cfi_offset 8, -8
 8315              		.cfi_offset 14, -4
 8316 0004 82B0     		sub	sp, sp, #8
 8317              	.LCFI68:
 8318              		.cfi_def_cfa_offset 32
 8319 0006 0446     		mov	r4, r0
 8320 0008 0D46     		mov	r5, r1
4372:Src/ff.c      **** 	FRESULT res;
 8321              		.loc 1 4372 2 is_stmt 1 view .LVU2834
4373:Src/ff.c      **** 	FATFS *fs;
 8322              		.loc 1 4373 2 view .LVU2835
4374:Src/ff.c      **** 	DWORD clst, bcs;
 8323              		.loc 1 4374 2 view .LVU2836
4375:Src/ff.c      **** 	LBA_t nsect;
 8324              		.loc 1 4375 2 view .LVU2837
4376:Src/ff.c      **** 	FSIZE_t ifptr;
 8325              		.loc 1 4376 2 view .LVU2838
4377:Src/ff.c      **** #if FF_USE_FASTSEEK
4378:Src/ff.c      **** 	DWORD cl, pcl, ncl, tcl, tlen, ulen;
4379:Src/ff.c      **** 	DWORD *tbl;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 264


4380:Src/ff.c      **** 	LBA_t dsc;
4381:Src/ff.c      **** #endif
4382:Src/ff.c      **** 
4383:Src/ff.c      **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8326              		.loc 1 4383 2 view .LVU2839
 8327              		.loc 1 4383 8 is_stmt 0 view .LVU2840
 8328 000a 01A9     		add	r1, sp, #4
 8329              	.LVL996:
 8330              		.loc 1 4383 8 view .LVU2841
 8331 000c FFF7FEFF 		bl	validate
 8332              	.LVL997:
4384:Src/ff.c      **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 8333              		.loc 1 4384 2 is_stmt 1 view .LVU2842
 8334              		.loc 1 4384 5 is_stmt 0 view .LVU2843
 8335 0010 8046     		mov	r8, r0
 8336 0012 08B9     		cbnz	r0, .L640
 8337              		.loc 1 4384 20 is_stmt 1 discriminator 1 view .LVU2844
 8338              		.loc 1 4384 24 is_stmt 0 discriminator 1 view .LVU2845
 8339 0014 94F81180 		ldrb	r8, [r4, #17]	@ zero_extendqisi2
 8340              	.LVL998:
 8341              	.L640:
4385:Src/ff.c      **** #if FF_FS_EXFAT && !FF_FS_READONLY
4386:Src/ff.c      **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4387:Src/ff.c      **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4388:Src/ff.c      **** 	}
4389:Src/ff.c      **** #endif
4390:Src/ff.c      **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 8342              		.loc 1 4390 2 is_stmt 1 view .LVU2846
 8343              		.loc 1 4390 5 is_stmt 0 view .LVU2847
 8344 0018 B8F1000F 		cmp	r8, #0
 8345 001c 42D1     		bne	.L641
4391:Src/ff.c      **** 
4392:Src/ff.c      **** #if FF_USE_FASTSEEK
4393:Src/ff.c      **** 	if (fp->cltbl) {	/* Fast seek */
4394:Src/ff.c      **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4395:Src/ff.c      **** 			tbl = fp->cltbl;
4396:Src/ff.c      **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4397:Src/ff.c      **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4398:Src/ff.c      **** 			if (cl != 0) {
4399:Src/ff.c      **** 				do {
4400:Src/ff.c      **** 					/* Get a fragment */
4401:Src/ff.c      **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4402:Src/ff.c      **** 					do {
4403:Src/ff.c      **** 						pcl = cl; ncl++;
4404:Src/ff.c      **** 						cl = get_fat(&fp->obj, cl);
4405:Src/ff.c      **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4406:Src/ff.c      **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4407:Src/ff.c      **** 					} while (cl == pcl + 1);
4408:Src/ff.c      **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4409:Src/ff.c      **** 						*tbl++ = ncl; *tbl++ = tcl;
4410:Src/ff.c      **** 					}
4411:Src/ff.c      **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4412:Src/ff.c      **** 			}
4413:Src/ff.c      **** 			*fp->cltbl = ulen;	/* Number of items used */
4414:Src/ff.c      **** 			if (ulen <= tlen) {
4415:Src/ff.c      **** 				*tbl = 0;		/* Terminate table */
4416:Src/ff.c      **** 			} else {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 265


4417:Src/ff.c      **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4418:Src/ff.c      **** 			}
4419:Src/ff.c      **** 		} else {						/* Fast seek */
4420:Src/ff.c      **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4421:Src/ff.c      **** 			fp->fptr = ofs;				/* Set file pointer */
4422:Src/ff.c      **** 			if (ofs > 0) {
4423:Src/ff.c      **** 				fp->clust = clmt_clust(fp, ofs - 1);
4424:Src/ff.c      **** 				dsc = clst2sect(fs, fp->clust);
4425:Src/ff.c      **** 				if (dsc == 0) ABORT(fs, FR_INT_ERR);
4426:Src/ff.c      **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4427:Src/ff.c      **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4428:Src/ff.c      **** #if !FF_FS_TINY
4429:Src/ff.c      **** #if !FF_FS_READONLY
4430:Src/ff.c      **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4431:Src/ff.c      **** 						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4432:Src/ff.c      **** 						fp->flag &= (BYTE)~FA_DIRTY;
4433:Src/ff.c      **** 					}
4434:Src/ff.c      **** #endif
4435:Src/ff.c      **** 					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current se
4436:Src/ff.c      **** #endif
4437:Src/ff.c      **** 					fp->sect = dsc;
4438:Src/ff.c      **** 				}
4439:Src/ff.c      **** 			}
4440:Src/ff.c      **** 		}
4441:Src/ff.c      **** 	} else
4442:Src/ff.c      **** #endif
4443:Src/ff.c      **** 
4444:Src/ff.c      **** 	/* Normal Seek */
4445:Src/ff.c      **** 	{
4446:Src/ff.c      **** #if FF_FS_EXFAT
4447:Src/ff.c      **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at F
4448:Src/ff.c      **** #endif
4449:Src/ff.c      **** 		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, 
 8346              		.loc 1 4449 3 is_stmt 1 view .LVU2848
 8347              		.loc 1 4449 20 is_stmt 0 view .LVU2849
 8348 001e E368     		ldr	r3, [r4, #12]
 8349              		.loc 1 4449 6 view .LVU2850
 8350 0020 AB42     		cmp	r3, r5
 8351 0022 04D2     		bcs	.L642
 8352              		.loc 1 4449 55 discriminator 1 view .LVU2851
 8353 0024 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 8354              		.loc 1 4449 29 discriminator 1 view .LVU2852
 8355 0026 12F0020F 		tst	r2, #2
 8356 002a 00D1     		bne	.L642
4450:Src/ff.c      **** 			ofs = fp->obj.objsize;
 8357              		.loc 1 4450 8 view .LVU2853
 8358 002c 1D46     		mov	r5, r3
 8359              	.LVL999:
 8360              	.L642:
4451:Src/ff.c      **** 		}
4452:Src/ff.c      **** 		ifptr = fp->fptr;
 8361              		.loc 1 4452 3 is_stmt 1 view .LVU2854
 8362              		.loc 1 4452 9 is_stmt 0 view .LVU2855
 8363 002e 6669     		ldr	r6, [r4, #20]
 8364              	.LVL1000:
4453:Src/ff.c      **** 		fp->fptr = nsect = 0;
 8365              		.loc 1 4453 3 is_stmt 1 view .LVU2856
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 266


 8366              		.loc 1 4453 12 is_stmt 0 view .LVU2857
 8367 0030 0023     		movs	r3, #0
 8368 0032 6361     		str	r3, [r4, #20]
4454:Src/ff.c      **** 		if (ofs > 0) {
 8369              		.loc 1 4454 3 is_stmt 1 view .LVU2858
 8370              		.loc 1 4454 6 is_stmt 0 view .LVU2859
 8371 0034 C5B1     		cbz	r5, .L643
4455:Src/ff.c      **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8372              		.loc 1 4455 4 is_stmt 1 view .LVU2860
 8373              		.loc 1 4455 19 is_stmt 0 view .LVU2861
 8374 0036 019B     		ldr	r3, [sp, #4]
 8375 0038 5F89     		ldrh	r7, [r3, #10]
 8376              		.loc 1 4455 8 view .LVU2862
 8377 003a 7F02     		lsls	r7, r7, #9
 8378              	.LVL1001:
4456:Src/ff.c      **** 			if (ifptr > 0 &&
 8379              		.loc 1 4456 4 is_stmt 1 view .LVU2863
 8380              		.loc 1 4456 7 is_stmt 0 view .LVU2864
 8381 003c 6EB1     		cbz	r6, .L644
4457:Src/ff.c      **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8382              		.loc 1 4457 10 discriminator 1 view .LVU2865
 8383 003e 6B1E     		subs	r3, r5, #1
 8384              		.loc 1 4457 15 discriminator 1 view .LVU2866
 8385 0040 B3FBF7F3 		udiv	r3, r3, r7
 8386              		.loc 1 4457 31 discriminator 1 view .LVU2867
 8387 0044 013E     		subs	r6, r6, #1
 8388              	.LVL1002:
 8389              		.loc 1 4457 36 discriminator 1 view .LVU2868
 8390 0046 B6FBF7F2 		udiv	r2, r6, r7
4456:Src/ff.c      **** 			if (ifptr > 0 &&
 8391              		.loc 1 4456 18 discriminator 1 view .LVU2869
 8392 004a 9342     		cmp	r3, r2
 8393 004c 05D3     		bcc	.L644
4458:Src/ff.c      **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8394              		.loc 1 4458 5 is_stmt 1 view .LVU2870
 8395              		.loc 1 4458 30 is_stmt 0 view .LVU2871
 8396 004e 7B42     		rsbs	r3, r7, #0
 8397              		.loc 1 4458 28 view .LVU2872
 8398 0050 1E40     		ands	r6, r6, r3
 8399              	.LVL1003:
 8400              		.loc 1 4458 14 view .LVU2873
 8401 0052 6661     		str	r6, [r4, #20]
4459:Src/ff.c      **** 				ofs -= fp->fptr;
 8402              		.loc 1 4459 5 is_stmt 1 view .LVU2874
 8403              		.loc 1 4459 9 is_stmt 0 view .LVU2875
 8404 0054 AE1B     		subs	r6, r5, r6
 8405              	.LVL1004:
4460:Src/ff.c      **** 				clst = fp->clust;
 8406              		.loc 1 4460 5 is_stmt 1 view .LVU2876
 8407              		.loc 1 4460 10 is_stmt 0 view .LVU2877
 8408 0056 A569     		ldr	r5, [r4, #24]
 8409              	.LVL1005:
 8410              		.loc 1 4460 10 view .LVU2878
 8411 0058 04E0     		b	.L645
 8412              	.LVL1006:
 8413              	.L644:
4461:Src/ff.c      **** 			} else {									/* When seek to back cluster, */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 267


4462:Src/ff.c      **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 8414              		.loc 1 4462 5 is_stmt 1 view .LVU2879
 8415              		.loc 1 4462 10 is_stmt 0 view .LVU2880
 8416 005a A068     		ldr	r0, [r4, #8]
 8417              	.LVL1007:
4463:Src/ff.c      **** #if !FF_FS_READONLY
4464:Src/ff.c      **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8418              		.loc 1 4464 5 is_stmt 1 view .LVU2881
 8419              		.loc 1 4464 8 is_stmt 0 view .LVU2882
 8420 005c 30B3     		cbz	r0, .L666
 8421              	.L646:
4465:Src/ff.c      **** 					clst = create_chain(&fp->obj, 0);
4466:Src/ff.c      **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
4467:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4468:Src/ff.c      **** 					fp->obj.sclust = clst;
4469:Src/ff.c      **** 				}
4470:Src/ff.c      **** #endif
4471:Src/ff.c      **** 				fp->clust = clst;
 8422              		.loc 1 4471 5 is_stmt 1 view .LVU2883
 8423              		.loc 1 4471 15 is_stmt 0 view .LVU2884
 8424 005e A061     		str	r0, [r4, #24]
 8425 0060 2E46     		mov	r6, r5
 8426 0062 0546     		mov	r5, r0
 8427              	.LVL1008:
 8428              	.L645:
4472:Src/ff.c      **** 			}
4473:Src/ff.c      **** 			if (clst != 0) {
 8429              		.loc 1 4473 4 is_stmt 1 view .LVU2885
 8430              		.loc 1 4473 7 is_stmt 0 view .LVU2886
 8431 0064 002D     		cmp	r5, #0
 8432 0066 45D1     		bne	.L649
 8433              	.LVL1009:
 8434              	.L643:
4474:Src/ff.c      **** 				while (ofs > bcs) {						/* Cluster following loop */
4475:Src/ff.c      **** 					ofs -= bcs; fp->fptr += bcs;
4476:Src/ff.c      **** #if !FF_FS_READONLY
4477:Src/ff.c      **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
4478:Src/ff.c      **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
4479:Src/ff.c      **** 							fp->obj.objsize = fp->fptr;
4480:Src/ff.c      **** 							fp->flag |= FA_MODIFIED;
4481:Src/ff.c      **** 						}
4482:Src/ff.c      **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
4483:Src/ff.c      **** 						if (clst == 0) {				/* Clip file size in case of disk full */
4484:Src/ff.c      **** 							ofs = 0; break;
4485:Src/ff.c      **** 						}
4486:Src/ff.c      **** 					} else
4487:Src/ff.c      **** #endif
4488:Src/ff.c      **** 					{
4489:Src/ff.c      **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
4490:Src/ff.c      **** 					}
4491:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4492:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
4493:Src/ff.c      **** 					fp->clust = clst;
4494:Src/ff.c      **** 				}
4495:Src/ff.c      **** 				fp->fptr += ofs;
4496:Src/ff.c      **** 				if (ofs % SS(fs)) {
4497:Src/ff.c      **** 					nsect = clst2sect(fs, clst);	/* Current sector */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 268


4498:Src/ff.c      **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
4499:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
4500:Src/ff.c      **** 				}
4501:Src/ff.c      **** 			}
4502:Src/ff.c      **** 		}
4503:Src/ff.c      **** 		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is 
 8435              		.loc 1 4503 3 is_stmt 1 view .LVU2887
 8436              		.loc 1 4503 28 is_stmt 0 view .LVU2888
 8437 0068 6369     		ldr	r3, [r4, #20]
 8438              		.loc 1 4503 44 view .LVU2889
 8439 006a E268     		ldr	r2, [r4, #12]
 8440              		.loc 1 4503 6 view .LVU2890
 8441 006c 9342     		cmp	r3, r2
 8442 006e 04D9     		bls	.L658
4504:Src/ff.c      **** 			fp->obj.objsize = fp->fptr;
 8443              		.loc 1 4504 4 is_stmt 1 view .LVU2891
 8444              		.loc 1 4504 20 is_stmt 0 view .LVU2892
 8445 0070 E360     		str	r3, [r4, #12]
4505:Src/ff.c      **** 			fp->flag |= FA_MODIFIED;
 8446              		.loc 1 4505 4 is_stmt 1 view .LVU2893
 8447              		.loc 1 4505 13 is_stmt 0 view .LVU2894
 8448 0072 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 8449 0074 42F04002 		orr	r2, r2, #64
 8450 0078 2274     		strb	r2, [r4, #16]
 8451              	.L658:
4506:Src/ff.c      **** 		}
4507:Src/ff.c      **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8452              		.loc 1 4507 3 is_stmt 1 view .LVU2895
 8453              		.loc 1 4507 16 is_stmt 0 view .LVU2896
 8454 007a C3F30803 		ubfx	r3, r3, #0, #9
 8455              		.loc 1 4507 6 view .LVU2897
 8456 007e 8BB1     		cbz	r3, .L641
 8457              		.loc 1 4507 39 discriminator 1 view .LVU2898
 8458 0080 E269     		ldr	r2, [r4, #28]
 8459              		.loc 1 4507 25 discriminator 1 view .LVU2899
 8460 0082 AA42     		cmp	r2, r5
 8461 0084 0ED0     		beq	.L641
4508:Src/ff.c      **** #if !FF_FS_TINY
4509:Src/ff.c      **** #if !FF_FS_READONLY
4510:Src/ff.c      **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8462              		.loc 1 4510 4 is_stmt 1 view .LVU2900
 8463              		.loc 1 4510 8 is_stmt 0 view .LVU2901
 8464 0086 94F91030 		ldrsb	r3, [r4, #16]
 8465              		.loc 1 4510 7 view .LVU2902
 8466 008a 002B     		cmp	r3, #0
 8467 008c 63DB     		blt	.L667
 8468              	.L659:
4511:Src/ff.c      **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4512:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
4513:Src/ff.c      **** 			}
4514:Src/ff.c      **** #endif
4515:Src/ff.c      **** 			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 8469              		.loc 1 4515 4 is_stmt 1 view .LVU2903
 8470              		.loc 1 4515 8 is_stmt 0 view .LVU2904
 8471 008e 0123     		movs	r3, #1
 8472 0090 2A46     		mov	r2, r5
 8473 0092 04F12801 		add	r1, r4, #40
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 269


 8474 0096 0198     		ldr	r0, [sp, #4]
 8475 0098 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 8476 009a FFF7FEFF 		bl	disk_read
 8477              	.LVL1010:
 8478              		.loc 1 4515 7 view .LVU2905
 8479 009e 0028     		cmp	r0, #0
 8480 00a0 6BD1     		bne	.L668
 8481              		.loc 1 4515 80 is_stmt 1 discriminator 2 view .LVU2906
4516:Src/ff.c      **** #endif
4517:Src/ff.c      **** 			fp->sect = nsect;
 8482              		.loc 1 4517 4 discriminator 2 view .LVU2907
 8483              		.loc 1 4517 13 is_stmt 0 discriminator 2 view .LVU2908
 8484 00a2 E561     		str	r5, [r4, #28]
 8485              	.LVL1011:
 8486              	.L641:
4518:Src/ff.c      **** 		}
4519:Src/ff.c      **** 	}
4520:Src/ff.c      **** 
4521:Src/ff.c      **** 	LEAVE_FF(fs, res);
4522:Src/ff.c      **** }
 8487              		.loc 1 4522 1 view .LVU2909
 8488 00a4 4046     		mov	r0, r8
 8489 00a6 02B0     		add	sp, sp, #8
 8490              	.LCFI69:
 8491              		.cfi_remember_state
 8492              		.cfi_def_cfa_offset 24
 8493              		@ sp needed
 8494 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8495              	.LVL1012:
 8496              	.L666:
 8497              	.LCFI70:
 8498              		.cfi_restore_state
4465:Src/ff.c      **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8499              		.loc 1 4465 6 is_stmt 1 view .LVU2910
4465:Src/ff.c      **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8500              		.loc 1 4465 13 is_stmt 0 view .LVU2911
 8501 00ac 0021     		movs	r1, #0
 8502 00ae 2046     		mov	r0, r4
 8503              	.LVL1013:
4465:Src/ff.c      **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8504              		.loc 1 4465 13 view .LVU2912
 8505 00b0 FFF7FEFF 		bl	create_chain
 8506              	.LVL1014:
4466:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8507              		.loc 1 4466 6 is_stmt 1 view .LVU2913
4466:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8508              		.loc 1 4466 9 is_stmt 0 view .LVU2914
 8509 00b4 0128     		cmp	r0, #1
 8510 00b6 04D0     		beq	.L669
4466:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8511              		.loc 1 4466 42 is_stmt 1 discriminator 2 view .LVU2915
4467:Src/ff.c      **** 					fp->obj.sclust = clst;
 8512              		.loc 1 4467 6 discriminator 2 view .LVU2916
4467:Src/ff.c      **** 					fp->obj.sclust = clst;
 8513              		.loc 1 4467 9 is_stmt 0 discriminator 2 view .LVU2917
 8514 00b8 B0F1FF3F 		cmp	r0, #-1
 8515 00bc 06D0     		beq	.L670
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 270


4467:Src/ff.c      **** 					fp->obj.sclust = clst;
 8516              		.loc 1 4467 52 is_stmt 1 discriminator 2 view .LVU2918
4468:Src/ff.c      **** 				}
 8517              		.loc 1 4468 6 discriminator 2 view .LVU2919
4468:Src/ff.c      **** 				}
 8518              		.loc 1 4468 21 is_stmt 0 discriminator 2 view .LVU2920
 8519 00be A060     		str	r0, [r4, #8]
 8520 00c0 CDE7     		b	.L646
 8521              	.L669:
4466:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8522              		.loc 1 4466 21 is_stmt 1 discriminator 1 view .LVU2921
 8523 00c2 4FF00208 		mov	r8, #2
 8524              	.LVL1015:
4466:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8525              		.loc 1 4466 21 is_stmt 0 discriminator 1 view .LVU2922
 8526 00c6 84F81180 		strb	r8, [r4, #17]
4466:Src/ff.c      **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8527              		.loc 1 4466 21 is_stmt 1 discriminator 1 view .LVU2923
 8528 00ca EBE7     		b	.L641
 8529              	.LVL1016:
 8530              	.L670:
4467:Src/ff.c      **** 					fp->obj.sclust = clst;
 8531              		.loc 1 4467 30 discriminator 1 view .LVU2924
 8532 00cc 4FF00108 		mov	r8, #1
 8533              	.LVL1017:
4467:Src/ff.c      **** 					fp->obj.sclust = clst;
 8534              		.loc 1 4467 30 is_stmt 0 discriminator 1 view .LVU2925
 8535 00d0 84F81180 		strb	r8, [r4, #17]
4467:Src/ff.c      **** 					fp->obj.sclust = clst;
 8536              		.loc 1 4467 30 is_stmt 1 discriminator 1 view .LVU2926
 8537 00d4 E6E7     		b	.L641
 8538              	.LVL1018:
 8539              	.L650:
4489:Src/ff.c      **** 					}
 8540              		.loc 1 4489 7 view .LVU2927
4489:Src/ff.c      **** 					}
 8541              		.loc 1 4489 14 is_stmt 0 view .LVU2928
 8542 00d6 2946     		mov	r1, r5
 8543 00d8 2046     		mov	r0, r4
 8544 00da FFF7FEFF 		bl	get_fat
 8545              	.LVL1019:
 8546 00de 0546     		mov	r5, r0
 8547              	.LVL1020:
 8548              	.L652:
4491:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8549              		.loc 1 4491 6 is_stmt 1 view .LVU2929
4491:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8550              		.loc 1 4491 9 is_stmt 0 view .LVU2930
 8551 00e0 B5F1FF3F 		cmp	r5, #-1
 8552 00e4 26D0     		beq	.L671
4491:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8553              		.loc 1 4491 52 is_stmt 1 discriminator 2 view .LVU2931
4492:Src/ff.c      **** 					fp->clust = clst;
 8554              		.loc 1 4492 6 discriminator 2 view .LVU2932
4492:Src/ff.c      **** 					fp->clust = clst;
 8555              		.loc 1 4492 9 is_stmt 0 discriminator 2 view .LVU2933
 8556 00e6 012D     		cmp	r5, #1
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 271


 8557 00e8 29D9     		bls	.L654
4492:Src/ff.c      **** 					fp->clust = clst;
 8558              		.loc 1 4492 33 discriminator 2 view .LVU2934
 8559 00ea 019B     		ldr	r3, [sp, #4]
 8560 00ec 9B69     		ldr	r3, [r3, #24]
4492:Src/ff.c      **** 					fp->clust = clst;
 8561              		.loc 1 4492 20 discriminator 2 view .LVU2935
 8562 00ee AB42     		cmp	r3, r5
 8563 00f0 25D9     		bls	.L654
4492:Src/ff.c      **** 					fp->clust = clst;
 8564              		.loc 1 4492 66 is_stmt 1 discriminator 4 view .LVU2936
4493:Src/ff.c      **** 				}
 8565              		.loc 1 4493 6 discriminator 4 view .LVU2937
4493:Src/ff.c      **** 				}
 8566              		.loc 1 4493 16 is_stmt 0 discriminator 4 view .LVU2938
 8567 00f2 A561     		str	r5, [r4, #24]
 8568              	.LVL1021:
 8569              	.L649:
4474:Src/ff.c      **** 					ofs -= bcs; fp->fptr += bcs;
 8570              		.loc 1 4474 11 is_stmt 1 view .LVU2939
 8571 00f4 BE42     		cmp	r6, r7
 8572 00f6 0FD9     		bls	.L651
4475:Src/ff.c      **** #if !FF_FS_READONLY
 8573              		.loc 1 4475 6 view .LVU2940
4475:Src/ff.c      **** #if !FF_FS_READONLY
 8574              		.loc 1 4475 10 is_stmt 0 view .LVU2941
 8575 00f8 F61B     		subs	r6, r6, r7
 8576              	.LVL1022:
4475:Src/ff.c      **** #if !FF_FS_READONLY
 8577              		.loc 1 4475 18 is_stmt 1 view .LVU2942
4475:Src/ff.c      **** #if !FF_FS_READONLY
 8578              		.loc 1 4475 27 is_stmt 0 view .LVU2943
 8579 00fa 6369     		ldr	r3, [r4, #20]
 8580 00fc 3B44     		add	r3, r3, r7
 8581 00fe 6361     		str	r3, [r4, #20]
4477:Src/ff.c      **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
 8582              		.loc 1 4477 6 is_stmt 1 view .LVU2944
4477:Src/ff.c      **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
 8583              		.loc 1 4477 12 is_stmt 0 view .LVU2945
 8584 0100 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
4477:Src/ff.c      **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
 8585              		.loc 1 4477 9 view .LVU2946
 8586 0102 13F0020F 		tst	r3, #2
 8587 0106 E6D0     		beq	.L650
4478:Src/ff.c      **** 							fp->obj.objsize = fp->fptr;
 8588              		.loc 1 4478 7 is_stmt 1 view .LVU2947
4482:Src/ff.c      **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 8589              		.loc 1 4482 7 view .LVU2948
4482:Src/ff.c      **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 8590              		.loc 1 4482 14 is_stmt 0 view .LVU2949
 8591 0108 2946     		mov	r1, r5
 8592 010a 2046     		mov	r0, r4
 8593 010c FFF7FEFF 		bl	create_chain
 8594              	.LVL1023:
4483:Src/ff.c      **** 							ofs = 0; break;
 8595              		.loc 1 4483 7 is_stmt 1 view .LVU2950
4483:Src/ff.c      **** 							ofs = 0; break;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 272


 8596              		.loc 1 4483 10 is_stmt 0 view .LVU2951
 8597 0110 0546     		mov	r5, r0
 8598 0112 0028     		cmp	r0, #0
 8599 0114 E4D1     		bne	.L652
4484:Src/ff.c      **** 						}
 8600              		.loc 1 4484 12 view .LVU2952
 8601 0116 0646     		mov	r6, r0
 8602              	.LVL1024:
 8603              	.L651:
4495:Src/ff.c      **** 				if (ofs % SS(fs)) {
 8604              		.loc 1 4495 5 is_stmt 1 view .LVU2953
4495:Src/ff.c      **** 				if (ofs % SS(fs)) {
 8605              		.loc 1 4495 14 is_stmt 0 view .LVU2954
 8606 0118 6369     		ldr	r3, [r4, #20]
 8607 011a 3344     		add	r3, r3, r6
 8608 011c 6361     		str	r3, [r4, #20]
4496:Src/ff.c      **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 8609              		.loc 1 4496 5 is_stmt 1 view .LVU2955
4496:Src/ff.c      **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 8610              		.loc 1 4496 13 is_stmt 0 view .LVU2956
 8611 011e C6F30803 		ubfx	r3, r6, #0, #9
4496:Src/ff.c      **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 8612              		.loc 1 4496 8 view .LVU2957
 8613 0122 B3B1     		cbz	r3, .L664
4497:Src/ff.c      **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8614              		.loc 1 4497 6 is_stmt 1 view .LVU2958
4497:Src/ff.c      **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8615              		.loc 1 4497 14 is_stmt 0 view .LVU2959
 8616 0124 2946     		mov	r1, r5
 8617 0126 0198     		ldr	r0, [sp, #4]
 8618 0128 FFF7FEFF 		bl	clst2sect
 8619              	.LVL1025:
4498:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
 8620              		.loc 1 4498 6 is_stmt 1 view .LVU2960
4498:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
 8621              		.loc 1 4498 9 is_stmt 0 view .LVU2961
 8622 012c 60B1     		cbz	r0, .L672
4498:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
 8623              		.loc 1 4498 43 is_stmt 1 discriminator 2 view .LVU2962
4499:Src/ff.c      **** 				}
 8624              		.loc 1 4499 6 discriminator 2 view .LVU2963
4499:Src/ff.c      **** 				}
 8625              		.loc 1 4499 12 is_stmt 0 discriminator 2 view .LVU2964
 8626 012e 00EB5625 		add	r5, r0, r6, lsr #9
 8627              	.LVL1026:
4499:Src/ff.c      **** 				}
 8628              		.loc 1 4499 12 discriminator 2 view .LVU2965
 8629 0132 99E7     		b	.L643
 8630              	.LVL1027:
 8631              	.L671:
4491:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8632              		.loc 1 4491 30 is_stmt 1 discriminator 1 view .LVU2966
 8633 0134 4FF00108 		mov	r8, #1
 8634              	.LVL1028:
4491:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8635              		.loc 1 4491 30 is_stmt 0 discriminator 1 view .LVU2967
 8636 0138 84F81180 		strb	r8, [r4, #17]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 273


4491:Src/ff.c      **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8637              		.loc 1 4491 30 is_stmt 1 discriminator 1 view .LVU2968
 8638 013c B2E7     		b	.L641
 8639              	.LVL1029:
 8640              	.L654:
4492:Src/ff.c      **** 					fp->clust = clst;
 8641              		.loc 1 4492 45 discriminator 3 view .LVU2969
 8642 013e 4FF00208 		mov	r8, #2
 8643              	.LVL1030:
4492:Src/ff.c      **** 					fp->clust = clst;
 8644              		.loc 1 4492 45 is_stmt 0 discriminator 3 view .LVU2970
 8645 0142 84F81180 		strb	r8, [r4, #17]
4492:Src/ff.c      **** 					fp->clust = clst;
 8646              		.loc 1 4492 45 is_stmt 1 discriminator 3 view .LVU2971
 8647 0146 ADE7     		b	.L641
 8648              	.LVL1031:
 8649              	.L672:
4498:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
 8650              		.loc 1 4498 22 discriminator 1 view .LVU2972
 8651 0148 4FF00208 		mov	r8, #2
 8652              	.LVL1032:
4498:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
 8653              		.loc 1 4498 22 is_stmt 0 discriminator 1 view .LVU2973
 8654 014c 84F81180 		strb	r8, [r4, #17]
4498:Src/ff.c      **** 					nsect += (DWORD)(ofs / SS(fs));
 8655              		.loc 1 4498 22 is_stmt 1 discriminator 1 view .LVU2974
 8656 0150 A8E7     		b	.L641
 8657              	.LVL1033:
 8658              	.L664:
4453:Src/ff.c      **** 		if (ofs > 0) {
 8659              		.loc 1 4453 20 is_stmt 0 view .LVU2975
 8660 0152 1D46     		mov	r5, r3
 8661              	.LVL1034:
4453:Src/ff.c      **** 		if (ofs > 0) {
 8662              		.loc 1 4453 20 view .LVU2976
 8663 0154 88E7     		b	.L643
 8664              	.LVL1035:
 8665              	.L667:
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8666              		.loc 1 4511 5 is_stmt 1 view .LVU2977
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8667              		.loc 1 4511 9 is_stmt 0 view .LVU2978
 8668 0156 0123     		movs	r3, #1
 8669 0158 04F12801 		add	r1, r4, #40
 8670 015c 0198     		ldr	r0, [sp, #4]
 8671 015e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 8672 0160 FFF7FEFF 		bl	disk_write
 8673              	.LVL1036:
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8674              		.loc 1 4511 8 view .LVU2979
 8675 0164 20B9     		cbnz	r0, .L673
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8676              		.loc 1 4511 85 is_stmt 1 discriminator 2 view .LVU2980
4512:Src/ff.c      **** 			}
 8677              		.loc 1 4512 5 discriminator 2 view .LVU2981
4512:Src/ff.c      **** 			}
 8678              		.loc 1 4512 14 is_stmt 0 discriminator 2 view .LVU2982
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 274


 8679 0166 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 8680 0168 03F07F03 		and	r3, r3, #127
 8681 016c 2374     		strb	r3, [r4, #16]
 8682 016e 8EE7     		b	.L659
 8683              	.L673:
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8684              		.loc 1 4511 63 is_stmt 1 discriminator 1 view .LVU2983
 8685 0170 4FF00108 		mov	r8, #1
 8686              	.LVL1037:
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8687              		.loc 1 4511 63 is_stmt 0 discriminator 1 view .LVU2984
 8688 0174 84F81180 		strb	r8, [r4, #17]
4511:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8689              		.loc 1 4511 63 is_stmt 1 discriminator 1 view .LVU2985
 8690 0178 94E7     		b	.L641
 8691              	.LVL1038:
 8692              	.L668:
4515:Src/ff.c      **** #endif
 8693              		.loc 1 4515 58 discriminator 1 view .LVU2986
 8694 017a 4FF00108 		mov	r8, #1
 8695              	.LVL1039:
4515:Src/ff.c      **** #endif
 8696              		.loc 1 4515 58 is_stmt 0 discriminator 1 view .LVU2987
 8697 017e 84F81180 		strb	r8, [r4, #17]
4515:Src/ff.c      **** #endif
 8698              		.loc 1 4515 58 is_stmt 1 discriminator 1 view .LVU2988
 8699 0182 8FE7     		b	.L641
 8700              		.cfi_endproc
 8701              	.LFE45:
 8703              		.section	.text.f_opendir,"ax",%progbits
 8704              		.align	1
 8705              		.global	f_opendir
 8706              		.syntax unified
 8707              		.thumb
 8708              		.thumb_func
 8709              		.fpu softvfp
 8711              	f_opendir:
 8712              	.LVL1040:
 8713              	.LFB46:
4523:Src/ff.c      **** 
4524:Src/ff.c      **** 
4525:Src/ff.c      **** 
4526:Src/ff.c      **** #if FF_FS_MINIMIZE <= 1
4527:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4528:Src/ff.c      **** /* Create a Directory Object                                             */
4529:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4530:Src/ff.c      **** 
4531:Src/ff.c      **** FRESULT f_opendir (
4532:Src/ff.c      **** 	DIR* dp,			/* Pointer to directory object to create */
4533:Src/ff.c      **** 	const TCHAR* path	/* Pointer to the directory path */
4534:Src/ff.c      **** )
4535:Src/ff.c      **** {
 8714              		.loc 1 4535 1 view -0
 8715              		.cfi_startproc
 8716              		@ args = 0, pretend = 0, frame = 16
 8717              		@ frame_needed = 0, uses_anonymous_args = 0
 8718              		.loc 1 4535 1 is_stmt 0 view .LVU2990
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 275


 8719 0000 10B5     		push	{r4, lr}
 8720              	.LCFI71:
 8721              		.cfi_def_cfa_offset 8
 8722              		.cfi_offset 4, -8
 8723              		.cfi_offset 14, -4
 8724 0002 84B0     		sub	sp, sp, #16
 8725              	.LCFI72:
 8726              		.cfi_def_cfa_offset 24
 8727 0004 0191     		str	r1, [sp, #4]
4536:Src/ff.c      **** 	FRESULT res;
 8728              		.loc 1 4536 2 is_stmt 1 view .LVU2991
4537:Src/ff.c      **** 	FATFS *fs;
 8729              		.loc 1 4537 2 view .LVU2992
4538:Src/ff.c      **** 	DEF_NAMBUF
4539:Src/ff.c      **** 
4540:Src/ff.c      **** 
4541:Src/ff.c      **** 	if (!dp) return FR_INVALID_OBJECT;
 8730              		.loc 1 4541 2 view .LVU2993
 8731              		.loc 1 4541 5 is_stmt 0 view .LVU2994
 8732 0006 80B3     		cbz	r0, .L680
 8733 0008 0446     		mov	r4, r0
4542:Src/ff.c      **** 
4543:Src/ff.c      **** 	/* Get logical drive */
4544:Src/ff.c      **** 	res = mount_volume(&path, &fs, 0);
 8734              		.loc 1 4544 2 is_stmt 1 view .LVU2995
 8735              		.loc 1 4544 8 is_stmt 0 view .LVU2996
 8736 000a 0022     		movs	r2, #0
 8737 000c 03A9     		add	r1, sp, #12
 8738              	.LVL1041:
 8739              		.loc 1 4544 8 view .LVU2997
 8740 000e 01A8     		add	r0, sp, #4
 8741              	.LVL1042:
 8742              		.loc 1 4544 8 view .LVU2998
 8743 0010 FFF7FEFF 		bl	mount_volume
 8744              	.LVL1043:
4545:Src/ff.c      **** 	if (res == FR_OK) {
 8745              		.loc 1 4545 2 is_stmt 1 view .LVU2999
 8746              		.loc 1 4545 5 is_stmt 0 view .LVU3000
 8747 0014 0346     		mov	r3, r0
 8748 0016 28B1     		cbz	r0, .L684
 8749              	.L676:
4546:Src/ff.c      **** 		dp->obj.fs = fs;
4547:Src/ff.c      **** 		INIT_NAMBUF(fs);
4548:Src/ff.c      **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
4549:Src/ff.c      **** 		if (res == FR_OK) {						/* Follow completed */
4550:Src/ff.c      **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
4551:Src/ff.c      **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
4552:Src/ff.c      **** #if FF_FS_EXFAT
4553:Src/ff.c      **** 					if (fs->fs_type == FS_EXFAT) {
4554:Src/ff.c      **** 						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
4555:Src/ff.c      **** 						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
4556:Src/ff.c      **** 						dp->obj.c_ofs = dp->blk_ofs;
4557:Src/ff.c      **** 						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
4558:Src/ff.c      **** 					} else
4559:Src/ff.c      **** #endif
4560:Src/ff.c      **** 					{
4561:Src/ff.c      **** 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 276


4562:Src/ff.c      **** 					}
4563:Src/ff.c      **** 				} else {						/* This object is a file */
4564:Src/ff.c      **** 					res = FR_NO_PATH;
4565:Src/ff.c      **** 				}
4566:Src/ff.c      **** 			}
4567:Src/ff.c      **** 			if (res == FR_OK) {
4568:Src/ff.c      **** 				dp->obj.id = fs->id;
4569:Src/ff.c      **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
4570:Src/ff.c      **** #if FF_FS_LOCK != 0
4571:Src/ff.c      **** 				if (res == FR_OK) {
4572:Src/ff.c      **** 					if (dp->obj.sclust != 0) {
4573:Src/ff.c      **** 						dp->obj.lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4574:Src/ff.c      **** 						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
4575:Src/ff.c      **** 					} else {
4576:Src/ff.c      **** 						dp->obj.lockid = 0;	/* Root directory need not to be locked */
4577:Src/ff.c      **** 					}
4578:Src/ff.c      **** 				}
4579:Src/ff.c      **** #endif
4580:Src/ff.c      **** 			}
4581:Src/ff.c      **** 		}
4582:Src/ff.c      **** 		FREE_NAMBUF();
4583:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4584:Src/ff.c      **** 	}
4585:Src/ff.c      **** 	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8750              		.loc 1 4585 2 is_stmt 1 view .LVU3001
 8751              		.loc 1 4585 5 is_stmt 0 view .LVU3002
 8752 0018 0BB1     		cbz	r3, .L675
 8753              	.L679:
 8754              		.loc 1 4585 20 is_stmt 1 discriminator 1 view .LVU3003
 8755              		.loc 1 4585 31 is_stmt 0 discriminator 1 view .LVU3004
 8756 001a 0022     		movs	r2, #0
 8757 001c 2260     		str	r2, [r4]
 8758              	.LVL1044:
 8759              	.L675:
4586:Src/ff.c      **** 
4587:Src/ff.c      **** 	LEAVE_FF(fs, res);
4588:Src/ff.c      **** }
 8760              		.loc 1 4588 1 view .LVU3005
 8761 001e 1846     		mov	r0, r3
 8762 0020 04B0     		add	sp, sp, #16
 8763              	.LCFI73:
 8764              		.cfi_remember_state
 8765              		.cfi_def_cfa_offset 8
 8766              		@ sp needed
 8767 0022 10BD     		pop	{r4, pc}
 8768              	.LVL1045:
 8769              	.L684:
 8770              	.LCFI74:
 8771              		.cfi_restore_state
4546:Src/ff.c      **** 		dp->obj.fs = fs;
 8772              		.loc 1 4546 3 is_stmt 1 view .LVU3006
4546:Src/ff.c      **** 		dp->obj.fs = fs;
 8773              		.loc 1 4546 14 is_stmt 0 view .LVU3007
 8774 0024 039B     		ldr	r3, [sp, #12]
 8775 0026 2360     		str	r3, [r4]
4547:Src/ff.c      **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8776              		.loc 1 4547 18 is_stmt 1 view .LVU3008
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 277


4548:Src/ff.c      **** 		if (res == FR_OK) {						/* Follow completed */
 8777              		.loc 1 4548 3 view .LVU3009
4548:Src/ff.c      **** 		if (res == FR_OK) {						/* Follow completed */
 8778              		.loc 1 4548 9 is_stmt 0 view .LVU3010
 8779 0028 0199     		ldr	r1, [sp, #4]
 8780 002a 2046     		mov	r0, r4
 8781 002c FFF7FEFF 		bl	follow_path
 8782              	.LVL1046:
4549:Src/ff.c      **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8783              		.loc 1 4549 3 is_stmt 1 view .LVU3011
4549:Src/ff.c      **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8784              		.loc 1 4549 6 is_stmt 0 view .LVU3012
 8785 0030 0346     		mov	r3, r0
 8786 0032 A0B9     		cbnz	r0, .L677
4550:Src/ff.c      **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8787              		.loc 1 4550 4 is_stmt 1 view .LVU3013
4550:Src/ff.c      **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8788              		.loc 1 4550 8 is_stmt 0 view .LVU3014
 8789 0034 94F92B30 		ldrsb	r3, [r4, #43]
4550:Src/ff.c      **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8790              		.loc 1 4550 7 view .LVU3015
 8791 0038 002B     		cmp	r3, #0
 8792 003a 08DB     		blt	.L678
4551:Src/ff.c      **** #if FF_FS_EXFAT
 8793              		.loc 1 4551 5 is_stmt 1 view .LVU3016
4551:Src/ff.c      **** #if FF_FS_EXFAT
 8794              		.loc 1 4551 16 is_stmt 0 view .LVU3017
 8795 003c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
4551:Src/ff.c      **** #if FF_FS_EXFAT
 8796              		.loc 1 4551 8 view .LVU3018
 8797 003e 13F0100F 		tst	r3, #16
 8798 0042 10D0     		beq	.L681
4561:Src/ff.c      **** 					}
 8799              		.loc 1 4561 7 is_stmt 1 view .LVU3019
4561:Src/ff.c      **** 					}
 8800              		.loc 1 4561 24 is_stmt 0 view .LVU3020
 8801 0044 E169     		ldr	r1, [r4, #28]
 8802 0046 0398     		ldr	r0, [sp, #12]
 8803 0048 FFF7FEFF 		bl	ld_clust
 8804              	.LVL1047:
4561:Src/ff.c      **** 					}
 8805              		.loc 1 4561 22 view .LVU3021
 8806 004c A060     		str	r0, [r4, #8]
 8807              	.L678:
4567:Src/ff.c      **** 				dp->obj.id = fs->id;
 8808              		.loc 1 4567 4 is_stmt 1 view .LVU3022
4568:Src/ff.c      **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8809              		.loc 1 4568 5 view .LVU3023
4568:Src/ff.c      **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8810              		.loc 1 4568 20 is_stmt 0 view .LVU3024
 8811 004e 039B     		ldr	r3, [sp, #12]
 8812 0050 DB88     		ldrh	r3, [r3, #6]
4568:Src/ff.c      **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8813              		.loc 1 4568 16 view .LVU3025
 8814 0052 A380     		strh	r3, [r4, #4]	@ movhi
4569:Src/ff.c      **** #if FF_FS_LOCK != 0
 8815              		.loc 1 4569 5 is_stmt 1 view .LVU3026
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 278


4569:Src/ff.c      **** #if FF_FS_LOCK != 0
 8816              		.loc 1 4569 11 is_stmt 0 view .LVU3027
 8817 0054 0021     		movs	r1, #0
 8818 0056 2046     		mov	r0, r4
 8819 0058 FFF7FEFF 		bl	dir_sdi
 8820              	.LVL1048:
 8821 005c 0346     		mov	r3, r0
 8822              	.L677:
4582:Src/ff.c      **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8823              		.loc 1 4582 16 is_stmt 1 view .LVU3028
4583:Src/ff.c      **** 	}
 8824              		.loc 1 4583 3 view .LVU3029
4583:Src/ff.c      **** 	}
 8825              		.loc 1 4583 6 is_stmt 0 view .LVU3030
 8826 005e 042B     		cmp	r3, #4
 8827 0060 DAD1     		bne	.L676
 8828              	.LVL1049:
4583:Src/ff.c      **** 	}
 8829              		.loc 1 4583 30 view .LVU3031
 8830 0062 0523     		movs	r3, #5
 8831 0064 D9E7     		b	.L679
 8832              	.LVL1050:
 8833              	.L681:
4564:Src/ff.c      **** 				}
 8834              		.loc 1 4564 10 view .LVU3032
 8835 0066 0523     		movs	r3, #5
 8836 0068 F9E7     		b	.L677
 8837              	.LVL1051:
 8838              	.L680:
4541:Src/ff.c      **** 
 8839              		.loc 1 4541 18 view .LVU3033
 8840 006a 0923     		movs	r3, #9
 8841 006c D7E7     		b	.L675
 8842              		.cfi_endproc
 8843              	.LFE46:
 8845              		.section	.text.f_closedir,"ax",%progbits
 8846              		.align	1
 8847              		.global	f_closedir
 8848              		.syntax unified
 8849              		.thumb
 8850              		.thumb_func
 8851              		.fpu softvfp
 8853              	f_closedir:
 8854              	.LVL1052:
 8855              	.LFB47:
4589:Src/ff.c      **** 
4590:Src/ff.c      **** 
4591:Src/ff.c      **** 
4592:Src/ff.c      **** 
4593:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4594:Src/ff.c      **** /* Close Directory                                                       */
4595:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4596:Src/ff.c      **** 
4597:Src/ff.c      **** FRESULT f_closedir (
4598:Src/ff.c      **** 	DIR *dp		/* Pointer to the directory object to be closed */
4599:Src/ff.c      **** )
4600:Src/ff.c      **** {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 279


 8856              		.loc 1 4600 1 is_stmt 1 view -0
 8857              		.cfi_startproc
 8858              		@ args = 0, pretend = 0, frame = 8
 8859              		@ frame_needed = 0, uses_anonymous_args = 0
 8860              		.loc 1 4600 1 is_stmt 0 view .LVU3035
 8861 0000 10B5     		push	{r4, lr}
 8862              	.LCFI75:
 8863              		.cfi_def_cfa_offset 8
 8864              		.cfi_offset 4, -8
 8865              		.cfi_offset 14, -4
 8866 0002 82B0     		sub	sp, sp, #8
 8867              	.LCFI76:
 8868              		.cfi_def_cfa_offset 16
 8869 0004 0446     		mov	r4, r0
4601:Src/ff.c      **** 	FRESULT res;
 8870              		.loc 1 4601 2 is_stmt 1 view .LVU3036
4602:Src/ff.c      **** 	FATFS *fs;
 8871              		.loc 1 4602 2 view .LVU3037
4603:Src/ff.c      **** 
4604:Src/ff.c      **** 
4605:Src/ff.c      **** 	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8872              		.loc 1 4605 2 view .LVU3038
 8873              		.loc 1 4605 8 is_stmt 0 view .LVU3039
 8874 0006 01A9     		add	r1, sp, #4
 8875 0008 FFF7FEFF 		bl	validate
 8876              	.LVL1053:
4606:Src/ff.c      **** 	if (res == FR_OK) {
 8877              		.loc 1 4606 2 is_stmt 1 view .LVU3040
 8878              		.loc 1 4606 5 is_stmt 0 view .LVU3041
 8879 000c 00B9     		cbnz	r0, .L686
4607:Src/ff.c      **** #if FF_FS_LOCK != 0
4608:Src/ff.c      **** 		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
4609:Src/ff.c      **** 		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
4610:Src/ff.c      **** #else
4611:Src/ff.c      **** 		dp->obj.fs = 0;	/* Invalidate directory object */
 8880              		.loc 1 4611 3 is_stmt 1 view .LVU3042
 8881              		.loc 1 4611 14 is_stmt 0 view .LVU3043
 8882 000e 2060     		str	r0, [r4]
 8883              	.L686:
4612:Src/ff.c      **** #endif
4613:Src/ff.c      **** #if FF_FS_REENTRANT
4614:Src/ff.c      **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4615:Src/ff.c      **** #endif
4616:Src/ff.c      **** 	}
4617:Src/ff.c      **** 	return res;
 8884              		.loc 1 4617 2 is_stmt 1 view .LVU3044
4618:Src/ff.c      **** }
 8885              		.loc 1 4618 1 is_stmt 0 view .LVU3045
 8886 0010 02B0     		add	sp, sp, #8
 8887              	.LCFI77:
 8888              		.cfi_def_cfa_offset 8
 8889              		@ sp needed
 8890 0012 10BD     		pop	{r4, pc}
 8891              		.loc 1 4618 1 view .LVU3046
 8892              		.cfi_endproc
 8893              	.LFE47:
 8895              		.section	.text.f_readdir,"ax",%progbits
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 280


 8896              		.align	1
 8897              		.global	f_readdir
 8898              		.syntax unified
 8899              		.thumb
 8900              		.thumb_func
 8901              		.fpu softvfp
 8903              	f_readdir:
 8904              	.LVL1054:
 8905              	.LFB48:
4619:Src/ff.c      **** 
4620:Src/ff.c      **** 
4621:Src/ff.c      **** 
4622:Src/ff.c      **** 
4623:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4624:Src/ff.c      **** /* Read Directory Entries in Sequence                                    */
4625:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4626:Src/ff.c      **** 
4627:Src/ff.c      **** FRESULT f_readdir (
4628:Src/ff.c      **** 	DIR* dp,			/* Pointer to the open directory object */
4629:Src/ff.c      **** 	FILINFO* fno		/* Pointer to file information to return */
4630:Src/ff.c      **** )
4631:Src/ff.c      **** {
 8906              		.loc 1 4631 1 is_stmt 1 view -0
 8907              		.cfi_startproc
 8908              		@ args = 0, pretend = 0, frame = 8
 8909              		@ frame_needed = 0, uses_anonymous_args = 0
 8910              		.loc 1 4631 1 is_stmt 0 view .LVU3048
 8911 0000 70B5     		push	{r4, r5, r6, lr}
 8912              	.LCFI78:
 8913              		.cfi_def_cfa_offset 16
 8914              		.cfi_offset 4, -16
 8915              		.cfi_offset 5, -12
 8916              		.cfi_offset 6, -8
 8917              		.cfi_offset 14, -4
 8918 0002 82B0     		sub	sp, sp, #8
 8919              	.LCFI79:
 8920              		.cfi_def_cfa_offset 24
 8921 0004 0446     		mov	r4, r0
 8922 0006 0D46     		mov	r5, r1
4632:Src/ff.c      **** 	FRESULT res;
 8923              		.loc 1 4632 2 is_stmt 1 view .LVU3049
4633:Src/ff.c      **** 	FATFS *fs;
 8924              		.loc 1 4633 2 view .LVU3050
4634:Src/ff.c      **** 	DEF_NAMBUF
4635:Src/ff.c      **** 
4636:Src/ff.c      **** 
4637:Src/ff.c      **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8925              		.loc 1 4637 2 view .LVU3051
 8926              		.loc 1 4637 8 is_stmt 0 view .LVU3052
 8927 0008 01A9     		add	r1, sp, #4
 8928              	.LVL1055:
 8929              		.loc 1 4637 8 view .LVU3053
 8930 000a FFF7FEFF 		bl	validate
 8931              	.LVL1056:
4638:Src/ff.c      **** 	if (res == FR_OK) {
 8932              		.loc 1 4638 2 is_stmt 1 view .LVU3054
 8933              		.loc 1 4638 5 is_stmt 0 view .LVU3055
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 281


 8934 000e 0646     		mov	r6, r0
 8935 0010 C0B9     		cbnz	r0, .L689
4639:Src/ff.c      **** 		if (!fno) {
 8936              		.loc 1 4639 3 is_stmt 1 view .LVU3056
 8937              		.loc 1 4639 6 is_stmt 0 view .LVU3057
 8938 0012 95B1     		cbz	r5, .L694
4640:Src/ff.c      **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
4641:Src/ff.c      **** 		} else {
4642:Src/ff.c      **** 			INIT_NAMBUF(fs);
 8939              		.loc 1 4642 19 is_stmt 1 view .LVU3058
4643:Src/ff.c      **** 			res = DIR_READ_FILE(dp);		/* Read an item */
 8940              		.loc 1 4643 4 view .LVU3059
 8941              		.loc 1 4643 10 is_stmt 0 view .LVU3060
 8942 0014 0021     		movs	r1, #0
 8943 0016 2046     		mov	r0, r4
 8944              	.LVL1057:
 8945              		.loc 1 4643 10 view .LVU3061
 8946 0018 FFF7FEFF 		bl	dir_read
 8947              	.LVL1058:
4644:Src/ff.c      **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8948              		.loc 1 4644 4 is_stmt 1 view .LVU3062
 8949              		.loc 1 4644 7 is_stmt 0 view .LVU3063
 8950 001c 0428     		cmp	r0, #4
 8951 001e 00D0     		beq	.L691
4645:Src/ff.c      **** 			if (res == FR_OK) {				/* A valid entry is found */
 8952              		.loc 1 4645 4 is_stmt 1 view .LVU3064
 8953              		.loc 1 4645 7 is_stmt 0 view .LVU3065
 8954 0020 98B9     		cbnz	r0, .L692
 8955              	.L691:
 8956              	.LVL1059:
4646:Src/ff.c      **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8957              		.loc 1 4646 5 is_stmt 1 view .LVU3066
 8958 0022 2946     		mov	r1, r5
 8959 0024 2046     		mov	r0, r4
 8960 0026 FFF7FEFF 		bl	get_fileinfo
 8961              	.LVL1060:
4647:Src/ff.c      **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8962              		.loc 1 4647 5 view .LVU3067
 8963              		.loc 1 4647 11 is_stmt 0 view .LVU3068
 8964 002a 0021     		movs	r1, #0
 8965 002c 2046     		mov	r0, r4
 8966 002e FFF7FEFF 		bl	dir_next
 8967              	.LVL1061:
4648:Src/ff.c      **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8968              		.loc 1 4648 5 is_stmt 1 view .LVU3069
 8969              		.loc 1 4648 8 is_stmt 0 view .LVU3070
 8970 0032 0428     		cmp	r0, #4
 8971 0034 06D0     		beq	.L689
4647:Src/ff.c      **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8972              		.loc 1 4647 11 view .LVU3071
 8973 0036 0646     		mov	r6, r0
 8974 0038 04E0     		b	.L689
 8975              	.L694:
4640:Src/ff.c      **** 		} else {
 8976              		.loc 1 4640 4 is_stmt 1 view .LVU3072
4640:Src/ff.c      **** 		} else {
 8977              		.loc 1 4640 10 is_stmt 0 view .LVU3073
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 282


 8978 003a 0021     		movs	r1, #0
 8979 003c 2046     		mov	r0, r4
 8980              	.LVL1062:
4640:Src/ff.c      **** 		} else {
 8981              		.loc 1 4640 10 view .LVU3074
 8982 003e FFF7FEFF 		bl	dir_sdi
 8983              	.LVL1063:
 8984 0042 0646     		mov	r6, r0
 8985              	.LVL1064:
 8986              	.L689:
4649:Src/ff.c      **** 			}
4650:Src/ff.c      **** 			FREE_NAMBUF();
 8987              		.loc 1 4650 17 is_stmt 1 view .LVU3075
4651:Src/ff.c      **** 		}
4652:Src/ff.c      **** 	}
4653:Src/ff.c      **** 	LEAVE_FF(fs, res);
 8988              		.loc 1 4653 2 view .LVU3076
4654:Src/ff.c      **** }
 8989              		.loc 1 4654 1 is_stmt 0 view .LVU3077
 8990 0044 3046     		mov	r0, r6
 8991 0046 02B0     		add	sp, sp, #8
 8992              	.LCFI80:
 8993              		.cfi_remember_state
 8994              		.cfi_def_cfa_offset 16
 8995              		@ sp needed
 8996 0048 70BD     		pop	{r4, r5, r6, pc}
 8997              	.LVL1065:
 8998              	.L692:
 8999              	.LCFI81:
 9000              		.cfi_restore_state
4643:Src/ff.c      **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 9001              		.loc 1 4643 10 view .LVU3078
 9002 004a 0646     		mov	r6, r0
 9003 004c FAE7     		b	.L689
 9004              		.cfi_endproc
 9005              	.LFE48:
 9007              		.section	.text.f_stat,"ax",%progbits
 9008              		.align	1
 9009              		.global	f_stat
 9010              		.syntax unified
 9011              		.thumb
 9012              		.thumb_func
 9013              		.fpu softvfp
 9015              	f_stat:
 9016              	.LVL1066:
 9017              	.LFB49:
4655:Src/ff.c      **** 
4656:Src/ff.c      **** 
4657:Src/ff.c      **** 
4658:Src/ff.c      **** #if FF_USE_FIND
4659:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4660:Src/ff.c      **** /* Find Next File                                                        */
4661:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4662:Src/ff.c      **** 
4663:Src/ff.c      **** FRESULT f_findnext (
4664:Src/ff.c      **** 	DIR* dp,		/* Pointer to the open directory object */
4665:Src/ff.c      **** 	FILINFO* fno	/* Pointer to the file information structure */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 283


4666:Src/ff.c      **** )
4667:Src/ff.c      **** {
4668:Src/ff.c      **** 	FRESULT res;
4669:Src/ff.c      **** 
4670:Src/ff.c      **** 
4671:Src/ff.c      **** 	for (;;) {
4672:Src/ff.c      **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4673:Src/ff.c      **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4674:Src/ff.c      **** 		if (pattern_match(dp->pat, fno->fname, 0, FIND_RECURS)) break;		/* Test for the file name */
4675:Src/ff.c      **** #if FF_USE_LFN && FF_USE_FIND == 2
4676:Src/ff.c      **** 		if (pattern_match(dp->pat, fno->altname, 0, FIND_RECURS)) break;	/* Test for alternative name if 
4677:Src/ff.c      **** #endif
4678:Src/ff.c      **** 	}
4679:Src/ff.c      **** 	return res;
4680:Src/ff.c      **** }
4681:Src/ff.c      **** 
4682:Src/ff.c      **** 
4683:Src/ff.c      **** 
4684:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4685:Src/ff.c      **** /* Find First File                                                       */
4686:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4687:Src/ff.c      **** 
4688:Src/ff.c      **** FRESULT f_findfirst (
4689:Src/ff.c      **** 	DIR* dp,				/* Pointer to the blank directory object */
4690:Src/ff.c      **** 	FILINFO* fno,			/* Pointer to the file information structure */
4691:Src/ff.c      **** 	const TCHAR* path,		/* Pointer to the directory to open */
4692:Src/ff.c      **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4693:Src/ff.c      **** )
4694:Src/ff.c      **** {
4695:Src/ff.c      **** 	FRESULT res;
4696:Src/ff.c      **** 
4697:Src/ff.c      **** 
4698:Src/ff.c      **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4699:Src/ff.c      **** 	res = f_opendir(dp, path);		/* Open the target directory */
4700:Src/ff.c      **** 	if (res == FR_OK) {
4701:Src/ff.c      **** 		res = f_findnext(dp, fno);	/* Find the first item */
4702:Src/ff.c      **** 	}
4703:Src/ff.c      **** 	return res;
4704:Src/ff.c      **** }
4705:Src/ff.c      **** 
4706:Src/ff.c      **** #endif	/* FF_USE_FIND */
4707:Src/ff.c      **** 
4708:Src/ff.c      **** 
4709:Src/ff.c      **** 
4710:Src/ff.c      **** #if FF_FS_MINIMIZE == 0
4711:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4712:Src/ff.c      **** /* Get File Status                                                       */
4713:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4714:Src/ff.c      **** 
4715:Src/ff.c      **** FRESULT f_stat (
4716:Src/ff.c      **** 	const TCHAR* path,	/* Pointer to the file path */
4717:Src/ff.c      **** 	FILINFO* fno		/* Pointer to file information to return */
4718:Src/ff.c      **** )
4719:Src/ff.c      **** {
 9018              		.loc 1 4719 1 is_stmt 1 view -0
 9019              		.cfi_startproc
 9020              		@ args = 0, pretend = 0, frame = 56
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 284


 9021              		@ frame_needed = 0, uses_anonymous_args = 0
 9022              		.loc 1 4719 1 is_stmt 0 view .LVU3080
 9023 0000 30B5     		push	{r4, r5, lr}
 9024              	.LCFI82:
 9025              		.cfi_def_cfa_offset 12
 9026              		.cfi_offset 4, -12
 9027              		.cfi_offset 5, -8
 9028              		.cfi_offset 14, -4
 9029 0002 8FB0     		sub	sp, sp, #60
 9030              	.LCFI83:
 9031              		.cfi_def_cfa_offset 72
 9032 0004 0190     		str	r0, [sp, #4]
 9033 0006 0C46     		mov	r4, r1
4720:Src/ff.c      **** 	FRESULT res;
 9034              		.loc 1 4720 2 is_stmt 1 view .LVU3081
4721:Src/ff.c      **** 	DIR dj;
 9035              		.loc 1 4721 2 view .LVU3082
4722:Src/ff.c      **** 	DEF_NAMBUF
4723:Src/ff.c      **** 
4724:Src/ff.c      **** 
4725:Src/ff.c      **** 	/* Get logical drive */
4726:Src/ff.c      **** 	res = mount_volume(&path, &dj.obj.fs, 0);
 9036              		.loc 1 4726 2 view .LVU3083
 9037              		.loc 1 4726 8 is_stmt 0 view .LVU3084
 9038 0008 0022     		movs	r2, #0
 9039 000a 02A9     		add	r1, sp, #8
 9040              	.LVL1067:
 9041              		.loc 1 4726 8 view .LVU3085
 9042 000c 01A8     		add	r0, sp, #4
 9043              	.LVL1068:
 9044              		.loc 1 4726 8 view .LVU3086
 9045 000e FFF7FEFF 		bl	mount_volume
 9046              	.LVL1069:
4727:Src/ff.c      **** 	if (res == FR_OK) {
 9047              		.loc 1 4727 2 is_stmt 1 view .LVU3087
 9048              		.loc 1 4727 5 is_stmt 0 view .LVU3088
 9049 0012 0546     		mov	r5, r0
 9050 0014 10B1     		cbz	r0, .L699
 9051              	.LVL1070:
 9052              	.L696:
4728:Src/ff.c      **** 		INIT_NAMBUF(dj.obj.fs);
4729:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
4730:Src/ff.c      **** 		if (res == FR_OK) {				/* Follow completed */
4731:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
4732:Src/ff.c      **** 				res = FR_INVALID_NAME;
4733:Src/ff.c      **** 			} else {							/* Found an object */
4734:Src/ff.c      **** 				if (fno) get_fileinfo(&dj, fno);
4735:Src/ff.c      **** 			}
4736:Src/ff.c      **** 		}
4737:Src/ff.c      **** 		FREE_NAMBUF();
 9053              		.loc 1 4737 16 is_stmt 1 view .LVU3089
4738:Src/ff.c      **** 	}
4739:Src/ff.c      **** 
4740:Src/ff.c      **** 	LEAVE_FF(dj.obj.fs, res);
 9054              		.loc 1 4740 2 view .LVU3090
4741:Src/ff.c      **** }
 9055              		.loc 1 4741 1 is_stmt 0 view .LVU3091
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 285


 9056 0016 2846     		mov	r0, r5
 9057 0018 0FB0     		add	sp, sp, #60
 9058              	.LCFI84:
 9059              		.cfi_remember_state
 9060              		.cfi_def_cfa_offset 12
 9061              		@ sp needed
 9062 001a 30BD     		pop	{r4, r5, pc}
 9063              	.LVL1071:
 9064              	.L699:
 9065              	.LCFI85:
 9066              		.cfi_restore_state
4728:Src/ff.c      **** 		INIT_NAMBUF(dj.obj.fs);
 9067              		.loc 1 4728 25 is_stmt 1 view .LVU3092
4729:Src/ff.c      **** 		if (res == FR_OK) {				/* Follow completed */
 9068              		.loc 1 4729 3 view .LVU3093
4729:Src/ff.c      **** 		if (res == FR_OK) {				/* Follow completed */
 9069              		.loc 1 4729 9 is_stmt 0 view .LVU3094
 9070 001c 0199     		ldr	r1, [sp, #4]
 9071 001e 02A8     		add	r0, sp, #8
 9072              	.LVL1072:
4729:Src/ff.c      **** 		if (res == FR_OK) {				/* Follow completed */
 9073              		.loc 1 4729 9 view .LVU3095
 9074 0020 FFF7FEFF 		bl	follow_path
 9075              	.LVL1073:
4730:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 9076              		.loc 1 4730 3 is_stmt 1 view .LVU3096
4730:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 9077              		.loc 1 4730 6 is_stmt 0 view .LVU3097
 9078 0024 0546     		mov	r5, r0
 9079 0026 0028     		cmp	r0, #0
 9080 0028 F5D1     		bne	.L696
4731:Src/ff.c      **** 				res = FR_INVALID_NAME;
 9081              		.loc 1 4731 4 is_stmt 1 view .LVU3098
4731:Src/ff.c      **** 				res = FR_INVALID_NAME;
 9082              		.loc 1 4731 8 is_stmt 0 view .LVU3099
 9083 002a 9DF93330 		ldrsb	r3, [sp, #51]
4731:Src/ff.c      **** 				res = FR_INVALID_NAME;
 9084              		.loc 1 4731 7 view .LVU3100
 9085 002e 002B     		cmp	r3, #0
 9086 0030 06DB     		blt	.L697
4734:Src/ff.c      **** 			}
 9087              		.loc 1 4734 5 is_stmt 1 view .LVU3101
4734:Src/ff.c      **** 			}
 9088              		.loc 1 4734 8 is_stmt 0 view .LVU3102
 9089 0032 002C     		cmp	r4, #0
 9090 0034 EFD0     		beq	.L696
4734:Src/ff.c      **** 			}
 9091              		.loc 1 4734 14 is_stmt 1 discriminator 1 view .LVU3103
 9092 0036 2146     		mov	r1, r4
 9093 0038 02A8     		add	r0, sp, #8
 9094              	.LVL1074:
4734:Src/ff.c      **** 			}
 9095              		.loc 1 4734 14 is_stmt 0 discriminator 1 view .LVU3104
 9096 003a FFF7FEFF 		bl	get_fileinfo
 9097              	.LVL1075:
 9098 003e EAE7     		b	.L696
 9099              	.LVL1076:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 286


 9100              	.L697:
4732:Src/ff.c      **** 			} else {							/* Found an object */
 9101              		.loc 1 4732 9 view .LVU3105
 9102 0040 0625     		movs	r5, #6
 9103 0042 E8E7     		b	.L696
 9104              		.cfi_endproc
 9105              	.LFE49:
 9107              		.section	.text.f_getfree,"ax",%progbits
 9108              		.align	1
 9109              		.global	f_getfree
 9110              		.syntax unified
 9111              		.thumb
 9112              		.thumb_func
 9113              		.fpu softvfp
 9115              	f_getfree:
 9116              	.LVL1077:
 9117              	.LFB50:
4742:Src/ff.c      **** 
4743:Src/ff.c      **** 
4744:Src/ff.c      **** 
4745:Src/ff.c      **** #if !FF_FS_READONLY
4746:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4747:Src/ff.c      **** /* Get Number of Free Clusters                                           */
4748:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4749:Src/ff.c      **** 
4750:Src/ff.c      **** FRESULT f_getfree (
4751:Src/ff.c      **** 	const TCHAR* path,	/* Logical drive number */
4752:Src/ff.c      **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4753:Src/ff.c      **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
4754:Src/ff.c      **** )
4755:Src/ff.c      **** {
 9118              		.loc 1 4755 1 is_stmt 1 view -0
 9119              		.cfi_startproc
 9120              		@ args = 0, pretend = 0, frame = 32
 9121              		@ frame_needed = 0, uses_anonymous_args = 0
 9122              		.loc 1 4755 1 is_stmt 0 view .LVU3107
 9123 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 9124              	.LCFI86:
 9125              		.cfi_def_cfa_offset 32
 9126              		.cfi_offset 4, -32
 9127              		.cfi_offset 5, -28
 9128              		.cfi_offset 6, -24
 9129              		.cfi_offset 7, -20
 9130              		.cfi_offset 8, -16
 9131              		.cfi_offset 9, -12
 9132              		.cfi_offset 10, -8
 9133              		.cfi_offset 14, -4
 9134 0004 88B0     		sub	sp, sp, #32
 9135              	.LCFI87:
 9136              		.cfi_def_cfa_offset 64
 9137 0006 0190     		str	r0, [sp, #4]
 9138 0008 0F46     		mov	r7, r1
 9139 000a 1446     		mov	r4, r2
4756:Src/ff.c      **** 	FRESULT res;
 9140              		.loc 1 4756 2 is_stmt 1 view .LVU3108
4757:Src/ff.c      **** 	FATFS *fs;
 9141              		.loc 1 4757 2 view .LVU3109
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 287


4758:Src/ff.c      **** 	DWORD nfree, clst, stat;
 9142              		.loc 1 4758 2 view .LVU3110
4759:Src/ff.c      **** 	LBA_t sect;
 9143              		.loc 1 4759 2 view .LVU3111
4760:Src/ff.c      **** 	UINT i;
 9144              		.loc 1 4760 2 view .LVU3112
4761:Src/ff.c      **** 	FFOBJID obj;
 9145              		.loc 1 4761 2 view .LVU3113
4762:Src/ff.c      **** 
4763:Src/ff.c      **** 
4764:Src/ff.c      **** 	/* Get logical drive */
4765:Src/ff.c      **** 	res = mount_volume(&path, &fs, 0);
 9146              		.loc 1 4765 2 view .LVU3114
 9147              		.loc 1 4765 8 is_stmt 0 view .LVU3115
 9148 000c 0022     		movs	r2, #0
 9149              	.LVL1078:
 9150              		.loc 1 4765 8 view .LVU3116
 9151 000e 07A9     		add	r1, sp, #28
 9152              	.LVL1079:
 9153              		.loc 1 4765 8 view .LVU3117
 9154 0010 01A8     		add	r0, sp, #4
 9155              	.LVL1080:
 9156              		.loc 1 4765 8 view .LVU3118
 9157 0012 FFF7FEFF 		bl	mount_volume
 9158              	.LVL1081:
4766:Src/ff.c      **** 	if (res == FR_OK) {
 9159              		.loc 1 4766 2 is_stmt 1 view .LVU3119
 9160              		.loc 1 4766 5 is_stmt 0 view .LVU3120
 9161 0016 8046     		mov	r8, r0
 9162 0018 38B9     		cbnz	r0, .L701
4767:Src/ff.c      **** 		*fatfs = fs;				/* Return ptr to the fs object */
 9163              		.loc 1 4767 3 is_stmt 1 view .LVU3121
 9164              		.loc 1 4767 10 is_stmt 0 view .LVU3122
 9165 001a 079B     		ldr	r3, [sp, #28]
 9166 001c 2360     		str	r3, [r4]
4768:Src/ff.c      **** 		/* If free_clst is valid, return it without full FAT scan */
4769:Src/ff.c      **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 9167              		.loc 1 4769 3 is_stmt 1 view .LVU3123
 9168              		.loc 1 4769 9 is_stmt 0 view .LVU3124
 9169 001e 5A69     		ldr	r2, [r3, #20]
 9170              		.loc 1 4769 26 view .LVU3125
 9171 0020 9D69     		ldr	r5, [r3, #24]
 9172              		.loc 1 4769 37 view .LVU3126
 9173 0022 A91E     		subs	r1, r5, #2
 9174              		.loc 1 4769 6 view .LVU3127
 9175 0024 8A42     		cmp	r2, r1
 9176 0026 04D8     		bhi	.L702
4770:Src/ff.c      **** 			*nclst = fs->free_clst;
 9177              		.loc 1 4770 4 is_stmt 1 view .LVU3128
 9178              		.loc 1 4770 11 is_stmt 0 view .LVU3129
 9179 0028 3A60     		str	r2, [r7]
 9180              	.LVL1082:
 9181              	.L701:
4771:Src/ff.c      **** 		} else {
4772:Src/ff.c      **** 			/* Scan FAT to obtain number of free clusters */
4773:Src/ff.c      **** 			nfree = 0;
4774:Src/ff.c      **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 288


4775:Src/ff.c      **** 				clst = 2; obj.fs = fs;
4776:Src/ff.c      **** 				do {
4777:Src/ff.c      **** 					stat = get_fat(&obj, clst);
4778:Src/ff.c      **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4779:Src/ff.c      **** 					if (stat == 1) { res = FR_INT_ERR; break; }
4780:Src/ff.c      **** 					if (stat == 0) nfree++;
4781:Src/ff.c      **** 				} while (++clst < fs->n_fatent);
4782:Src/ff.c      **** 			} else {
4783:Src/ff.c      **** #if FF_FS_EXFAT
4784:Src/ff.c      **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
4785:Src/ff.c      **** 					BYTE bm;
4786:Src/ff.c      **** 					UINT b;
4787:Src/ff.c      **** 
4788:Src/ff.c      **** 					clst = fs->n_fatent - 2;	/* Number of clusters */
4789:Src/ff.c      **** 					sect = fs->bitbase;			/* Bitmap sector */
4790:Src/ff.c      **** 					i = 0;						/* Offset in the sector */
4791:Src/ff.c      **** 					do {	/* Counts numbuer of bits with zero in the bitmap */
4792:Src/ff.c      **** 						if (i == 0) {
4793:Src/ff.c      **** 							res = move_window(fs, sect++);
4794:Src/ff.c      **** 							if (res != FR_OK) break;
4795:Src/ff.c      **** 						}
4796:Src/ff.c      **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4797:Src/ff.c      **** 							if (!(bm & 1)) nfree++;
4798:Src/ff.c      **** 							bm >>= 1;
4799:Src/ff.c      **** 						}
4800:Src/ff.c      **** 						i = (i + 1) % SS(fs);
4801:Src/ff.c      **** 					} while (clst);
4802:Src/ff.c      **** 				} else
4803:Src/ff.c      **** #endif
4804:Src/ff.c      **** 				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
4805:Src/ff.c      **** 					clst = fs->n_fatent;	/* Number of entries */
4806:Src/ff.c      **** 					sect = fs->fatbase;		/* Top of the FAT */
4807:Src/ff.c      **** 					i = 0;					/* Offset in the sector */
4808:Src/ff.c      **** 					do {	/* Counts numbuer of entries with zero in the FAT */
4809:Src/ff.c      **** 						if (i == 0) {
4810:Src/ff.c      **** 							res = move_window(fs, sect++);
4811:Src/ff.c      **** 							if (res != FR_OK) break;
4812:Src/ff.c      **** 						}
4813:Src/ff.c      **** 						if (fs->fs_type == FS_FAT16) {
4814:Src/ff.c      **** 							if (ld_word(fs->win + i) == 0) nfree++;
4815:Src/ff.c      **** 							i += 2;
4816:Src/ff.c      **** 						} else {
4817:Src/ff.c      **** 							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
4818:Src/ff.c      **** 							i += 4;
4819:Src/ff.c      **** 						}
4820:Src/ff.c      **** 						i %= SS(fs);
4821:Src/ff.c      **** 					} while (--clst);
4822:Src/ff.c      **** 				}
4823:Src/ff.c      **** 			}
4824:Src/ff.c      **** 			if (res == FR_OK) {		/* Update parameters if succeeded */
4825:Src/ff.c      **** 				*nclst = nfree;			/* Return the free clusters */
4826:Src/ff.c      **** 				fs->free_clst = nfree;	/* Now free_clst is valid */
4827:Src/ff.c      **** 				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
4828:Src/ff.c      **** 			}
4829:Src/ff.c      **** 		}
4830:Src/ff.c      **** 	}
4831:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 289


4832:Src/ff.c      **** 	LEAVE_FF(fs, res);
 9182              		.loc 1 4832 2 is_stmt 1 view .LVU3130
4833:Src/ff.c      **** }
 9183              		.loc 1 4833 1 is_stmt 0 view .LVU3131
 9184 002a 4046     		mov	r0, r8
 9185 002c 08B0     		add	sp, sp, #32
 9186              	.LCFI88:
 9187              		.cfi_remember_state
 9188              		.cfi_def_cfa_offset 32
 9189              		@ sp needed
 9190 002e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 9191              	.LVL1083:
 9192              	.L702:
 9193              	.LCFI89:
 9194              		.cfi_restore_state
4773:Src/ff.c      **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 9195              		.loc 1 4773 4 is_stmt 1 view .LVU3132
4774:Src/ff.c      **** 				clst = 2; obj.fs = fs;
 9196              		.loc 1 4774 4 view .LVU3133
4774:Src/ff.c      **** 				clst = 2; obj.fs = fs;
 9197              		.loc 1 4774 10 is_stmt 0 view .LVU3134
 9198 0032 93F80090 		ldrb	r9, [r3]	@ zero_extendqisi2
4774:Src/ff.c      **** 				clst = 2; obj.fs = fs;
 9199              		.loc 1 4774 7 view .LVU3135
 9200 0036 B9F1010F 		cmp	r9, #1
 9201 003a 04D0     		beq	.L716
4805:Src/ff.c      **** 					sect = fs->fatbase;		/* Top of the FAT */
 9202              		.loc 1 4805 6 is_stmt 1 view .LVU3136
 9203              	.LVL1084:
4806:Src/ff.c      **** 					i = 0;					/* Offset in the sector */
 9204              		.loc 1 4806 6 view .LVU3137
4806:Src/ff.c      **** 					i = 0;					/* Offset in the sector */
 9205              		.loc 1 4806 11 is_stmt 0 view .LVU3138
 9206 003c D3F82490 		ldr	r9, [r3, #36]
 9207              	.LVL1085:
4807:Src/ff.c      **** 					do {	/* Counts numbuer of entries with zero in the FAT */
 9208              		.loc 1 4807 6 is_stmt 1 view .LVU3139
4807:Src/ff.c      **** 					do {	/* Counts numbuer of entries with zero in the FAT */
 9209              		.loc 1 4807 8 is_stmt 0 view .LVU3140
 9210 0040 0024     		movs	r4, #0
 9211              	.LVL1086:
4773:Src/ff.c      **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 9212              		.loc 1 4773 10 view .LVU3141
 9213 0042 2646     		mov	r6, r4
 9214 0044 2CE0     		b	.L712
 9215              	.LVL1087:
 9216              	.L716:
4775:Src/ff.c      **** 				do {
 9217              		.loc 1 4775 5 is_stmt 1 view .LVU3142
4775:Src/ff.c      **** 				do {
 9218              		.loc 1 4775 15 view .LVU3143
4775:Src/ff.c      **** 				do {
 9219              		.loc 1 4775 22 is_stmt 0 view .LVU3144
 9220 0046 0393     		str	r3, [sp, #12]
4775:Src/ff.c      **** 				do {
 9221              		.loc 1 4775 10 view .LVU3145
 9222 0048 0224     		movs	r4, #2
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 290


 9223              	.LVL1088:
4773:Src/ff.c      **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 9224              		.loc 1 4773 10 view .LVU3146
 9225 004a 0026     		movs	r6, #0
 9226 004c 04E0     		b	.L706
 9227              	.LVL1089:
 9228              	.L705:
4781:Src/ff.c      **** 			} else {
 9229              		.loc 1 4781 13 is_stmt 1 view .LVU3147
4781:Src/ff.c      **** 			} else {
 9230              		.loc 1 4781 5 is_stmt 0 view .LVU3148
 9231 004e 0134     		adds	r4, r4, #1
 9232              	.LVL1090:
4781:Src/ff.c      **** 			} else {
 9233              		.loc 1 4781 25 view .LVU3149
 9234 0050 079B     		ldr	r3, [sp, #28]
 9235 0052 9B69     		ldr	r3, [r3, #24]
4781:Src/ff.c      **** 			} else {
 9236              		.loc 1 4781 5 view .LVU3150
 9237 0054 A342     		cmp	r3, r4
 9238 0056 33D9     		bls	.L704
 9239              	.LVL1091:
 9240              	.L706:
4776:Src/ff.c      **** 					stat = get_fat(&obj, clst);
 9241              		.loc 1 4776 5 is_stmt 1 view .LVU3151
4777:Src/ff.c      **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 9242              		.loc 1 4777 6 view .LVU3152
4777:Src/ff.c      **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 9243              		.loc 1 4777 13 is_stmt 0 view .LVU3153
 9244 0058 2146     		mov	r1, r4
 9245 005a 03A8     		add	r0, sp, #12
 9246 005c FFF7FEFF 		bl	get_fat
 9247              	.LVL1092:
4778:Src/ff.c      **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 9248              		.loc 1 4778 6 is_stmt 1 view .LVU3154
4778:Src/ff.c      **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 9249              		.loc 1 4778 9 is_stmt 0 view .LVU3155
 9250 0060 B0F1FF3F 		cmp	r0, #-1
 9251 0064 2BD0     		beq	.L713
4779:Src/ff.c      **** 					if (stat == 0) nfree++;
 9252              		.loc 1 4779 6 is_stmt 1 view .LVU3156
4779:Src/ff.c      **** 					if (stat == 0) nfree++;
 9253              		.loc 1 4779 9 is_stmt 0 view .LVU3157
 9254 0066 0128     		cmp	r0, #1
 9255 0068 35D0     		beq	.L714
4780:Src/ff.c      **** 				} while (++clst < fs->n_fatent);
 9256              		.loc 1 4780 6 is_stmt 1 view .LVU3158
4780:Src/ff.c      **** 				} while (++clst < fs->n_fatent);
 9257              		.loc 1 4780 9 is_stmt 0 view .LVU3159
 9258 006a 0028     		cmp	r0, #0
 9259 006c EFD1     		bne	.L705
4780:Src/ff.c      **** 				} while (++clst < fs->n_fatent);
 9260              		.loc 1 4780 21 is_stmt 1 discriminator 1 view .LVU3160
4780:Src/ff.c      **** 				} while (++clst < fs->n_fatent);
 9261              		.loc 1 4780 26 is_stmt 0 discriminator 1 view .LVU3161
 9262 006e 0136     		adds	r6, r6, #1
 9263              	.LVL1093:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 291


4780:Src/ff.c      **** 				} while (++clst < fs->n_fatent);
 9264              		.loc 1 4780 26 discriminator 1 view .LVU3162
 9265 0070 EDE7     		b	.L705
 9266              	.LVL1094:
 9267              	.L717:
4810:Src/ff.c      **** 							if (res != FR_OK) break;
 9268              		.loc 1 4810 8 is_stmt 1 view .LVU3163
4810:Src/ff.c      **** 							if (res != FR_OK) break;
 9269              		.loc 1 4810 14 is_stmt 0 view .LVU3164
 9270 0072 09F1010A 		add	r10, r9, #1
 9271              	.LVL1095:
4810:Src/ff.c      **** 							if (res != FR_OK) break;
 9272              		.loc 1 4810 14 view .LVU3165
 9273 0076 4946     		mov	r1, r9
 9274 0078 0798     		ldr	r0, [sp, #28]
 9275 007a FFF7FEFF 		bl	move_window
 9276              	.LVL1096:
4811:Src/ff.c      **** 						}
 9277              		.loc 1 4811 8 is_stmt 1 view .LVU3166
4811:Src/ff.c      **** 						}
 9278              		.loc 1 4811 11 is_stmt 0 view .LVU3167
 9279 007e 8046     		mov	r8, r0
 9280 0080 F0B9     		cbnz	r0, .L704
4810:Src/ff.c      **** 							if (res != FR_OK) break;
 9281              		.loc 1 4810 14 view .LVU3168
 9282 0082 D146     		mov	r9, r10
 9283 0084 0EE0     		b	.L707
 9284              	.LVL1097:
 9285              	.L718:
4814:Src/ff.c      **** 							i += 2;
 9286              		.loc 1 4814 8 is_stmt 1 view .LVU3169
4814:Src/ff.c      **** 							i += 2;
 9287              		.loc 1 4814 20 is_stmt 0 view .LVU3170
 9288 0086 3430     		adds	r0, r0, #52
4814:Src/ff.c      **** 							i += 2;
 9289              		.loc 1 4814 12 view .LVU3171
 9290 0088 2044     		add	r0, r0, r4
 9291 008a FFF7FEFF 		bl	ld_word
 9292              	.LVL1098:
4814:Src/ff.c      **** 							i += 2;
 9293              		.loc 1 4814 11 view .LVU3172
 9294 008e 00B9     		cbnz	r0, .L709
4814:Src/ff.c      **** 							i += 2;
 9295              		.loc 1 4814 39 is_stmt 1 discriminator 1 view .LVU3173
4814:Src/ff.c      **** 							i += 2;
 9296              		.loc 1 4814 44 is_stmt 0 discriminator 1 view .LVU3174
 9297 0090 0136     		adds	r6, r6, #1
 9298              	.LVL1099:
 9299              	.L709:
4815:Src/ff.c      **** 						} else {
 9300              		.loc 1 4815 8 is_stmt 1 view .LVU3175
4815:Src/ff.c      **** 						} else {
 9301              		.loc 1 4815 10 is_stmt 0 view .LVU3176
 9302 0092 0234     		adds	r4, r4, #2
 9303              	.LVL1100:
4815:Src/ff.c      **** 						} else {
 9304              		.loc 1 4815 10 view .LVU3177
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 292


 9305 0094 00E0     		b	.L710
 9306              	.L711:
4818:Src/ff.c      **** 						}
 9307              		.loc 1 4818 8 is_stmt 1 view .LVU3178
4818:Src/ff.c      **** 						}
 9308              		.loc 1 4818 10 is_stmt 0 view .LVU3179
 9309 0096 0434     		adds	r4, r4, #4
 9310              	.LVL1101:
 9311              	.L710:
4820:Src/ff.c      **** 					} while (--clst);
 9312              		.loc 1 4820 7 is_stmt 1 view .LVU3180
4820:Src/ff.c      **** 					} while (--clst);
 9313              		.loc 1 4820 9 is_stmt 0 view .LVU3181
 9314 0098 C4F30804 		ubfx	r4, r4, #0, #9
 9315              	.LVL1102:
4821:Src/ff.c      **** 				}
 9316              		.loc 1 4821 14 is_stmt 1 view .LVU3182
4821:Src/ff.c      **** 				}
 9317              		.loc 1 4821 6 is_stmt 0 view .LVU3183
 9318 009c 013D     		subs	r5, r5, #1
 9319              	.LVL1103:
4821:Src/ff.c      **** 				}
 9320              		.loc 1 4821 6 view .LVU3184
 9321 009e 0FD0     		beq	.L704
 9322              	.LVL1104:
 9323              	.L712:
4808:Src/ff.c      **** 						if (i == 0) {
 9324              		.loc 1 4808 6 is_stmt 1 view .LVU3185
4809:Src/ff.c      **** 							res = move_window(fs, sect++);
 9325              		.loc 1 4809 7 view .LVU3186
4809:Src/ff.c      **** 							res = move_window(fs, sect++);
 9326              		.loc 1 4809 10 is_stmt 0 view .LVU3187
 9327 00a0 002C     		cmp	r4, #0
 9328 00a2 E6D0     		beq	.L717
 9329              	.LVL1105:
 9330              	.L707:
4813:Src/ff.c      **** 							if (ld_word(fs->win + i) == 0) nfree++;
 9331              		.loc 1 4813 7 is_stmt 1 view .LVU3188
4813:Src/ff.c      **** 							if (ld_word(fs->win + i) == 0) nfree++;
 9332              		.loc 1 4813 13 is_stmt 0 view .LVU3189
 9333 00a4 0798     		ldr	r0, [sp, #28]
 9334 00a6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
4813:Src/ff.c      **** 							if (ld_word(fs->win + i) == 0) nfree++;
 9335              		.loc 1 4813 10 view .LVU3190
 9336 00a8 022B     		cmp	r3, #2
 9337 00aa ECD0     		beq	.L718
4817:Src/ff.c      **** 							i += 4;
 9338              		.loc 1 4817 8 is_stmt 1 view .LVU3191
4817:Src/ff.c      **** 							i += 4;
 9339              		.loc 1 4817 22 is_stmt 0 view .LVU3192
 9340 00ac 3430     		adds	r0, r0, #52
4817:Src/ff.c      **** 							i += 4;
 9341              		.loc 1 4817 13 view .LVU3193
 9342 00ae 2044     		add	r0, r0, r4
 9343 00b0 FFF7FEFF 		bl	ld_dword
 9344              	.LVL1106:
4817:Src/ff.c      **** 							i += 4;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 293


 9345              		.loc 1 4817 11 view .LVU3194
 9346 00b4 30F07043 		bics	r3, r0, #-268435456
 9347 00b8 EDD1     		bne	.L711
4817:Src/ff.c      **** 							i += 4;
 9348              		.loc 1 4817 55 is_stmt 1 discriminator 1 view .LVU3195
4817:Src/ff.c      **** 							i += 4;
 9349              		.loc 1 4817 60 is_stmt 0 discriminator 1 view .LVU3196
 9350 00ba 0136     		adds	r6, r6, #1
 9351              	.LVL1107:
4817:Src/ff.c      **** 							i += 4;
 9352              		.loc 1 4817 60 discriminator 1 view .LVU3197
 9353 00bc EBE7     		b	.L711
 9354              	.LVL1108:
 9355              	.L713:
4778:Src/ff.c      **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 9356              		.loc 1 4778 36 view .LVU3198
 9357 00be C846     		mov	r8, r9
 9358              	.LVL1109:
 9359              	.L704:
4824:Src/ff.c      **** 				*nclst = nfree;			/* Return the free clusters */
 9360              		.loc 1 4824 4 is_stmt 1 view .LVU3199
4824:Src/ff.c      **** 				*nclst = nfree;			/* Return the free clusters */
 9361              		.loc 1 4824 7 is_stmt 0 view .LVU3200
 9362 00c0 B8F1000F 		cmp	r8, #0
 9363 00c4 B1D1     		bne	.L701
4825:Src/ff.c      **** 				fs->free_clst = nfree;	/* Now free_clst is valid */
 9364              		.loc 1 4825 5 is_stmt 1 view .LVU3201
4825:Src/ff.c      **** 				fs->free_clst = nfree;	/* Now free_clst is valid */
 9365              		.loc 1 4825 12 is_stmt 0 view .LVU3202
 9366 00c6 3E60     		str	r6, [r7]
4826:Src/ff.c      **** 				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 9367              		.loc 1 4826 5 is_stmt 1 view .LVU3203
4826:Src/ff.c      **** 				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 9368              		.loc 1 4826 7 is_stmt 0 view .LVU3204
 9369 00c8 079B     		ldr	r3, [sp, #28]
4826:Src/ff.c      **** 				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 9370              		.loc 1 4826 19 view .LVU3205
 9371 00ca 5E61     		str	r6, [r3, #20]
4827:Src/ff.c      **** 			}
 9372              		.loc 1 4827 5 is_stmt 1 view .LVU3206
4827:Src/ff.c      **** 			}
 9373              		.loc 1 4827 18 is_stmt 0 view .LVU3207
 9374 00cc 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 9375 00ce 42F00102 		orr	r2, r2, #1
 9376 00d2 1A71     		strb	r2, [r3, #4]
 9377 00d4 A9E7     		b	.L701
 9378              	.LVL1110:
 9379              	.L714:
4779:Src/ff.c      **** 					if (stat == 0) nfree++;
 9380              		.loc 1 4779 27 view .LVU3208
 9381 00d6 4FF00208 		mov	r8, #2
 9382 00da F1E7     		b	.L704
 9383              		.cfi_endproc
 9384              	.LFE50:
 9386              		.section	.text.f_truncate,"ax",%progbits
 9387              		.align	1
 9388              		.global	f_truncate
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 294


 9389              		.syntax unified
 9390              		.thumb
 9391              		.thumb_func
 9392              		.fpu softvfp
 9394              	f_truncate:
 9395              	.LVL1111:
 9396              	.LFB51:
4834:Src/ff.c      **** 
4835:Src/ff.c      **** 
4836:Src/ff.c      **** 
4837:Src/ff.c      **** 
4838:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4839:Src/ff.c      **** /* Truncate File                                                         */
4840:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4841:Src/ff.c      **** 
4842:Src/ff.c      **** FRESULT f_truncate (
4843:Src/ff.c      **** 	FIL* fp		/* Pointer to the file object */
4844:Src/ff.c      **** )
4845:Src/ff.c      **** {
 9397              		.loc 1 4845 1 is_stmt 1 view -0
 9398              		.cfi_startproc
 9399              		@ args = 0, pretend = 0, frame = 8
 9400              		@ frame_needed = 0, uses_anonymous_args = 0
 9401              		.loc 1 4845 1 is_stmt 0 view .LVU3210
 9402 0000 30B5     		push	{r4, r5, lr}
 9403              	.LCFI90:
 9404              		.cfi_def_cfa_offset 12
 9405              		.cfi_offset 4, -12
 9406              		.cfi_offset 5, -8
 9407              		.cfi_offset 14, -4
 9408 0002 83B0     		sub	sp, sp, #12
 9409              	.LCFI91:
 9410              		.cfi_def_cfa_offset 24
 9411 0004 0446     		mov	r4, r0
4846:Src/ff.c      **** 	FRESULT res;
 9412              		.loc 1 4846 2 is_stmt 1 view .LVU3211
4847:Src/ff.c      **** 	FATFS *fs;
 9413              		.loc 1 4847 2 view .LVU3212
4848:Src/ff.c      **** 	DWORD ncl;
 9414              		.loc 1 4848 2 view .LVU3213
4849:Src/ff.c      **** 
4850:Src/ff.c      **** 
4851:Src/ff.c      **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 9415              		.loc 1 4851 2 view .LVU3214
 9416              		.loc 1 4851 8 is_stmt 0 view .LVU3215
 9417 0006 01A9     		add	r1, sp, #4
 9418 0008 FFF7FEFF 		bl	validate
 9419              	.LVL1112:
4852:Src/ff.c      **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 9420              		.loc 1 4852 2 is_stmt 1 view .LVU3216
 9421              		.loc 1 4852 5 is_stmt 0 view .LVU3217
 9422 000c 0546     		mov	r5, r0
 9423 000e E8B9     		cbnz	r0, .L722
 9424              		.loc 1 4852 27 discriminator 2 view .LVU3218
 9425 0010 657C     		ldrb	r5, [r4, #17]	@ zero_extendqisi2
 9426              	.LVL1113:
 9427              		.loc 1 4852 19 discriminator 2 view .LVU3219
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 295


 9428 0012 DDB9     		cbnz	r5, .L722
4853:Src/ff.c      **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 9429              		.loc 1 4853 2 is_stmt 1 view .LVU3220
 9430              		.loc 1 4853 10 is_stmt 0 view .LVU3221
 9431 0014 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 9432              		.loc 1 4853 5 view .LVU3222
 9433 0016 13F0020F 		tst	r3, #2
 9434 001a 45D0     		beq	.L728
4854:Src/ff.c      **** 
4855:Src/ff.c      **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 9435              		.loc 1 4855 2 is_stmt 1 view .LVU3223
 9436              		.loc 1 4855 8 is_stmt 0 view .LVU3224
 9437 001c 6369     		ldr	r3, [r4, #20]
 9438              		.loc 1 4855 24 view .LVU3225
 9439 001e E268     		ldr	r2, [r4, #12]
 9440              		.loc 1 4855 5 view .LVU3226
 9441 0020 9342     		cmp	r3, r2
 9442 0022 13D2     		bcs	.L722
4856:Src/ff.c      **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 9443              		.loc 1 4856 3 is_stmt 1 view .LVU3227
 9444              		.loc 1 4856 6 is_stmt 0 view .LVU3228
 9445 0024 ABB9     		cbnz	r3, .L723
4857:Src/ff.c      **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 9446              		.loc 1 4857 4 is_stmt 1 view .LVU3229
 9447              		.loc 1 4857 10 is_stmt 0 view .LVU3230
 9448 0026 0022     		movs	r2, #0
 9449 0028 A168     		ldr	r1, [r4, #8]
 9450 002a 2046     		mov	r0, r4
 9451 002c FFF7FEFF 		bl	remove_chain
 9452              	.LVL1114:
 9453 0030 0546     		mov	r5, r0
 9454              	.LVL1115:
4858:Src/ff.c      **** 			fp->obj.sclust = 0;
 9455              		.loc 1 4858 4 is_stmt 1 view .LVU3231
 9456              		.loc 1 4858 19 is_stmt 0 view .LVU3232
 9457 0032 0023     		movs	r3, #0
 9458 0034 A360     		str	r3, [r4, #8]
 9459              	.LVL1116:
 9460              	.L724:
4859:Src/ff.c      **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4860:Src/ff.c      **** 			ncl = get_fat(&fp->obj, fp->clust);
4861:Src/ff.c      **** 			res = FR_OK;
4862:Src/ff.c      **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
4863:Src/ff.c      **** 			if (ncl == 1) res = FR_INT_ERR;
4864:Src/ff.c      **** 			if (res == FR_OK && ncl < fs->n_fatent) {
4865:Src/ff.c      **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
4866:Src/ff.c      **** 			}
4867:Src/ff.c      **** 		}
4868:Src/ff.c      **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 9461              		.loc 1 4868 3 is_stmt 1 view .LVU3233
 9462              		.loc 1 4868 23 is_stmt 0 view .LVU3234
 9463 0036 6369     		ldr	r3, [r4, #20]
 9464              		.loc 1 4868 19 view .LVU3235
 9465 0038 E360     		str	r3, [r4, #12]
4869:Src/ff.c      **** 		fp->flag |= FA_MODIFIED;
 9466              		.loc 1 4869 3 is_stmt 1 view .LVU3236
 9467              		.loc 1 4869 12 is_stmt 0 view .LVU3237
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 296


 9468 003a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 9469 003c 43F04003 		orr	r3, r3, #64
 9470 0040 2374     		strb	r3, [r4, #16]
4870:Src/ff.c      **** #if !FF_FS_TINY
4871:Src/ff.c      **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 9471              		.loc 1 4871 3 is_stmt 1 view .LVU3238
 9472              		.loc 1 4871 6 is_stmt 0 view .LVU3239
 9473 0042 15B9     		cbnz	r5, .L726
 9474              		.loc 1 4871 20 discriminator 1 view .LVU3240
 9475 0044 13F0800F 		tst	r3, #128
 9476 0048 1DD1     		bne	.L733
 9477              	.L726:
4872:Src/ff.c      **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
4873:Src/ff.c      **** 				res = FR_DISK_ERR;
4874:Src/ff.c      **** 			} else {
4875:Src/ff.c      **** 				fp->flag &= (BYTE)~FA_DIRTY;
4876:Src/ff.c      **** 			}
4877:Src/ff.c      **** 		}
4878:Src/ff.c      **** #endif
4879:Src/ff.c      **** 		if (res != FR_OK) ABORT(fs, res);
 9478              		.loc 1 4879 3 is_stmt 1 view .LVU3241
 9479              		.loc 1 4879 6 is_stmt 0 view .LVU3242
 9480 004a 5DBB     		cbnz	r5, .L727
 9481              	.LVL1117:
 9482              	.L722:
4880:Src/ff.c      **** 	}
4881:Src/ff.c      **** 
4882:Src/ff.c      **** 	LEAVE_FF(fs, res);
4883:Src/ff.c      **** }
 9483              		.loc 1 4883 1 view .LVU3243
 9484 004c 2846     		mov	r0, r5
 9485 004e 03B0     		add	sp, sp, #12
 9486              	.LCFI92:
 9487              		.cfi_remember_state
 9488              		.cfi_def_cfa_offset 12
 9489              		@ sp needed
 9490 0050 30BD     		pop	{r4, r5, pc}
 9491              	.LVL1118:
 9492              	.L723:
 9493              	.LCFI93:
 9494              		.cfi_restore_state
4860:Src/ff.c      **** 			res = FR_OK;
 9495              		.loc 1 4860 4 is_stmt 1 view .LVU3244
4860:Src/ff.c      **** 			res = FR_OK;
 9496              		.loc 1 4860 10 is_stmt 0 view .LVU3245
 9497 0052 A169     		ldr	r1, [r4, #24]
 9498 0054 2046     		mov	r0, r4
 9499 0056 FFF7FEFF 		bl	get_fat
 9500              	.LVL1119:
4861:Src/ff.c      **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9501              		.loc 1 4861 4 is_stmt 1 view .LVU3246
4862:Src/ff.c      **** 			if (ncl == 1) res = FR_INT_ERR;
 9502              		.loc 1 4862 4 view .LVU3247
4862:Src/ff.c      **** 			if (ncl == 1) res = FR_INT_ERR;
 9503              		.loc 1 4862 7 is_stmt 0 view .LVU3248
 9504 005a B0F1FF3F 		cmp	r0, #-1
 9505 005e 0ED0     		beq	.L734
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 297


 9506              	.L725:
 9507              	.LVL1120:
4863:Src/ff.c      **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9508              		.loc 1 4863 4 is_stmt 1 view .LVU3249
4863:Src/ff.c      **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9509              		.loc 1 4863 7 is_stmt 0 view .LVU3250
 9510 0060 0128     		cmp	r0, #1
 9511 0062 0ED0     		beq	.L730
4864:Src/ff.c      **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9512              		.loc 1 4864 4 is_stmt 1 view .LVU3251
4864:Src/ff.c      **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9513              		.loc 1 4864 7 is_stmt 0 view .LVU3252
 9514 0064 002D     		cmp	r5, #0
 9515 0066 E6D1     		bne	.L724
4864:Src/ff.c      **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9516              		.loc 1 4864 32 discriminator 1 view .LVU3253
 9517 0068 019B     		ldr	r3, [sp, #4]
 9518 006a 9B69     		ldr	r3, [r3, #24]
4864:Src/ff.c      **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9519              		.loc 1 4864 21 discriminator 1 view .LVU3254
 9520 006c 8342     		cmp	r3, r0
 9521 006e E2D9     		bls	.L724
4865:Src/ff.c      **** 			}
 9522              		.loc 1 4865 5 is_stmt 1 view .LVU3255
4865:Src/ff.c      **** 			}
 9523              		.loc 1 4865 11 is_stmt 0 view .LVU3256
 9524 0070 A269     		ldr	r2, [r4, #24]
 9525 0072 0146     		mov	r1, r0
 9526 0074 2046     		mov	r0, r4
 9527              	.LVL1121:
4865:Src/ff.c      **** 			}
 9528              		.loc 1 4865 11 view .LVU3257
 9529 0076 FFF7FEFF 		bl	remove_chain
 9530              	.LVL1122:
4865:Src/ff.c      **** 			}
 9531              		.loc 1 4865 11 view .LVU3258
 9532 007a 0546     		mov	r5, r0
 9533              	.LVL1123:
4865:Src/ff.c      **** 			}
 9534              		.loc 1 4865 11 view .LVU3259
 9535 007c DBE7     		b	.L724
 9536              	.LVL1124:
 9537              	.L734:
4862:Src/ff.c      **** 			if (ncl == 1) res = FR_INT_ERR;
 9538              		.loc 1 4862 31 view .LVU3260
 9539 007e 0125     		movs	r5, #1
 9540 0080 EEE7     		b	.L725
 9541              	.LVL1125:
 9542              	.L730:
4863:Src/ff.c      **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9543              		.loc 1 4863 22 view .LVU3261
 9544 0082 0225     		movs	r5, #2
 9545              	.LVL1126:
4863:Src/ff.c      **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9546              		.loc 1 4863 22 view .LVU3262
 9547 0084 D7E7     		b	.L724
 9548              	.LVL1127:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 298


 9549              	.L733:
4872:Src/ff.c      **** 				res = FR_DISK_ERR;
 9550              		.loc 1 4872 4 is_stmt 1 view .LVU3263
4872:Src/ff.c      **** 				res = FR_DISK_ERR;
 9551              		.loc 1 4872 8 is_stmt 0 view .LVU3264
 9552 0086 0123     		movs	r3, #1
 9553 0088 E269     		ldr	r2, [r4, #28]
 9554 008a 04F12801 		add	r1, r4, #40
 9555 008e 0198     		ldr	r0, [sp, #4]
 9556 0090 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 9557 0092 FFF7FEFF 		bl	disk_write
 9558              	.LVL1128:
4872:Src/ff.c      **** 				res = FR_DISK_ERR;
 9559              		.loc 1 4872 7 view .LVU3265
 9560 0096 20B9     		cbnz	r0, .L731
4875:Src/ff.c      **** 			}
 9561              		.loc 1 4875 5 is_stmt 1 view .LVU3266
4875:Src/ff.c      **** 			}
 9562              		.loc 1 4875 14 is_stmt 0 view .LVU3267
 9563 0098 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 9564 009a 03F07F03 		and	r3, r3, #127
 9565 009e 2374     		strb	r3, [r4, #16]
 9566 00a0 D3E7     		b	.L726
 9567              	.L731:
4873:Src/ff.c      **** 			} else {
 9568              		.loc 1 4873 9 view .LVU3268
 9569 00a2 0125     		movs	r5, #1
 9570              	.LVL1129:
 9571              	.L727:
4879:Src/ff.c      **** 	}
 9572              		.loc 1 4879 21 is_stmt 1 discriminator 1 view .LVU3269
 9573 00a4 6574     		strb	r5, [r4, #17]
4879:Src/ff.c      **** 	}
 9574              		.loc 1 4879 21 discriminator 1 view .LVU3270
 9575 00a6 D1E7     		b	.L722
 9576              	.LVL1130:
 9577              	.L728:
4853:Src/ff.c      **** 
 9578              		.loc 1 4853 30 is_stmt 0 view .LVU3271
 9579 00a8 0725     		movs	r5, #7
 9580              	.LVL1131:
4853:Src/ff.c      **** 
 9581              		.loc 1 4853 30 view .LVU3272
 9582 00aa CFE7     		b	.L722
 9583              		.cfi_endproc
 9584              	.LFE51:
 9586              		.section	.text.f_unlink,"ax",%progbits
 9587              		.align	1
 9588              		.global	f_unlink
 9589              		.syntax unified
 9590              		.thumb
 9591              		.thumb_func
 9592              		.fpu softvfp
 9594              	f_unlink:
 9595              	.LVL1132:
 9596              	.LFB52:
4884:Src/ff.c      **** 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 299


4885:Src/ff.c      **** 
4886:Src/ff.c      **** 
4887:Src/ff.c      **** 
4888:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4889:Src/ff.c      **** /* Delete a File/Directory                                               */
4890:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4891:Src/ff.c      **** 
4892:Src/ff.c      **** FRESULT f_unlink (
4893:Src/ff.c      **** 	const TCHAR* path		/* Pointer to the file or directory path */
4894:Src/ff.c      **** )
4895:Src/ff.c      **** {
 9597              		.loc 1 4895 1 is_stmt 1 view -0
 9598              		.cfi_startproc
 9599              		@ args = 0, pretend = 0, frame = 112
 9600              		@ frame_needed = 0, uses_anonymous_args = 0
 9601              		.loc 1 4895 1 is_stmt 0 view .LVU3274
 9602 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 9603              	.LCFI94:
 9604              		.cfi_def_cfa_offset 20
 9605              		.cfi_offset 4, -20
 9606              		.cfi_offset 5, -16
 9607              		.cfi_offset 6, -12
 9608              		.cfi_offset 7, -8
 9609              		.cfi_offset 14, -4
 9610 0002 9DB0     		sub	sp, sp, #116
 9611              	.LCFI95:
 9612              		.cfi_def_cfa_offset 136
 9613 0004 0190     		str	r0, [sp, #4]
4896:Src/ff.c      **** 	FRESULT res;
 9614              		.loc 1 4896 2 is_stmt 1 view .LVU3275
4897:Src/ff.c      **** 	DIR dj, sdj;
 9615              		.loc 1 4897 2 view .LVU3276
4898:Src/ff.c      **** 	DWORD dclst = 0;
 9616              		.loc 1 4898 2 view .LVU3277
 9617              	.LVL1133:
4899:Src/ff.c      **** 	FATFS *fs;
 9618              		.loc 1 4899 2 view .LVU3278
4900:Src/ff.c      **** #if FF_FS_EXFAT
4901:Src/ff.c      **** 	FFOBJID obj;
4902:Src/ff.c      **** #endif
4903:Src/ff.c      **** 	DEF_NAMBUF
4904:Src/ff.c      **** 
4905:Src/ff.c      **** 
4906:Src/ff.c      **** 	/* Get logical drive */
4907:Src/ff.c      **** 	res = mount_volume(&path, &fs, FA_WRITE);
 9619              		.loc 1 4907 2 view .LVU3279
 9620              		.loc 1 4907 8 is_stmt 0 view .LVU3280
 9621 0006 0222     		movs	r2, #2
 9622 0008 03A9     		add	r1, sp, #12
 9623 000a 01A8     		add	r0, sp, #4
 9624              	.LVL1134:
 9625              		.loc 1 4907 8 view .LVU3281
 9626 000c FFF7FEFF 		bl	mount_volume
 9627              	.LVL1135:
4908:Src/ff.c      **** 	if (res == FR_OK) {
 9628              		.loc 1 4908 2 is_stmt 1 view .LVU3282
 9629              		.loc 1 4908 5 is_stmt 0 view .LVU3283
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 300


 9630 0010 0446     		mov	r4, r0
 9631 0012 10B1     		cbz	r0, .L744
 9632              	.LVL1136:
 9633              	.L736:
4909:Src/ff.c      **** 		dj.obj.fs = fs;
4910:Src/ff.c      **** 		INIT_NAMBUF(fs);
4911:Src/ff.c      **** 		res = follow_path(&dj, path);		/* Follow the file path */
4912:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4913:Src/ff.c      **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4914:Src/ff.c      **** 		}
4915:Src/ff.c      **** #if FF_FS_LOCK != 0
4916:Src/ff.c      **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4917:Src/ff.c      **** #endif
4918:Src/ff.c      **** 		if (res == FR_OK) {					/* The object is accessible */
4919:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
4920:Src/ff.c      **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4921:Src/ff.c      **** 			} else {
4922:Src/ff.c      **** 				if (dj.obj.attr & AM_RDO) {
4923:Src/ff.c      **** 					res = FR_DENIED;		/* Cannot remove R/O object */
4924:Src/ff.c      **** 				}
4925:Src/ff.c      **** 			}
4926:Src/ff.c      **** 			if (res == FR_OK) {
4927:Src/ff.c      **** #if FF_FS_EXFAT
4928:Src/ff.c      **** 				obj.fs = fs;
4929:Src/ff.c      **** 				if (fs->fs_type == FS_EXFAT) {
4930:Src/ff.c      **** 					init_alloc_info(fs, &obj);
4931:Src/ff.c      **** 					dclst = obj.sclust;
4932:Src/ff.c      **** 				} else
4933:Src/ff.c      **** #endif
4934:Src/ff.c      **** 				{
4935:Src/ff.c      **** 					dclst = ld_clust(fs, dj.dir);
4936:Src/ff.c      **** 				}
4937:Src/ff.c      **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
4938:Src/ff.c      **** #if FF_FS_RPATH != 0
4939:Src/ff.c      **** 					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
4940:Src/ff.c      **** 						res = FR_DENIED;
4941:Src/ff.c      **** 					} else
4942:Src/ff.c      **** #endif
4943:Src/ff.c      **** 					{
4944:Src/ff.c      **** 						sdj.obj.fs = fs;			/* Open the sub-directory */
4945:Src/ff.c      **** 						sdj.obj.sclust = dclst;
4946:Src/ff.c      **** #if FF_FS_EXFAT
4947:Src/ff.c      **** 						if (fs->fs_type == FS_EXFAT) {
4948:Src/ff.c      **** 							sdj.obj.objsize = obj.objsize;
4949:Src/ff.c      **** 							sdj.obj.stat = obj.stat;
4950:Src/ff.c      **** 						}
4951:Src/ff.c      **** #endif
4952:Src/ff.c      **** 						res = dir_sdi(&sdj, 0);
4953:Src/ff.c      **** 						if (res == FR_OK) {
4954:Src/ff.c      **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
4955:Src/ff.c      **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
4956:Src/ff.c      **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
4957:Src/ff.c      **** 						}
4958:Src/ff.c      **** 					}
4959:Src/ff.c      **** 				}
4960:Src/ff.c      **** 			}
4961:Src/ff.c      **** 			if (res == FR_OK) {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 301


4962:Src/ff.c      **** 				res = dir_remove(&dj);			/* Remove the directory entry */
4963:Src/ff.c      **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
4964:Src/ff.c      **** #if FF_FS_EXFAT
4965:Src/ff.c      **** 					res = remove_chain(&obj, dclst, 0);
4966:Src/ff.c      **** #else
4967:Src/ff.c      **** 					res = remove_chain(&dj.obj, dclst, 0);
4968:Src/ff.c      **** #endif
4969:Src/ff.c      **** 				}
4970:Src/ff.c      **** 				if (res == FR_OK) res = sync_fs(fs);
4971:Src/ff.c      **** 			}
4972:Src/ff.c      **** 		}
4973:Src/ff.c      **** 		FREE_NAMBUF();
 9634              		.loc 1 4973 16 is_stmt 1 view .LVU3284
4974:Src/ff.c      **** 	}
4975:Src/ff.c      **** 
4976:Src/ff.c      **** 	LEAVE_FF(fs, res);
 9635              		.loc 1 4976 2 view .LVU3285
4977:Src/ff.c      **** }
 9636              		.loc 1 4977 1 is_stmt 0 view .LVU3286
 9637 0014 2046     		mov	r0, r4
 9638 0016 1DB0     		add	sp, sp, #116
 9639              	.LCFI96:
 9640              		.cfi_remember_state
 9641              		.cfi_def_cfa_offset 20
 9642              		@ sp needed
 9643 0018 F0BD     		pop	{r4, r5, r6, r7, pc}
 9644              	.LVL1137:
 9645              	.L744:
 9646              	.LCFI97:
 9647              		.cfi_restore_state
4909:Src/ff.c      **** 		dj.obj.fs = fs;
 9648              		.loc 1 4909 3 is_stmt 1 view .LVU3287
4909:Src/ff.c      **** 		dj.obj.fs = fs;
 9649              		.loc 1 4909 13 is_stmt 0 view .LVU3288
 9650 001a 039B     		ldr	r3, [sp, #12]
 9651 001c 1093     		str	r3, [sp, #64]
4910:Src/ff.c      **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9652              		.loc 1 4910 18 is_stmt 1 view .LVU3289
4911:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 9653              		.loc 1 4911 3 view .LVU3290
4911:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 9654              		.loc 1 4911 9 is_stmt 0 view .LVU3291
 9655 001e 0199     		ldr	r1, [sp, #4]
 9656 0020 10A8     		add	r0, sp, #64
 9657              	.LVL1138:
4911:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 9658              		.loc 1 4911 9 view .LVU3292
 9659 0022 FFF7FEFF 		bl	follow_path
 9660              	.LVL1139:
4912:Src/ff.c      **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 9661              		.loc 1 4912 3 is_stmt 1 view .LVU3293
4918:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 9662              		.loc 1 4918 3 view .LVU3294
4918:Src/ff.c      **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 9663              		.loc 1 4918 6 is_stmt 0 view .LVU3295
 9664 0026 0446     		mov	r4, r0
 9665 0028 0028     		cmp	r0, #0
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 302


 9666 002a F3D1     		bne	.L736
4919:Src/ff.c      **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9667              		.loc 1 4919 4 is_stmt 1 view .LVU3296
4919:Src/ff.c      **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9668              		.loc 1 4919 8 is_stmt 0 view .LVU3297
 9669 002c 9DF96B30 		ldrsb	r3, [sp, #107]
4919:Src/ff.c      **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9670              		.loc 1 4919 7 view .LVU3298
 9671 0030 002B     		cmp	r3, #0
 9672 0032 1EDB     		blt	.L740
4922:Src/ff.c      **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9673              		.loc 1 4922 5 is_stmt 1 view .LVU3299
4922:Src/ff.c      **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9674              		.loc 1 4922 15 is_stmt 0 view .LVU3300
 9675 0034 9DF84660 		ldrb	r6, [sp, #70]	@ zero_extendqisi2
4922:Src/ff.c      **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9676              		.loc 1 4922 8 view .LVU3301
 9677 0038 16F0010F 		tst	r6, #1
 9678 003c 2AD1     		bne	.L741
 9679              	.LVL1140:
4926:Src/ff.c      **** #if FF_FS_EXFAT
 9680              		.loc 1 4926 4 is_stmt 1 view .LVU3302
4935:Src/ff.c      **** 				}
 9681              		.loc 1 4935 6 view .LVU3303
4935:Src/ff.c      **** 				}
 9682              		.loc 1 4935 14 is_stmt 0 view .LVU3304
 9683 003e 039F     		ldr	r7, [sp, #12]
 9684 0040 1799     		ldr	r1, [sp, #92]
 9685 0042 3846     		mov	r0, r7
 9686 0044 FFF7FEFF 		bl	ld_clust
 9687              	.LVL1141:
 9688 0048 0546     		mov	r5, r0
 9689              	.LVL1142:
4937:Src/ff.c      **** #if FF_FS_RPATH != 0
 9690              		.loc 1 4937 5 is_stmt 1 view .LVU3305
4937:Src/ff.c      **** #if FF_FS_RPATH != 0
 9691              		.loc 1 4937 8 is_stmt 0 view .LVU3306
 9692 004a 16F0100F 		tst	r6, #16
 9693 004e 12D0     		beq	.L737
4944:Src/ff.c      **** 						sdj.obj.sclust = dclst;
 9694              		.loc 1 4944 7 is_stmt 1 view .LVU3307
4944:Src/ff.c      **** 						sdj.obj.sclust = dclst;
 9695              		.loc 1 4944 18 is_stmt 0 view .LVU3308
 9696 0050 0497     		str	r7, [sp, #16]
4945:Src/ff.c      **** #if FF_FS_EXFAT
 9697              		.loc 1 4945 7 is_stmt 1 view .LVU3309
4945:Src/ff.c      **** #if FF_FS_EXFAT
 9698              		.loc 1 4945 22 is_stmt 0 view .LVU3310
 9699 0052 0690     		str	r0, [sp, #24]
4952:Src/ff.c      **** 						if (res == FR_OK) {
 9700              		.loc 1 4952 7 is_stmt 1 view .LVU3311
4952:Src/ff.c      **** 						if (res == FR_OK) {
 9701              		.loc 1 4952 13 is_stmt 0 view .LVU3312
 9702 0054 0021     		movs	r1, #0
 9703 0056 04A8     		add	r0, sp, #16
 9704              	.LVL1143:
4952:Src/ff.c      **** 						if (res == FR_OK) {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 303


 9705              		.loc 1 4952 13 view .LVU3313
 9706 0058 FFF7FEFF 		bl	dir_sdi
 9707              	.LVL1144:
4953:Src/ff.c      **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 9708              		.loc 1 4953 7 is_stmt 1 view .LVU3314
4953:Src/ff.c      **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 9709              		.loc 1 4953 10 is_stmt 0 view .LVU3315
 9710 005c 0446     		mov	r4, r0
 9711 005e 50B9     		cbnz	r0, .L737
4954:Src/ff.c      **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9712              		.loc 1 4954 8 is_stmt 1 view .LVU3316
4954:Src/ff.c      **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9713              		.loc 1 4954 14 is_stmt 0 view .LVU3317
 9714 0060 0021     		movs	r1, #0
 9715 0062 04A8     		add	r0, sp, #16
 9716              	.LVL1145:
4954:Src/ff.c      **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9717              		.loc 1 4954 14 view .LVU3318
 9718 0064 FFF7FEFF 		bl	dir_read
 9719              	.LVL1146:
4955:Src/ff.c      **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9720              		.loc 1 4955 8 is_stmt 1 view .LVU3319
4955:Src/ff.c      **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9721              		.loc 1 4955 11 is_stmt 0 view .LVU3320
 9722 0068 0446     		mov	r4, r0
 9723 006a B0B1     		cbz	r0, .L742
4956:Src/ff.c      **** 						}
 9724              		.loc 1 4956 8 is_stmt 1 view .LVU3321
4956:Src/ff.c      **** 						}
 9725              		.loc 1 4956 11 is_stmt 0 view .LVU3322
 9726 006c 0428     		cmp	r0, #4
 9727 006e 02D1     		bne	.L737
 9728 0070 03E0     		b	.L738
 9729              	.LVL1147:
 9730              	.L740:
4898:Src/ff.c      **** 	FATFS *fs;
 9731              		.loc 1 4898 8 view .LVU3323
 9732 0072 0025     		movs	r5, #0
4920:Src/ff.c      **** 			} else {
 9733              		.loc 1 4920 9 view .LVU3324
 9734 0074 0624     		movs	r4, #6
 9735              	.LVL1148:
 9736              	.L737:
4961:Src/ff.c      **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 9737              		.loc 1 4961 4 is_stmt 1 view .LVU3325
4961:Src/ff.c      **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 9738              		.loc 1 4961 7 is_stmt 0 view .LVU3326
 9739 0076 002C     		cmp	r4, #0
 9740 0078 CCD1     		bne	.L736
 9741              	.LVL1149:
 9742              	.L738:
4962:Src/ff.c      **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 9743              		.loc 1 4962 5 is_stmt 1 view .LVU3327
4962:Src/ff.c      **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 9744              		.loc 1 4962 11 is_stmt 0 view .LVU3328
 9745 007a 10A8     		add	r0, sp, #64
 9746 007c FFF7FEFF 		bl	dir_remove
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 304


 9747              	.LVL1150:
4963:Src/ff.c      **** #if FF_FS_EXFAT
 9748              		.loc 1 4963 5 is_stmt 1 view .LVU3329
4963:Src/ff.c      **** #if FF_FS_EXFAT
 9749              		.loc 1 4963 8 is_stmt 0 view .LVU3330
 9750 0080 0446     		mov	r4, r0
 9751 0082 00B9     		cbnz	r0, .L739
4963:Src/ff.c      **** #if FF_FS_EXFAT
 9752              		.loc 1 4963 22 discriminator 1 view .LVU3331
 9753 0084 5DB9     		cbnz	r5, .L745
 9754              	.LVL1151:
 9755              	.L739:
4970:Src/ff.c      **** 			}
 9756              		.loc 1 4970 5 is_stmt 1 view .LVU3332
4970:Src/ff.c      **** 			}
 9757              		.loc 1 4970 8 is_stmt 0 view .LVU3333
 9758 0086 002C     		cmp	r4, #0
 9759 0088 C4D1     		bne	.L736
4970:Src/ff.c      **** 			}
 9760              		.loc 1 4970 23 is_stmt 1 discriminator 1 view .LVU3334
4970:Src/ff.c      **** 			}
 9761              		.loc 1 4970 29 is_stmt 0 discriminator 1 view .LVU3335
 9762 008a 0398     		ldr	r0, [sp, #12]
 9763 008c FFF7FEFF 		bl	sync_fs
 9764              	.LVL1152:
 9765 0090 0446     		mov	r4, r0
 9766              	.LVL1153:
4970:Src/ff.c      **** 			}
 9767              		.loc 1 4970 29 discriminator 1 view .LVU3336
 9768 0092 BFE7     		b	.L736
 9769              	.LVL1154:
 9770              	.L741:
4898:Src/ff.c      **** 	FATFS *fs;
 9771              		.loc 1 4898 8 view .LVU3337
 9772 0094 0025     		movs	r5, #0
4923:Src/ff.c      **** 				}
 9773              		.loc 1 4923 10 view .LVU3338
 9774 0096 0724     		movs	r4, #7
 9775 0098 EDE7     		b	.L737
 9776              	.LVL1155:
 9777              	.L742:
4955:Src/ff.c      **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9778              		.loc 1 4955 30 view .LVU3339
 9779 009a 0724     		movs	r4, #7
 9780 009c EBE7     		b	.L737
 9781              	.LVL1156:
 9782              	.L745:
4967:Src/ff.c      **** #endif
 9783              		.loc 1 4967 6 is_stmt 1 view .LVU3340
4967:Src/ff.c      **** #endif
 9784              		.loc 1 4967 12 is_stmt 0 view .LVU3341
 9785 009e 0022     		movs	r2, #0
 9786 00a0 2946     		mov	r1, r5
 9787 00a2 10A8     		add	r0, sp, #64
 9788              	.LVL1157:
4967:Src/ff.c      **** #endif
 9789              		.loc 1 4967 12 view .LVU3342
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 305


 9790 00a4 FFF7FEFF 		bl	remove_chain
 9791              	.LVL1158:
 9792 00a8 0446     		mov	r4, r0
 9793              	.LVL1159:
4967:Src/ff.c      **** #endif
 9794              		.loc 1 4967 12 view .LVU3343
 9795 00aa ECE7     		b	.L739
 9796              		.cfi_endproc
 9797              	.LFE52:
 9799              		.section	.text.f_mkdir,"ax",%progbits
 9800              		.align	1
 9801              		.global	f_mkdir
 9802              		.syntax unified
 9803              		.thumb
 9804              		.thumb_func
 9805              		.fpu softvfp
 9807              	f_mkdir:
 9808              	.LVL1160:
 9809              	.LFB53:
4978:Src/ff.c      **** 
4979:Src/ff.c      **** 
4980:Src/ff.c      **** 
4981:Src/ff.c      **** 
4982:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4983:Src/ff.c      **** /* Create a Directory                                                    */
4984:Src/ff.c      **** /*-----------------------------------------------------------------------*/
4985:Src/ff.c      **** 
4986:Src/ff.c      **** FRESULT f_mkdir (
4987:Src/ff.c      **** 	const TCHAR* path		/* Pointer to the directory path */
4988:Src/ff.c      **** )
4989:Src/ff.c      **** {
 9810              		.loc 1 4989 1 is_stmt 1 view -0
 9811              		.cfi_startproc
 9812              		@ args = 0, pretend = 0, frame = 80
 9813              		@ frame_needed = 0, uses_anonymous_args = 0
 9814              		.loc 1 4989 1 is_stmt 0 view .LVU3345
 9815 0000 70B5     		push	{r4, r5, r6, lr}
 9816              	.LCFI98:
 9817              		.cfi_def_cfa_offset 16
 9818              		.cfi_offset 4, -16
 9819              		.cfi_offset 5, -12
 9820              		.cfi_offset 6, -8
 9821              		.cfi_offset 14, -4
 9822 0002 94B0     		sub	sp, sp, #80
 9823              	.LCFI99:
 9824              		.cfi_def_cfa_offset 96
 9825 0004 0190     		str	r0, [sp, #4]
4990:Src/ff.c      **** 	FRESULT res;
 9826              		.loc 1 4990 2 is_stmt 1 view .LVU3346
4991:Src/ff.c      **** 	DIR dj;
 9827              		.loc 1 4991 2 view .LVU3347
4992:Src/ff.c      **** 	FFOBJID sobj;
 9828              		.loc 1 4992 2 view .LVU3348
4993:Src/ff.c      **** 	FATFS *fs;
 9829              		.loc 1 4993 2 view .LVU3349
4994:Src/ff.c      **** 	DWORD dcl, pcl, tm;
 9830              		.loc 1 4994 2 view .LVU3350
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 306


4995:Src/ff.c      **** 	DEF_NAMBUF
4996:Src/ff.c      **** 
4997:Src/ff.c      **** 
4998:Src/ff.c      **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 9831              		.loc 1 4998 2 view .LVU3351
 9832              		.loc 1 4998 8 is_stmt 0 view .LVU3352
 9833 0006 0222     		movs	r2, #2
 9834 0008 03A9     		add	r1, sp, #12
 9835 000a 01A8     		add	r0, sp, #4
 9836              	.LVL1161:
 9837              		.loc 1 4998 8 view .LVU3353
 9838 000c FFF7FEFF 		bl	mount_volume
 9839              	.LVL1162:
4999:Src/ff.c      **** 	if (res == FR_OK) {
 9840              		.loc 1 4999 2 is_stmt 1 view .LVU3354
 9841              		.loc 1 4999 5 is_stmt 0 view .LVU3355
 9842 0010 0446     		mov	r4, r0
 9843 0012 10B1     		cbz	r0, .L758
 9844              	.LVL1163:
 9845              	.L747:
5000:Src/ff.c      **** 		dj.obj.fs = fs;
5001:Src/ff.c      **** 		INIT_NAMBUF(fs);
5002:Src/ff.c      **** 		res = follow_path(&dj, path);			/* Follow the file path */
5003:Src/ff.c      **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
5004:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
5005:Src/ff.c      **** 			res = FR_INVALID_NAME;
5006:Src/ff.c      **** 		}
5007:Src/ff.c      **** 		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
5008:Src/ff.c      **** 			sobj.fs = fs;						/* New object id to create a new chain */
5009:Src/ff.c      **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
5010:Src/ff.c      **** 			res = FR_OK;
5011:Src/ff.c      **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
5012:Src/ff.c      **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
5013:Src/ff.c      **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
5014:Src/ff.c      **** 			tm = GET_FATTIME();
5015:Src/ff.c      **** 			if (res == FR_OK) {
5016:Src/ff.c      **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
5017:Src/ff.c      **** 				if (res == FR_OK) {
5018:Src/ff.c      **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
5019:Src/ff.c      **** 						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
5020:Src/ff.c      **** 						fs->win[DIR_Name] = '.';
5021:Src/ff.c      **** 						fs->win[DIR_Attr] = AM_DIR;
5022:Src/ff.c      **** 						st_dword(fs->win + DIR_ModTime, tm);
5023:Src/ff.c      **** 						st_clust(fs, fs->win, dcl);
5024:Src/ff.c      **** 						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
5025:Src/ff.c      **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
5026:Src/ff.c      **** 						st_clust(fs, fs->win + SZDIRE, pcl);
5027:Src/ff.c      **** 						fs->wflag = 1;
5028:Src/ff.c      **** 					}
5029:Src/ff.c      **** 					res = dir_register(&dj);	/* Register the object to the parent directoy */
5030:Src/ff.c      **** 				}
5031:Src/ff.c      **** 			}
5032:Src/ff.c      **** 			if (res == FR_OK) {
5033:Src/ff.c      **** #if FF_FS_EXFAT
5034:Src/ff.c      **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
5035:Src/ff.c      **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
5036:Src/ff.c      **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 307


5037:Src/ff.c      **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be
5038:Src/ff.c      **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
5039:Src/ff.c      **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
5040:Src/ff.c      **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
5041:Src/ff.c      **** 					res = store_xdir(&dj);
5042:Src/ff.c      **** 				} else
5043:Src/ff.c      **** #endif
5044:Src/ff.c      **** 				{
5045:Src/ff.c      **** 					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
5046:Src/ff.c      **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
5047:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
5048:Src/ff.c      **** 					fs->wflag = 1;
5049:Src/ff.c      **** 				}
5050:Src/ff.c      **** 				if (res == FR_OK) {
5051:Src/ff.c      **** 					res = sync_fs(fs);
5052:Src/ff.c      **** 				}
5053:Src/ff.c      **** 			} else {
5054:Src/ff.c      **** 				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
5055:Src/ff.c      **** 			}
5056:Src/ff.c      **** 		}
5057:Src/ff.c      **** 		FREE_NAMBUF();
 9846              		.loc 1 5057 16 is_stmt 1 view .LVU3356
5058:Src/ff.c      **** 	}
5059:Src/ff.c      **** 
5060:Src/ff.c      **** 	LEAVE_FF(fs, res);
 9847              		.loc 1 5060 2 view .LVU3357
5061:Src/ff.c      **** }
 9848              		.loc 1 5061 1 is_stmt 0 view .LVU3358
 9849 0014 2046     		mov	r0, r4
 9850 0016 14B0     		add	sp, sp, #80
 9851              	.LCFI100:
 9852              		.cfi_remember_state
 9853              		.cfi_def_cfa_offset 16
 9854              		@ sp needed
 9855 0018 70BD     		pop	{r4, r5, r6, pc}
 9856              	.LVL1164:
 9857              	.L758:
 9858              	.LCFI101:
 9859              		.cfi_restore_state
5000:Src/ff.c      **** 		dj.obj.fs = fs;
 9860              		.loc 1 5000 3 is_stmt 1 view .LVU3359
5000:Src/ff.c      **** 		dj.obj.fs = fs;
 9861              		.loc 1 5000 13 is_stmt 0 view .LVU3360
 9862 001a 039B     		ldr	r3, [sp, #12]
 9863 001c 0893     		str	r3, [sp, #32]
5001:Src/ff.c      **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9864              		.loc 1 5001 18 is_stmt 1 view .LVU3361
5002:Src/ff.c      **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 9865              		.loc 1 5002 3 view .LVU3362
5002:Src/ff.c      **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 9866              		.loc 1 5002 9 is_stmt 0 view .LVU3363
 9867 001e 0199     		ldr	r1, [sp, #4]
 9868 0020 08A8     		add	r0, sp, #32
 9869              	.LVL1165:
5002:Src/ff.c      **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 9870              		.loc 1 5002 9 view .LVU3364
 9871 0022 FFF7FEFF 		bl	follow_path
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 308


 9872              	.LVL1166:
5003:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 9873              		.loc 1 5003 3 is_stmt 1 view .LVU3365
5003:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 9874              		.loc 1 5003 6 is_stmt 0 view .LVU3366
 9875 0026 0028     		cmp	r0, #0
 9876 0028 71D0     		beq	.L752
5004:Src/ff.c      **** 			res = FR_INVALID_NAME;
 9877              		.loc 1 5004 3 is_stmt 1 view .LVU3367
5007:Src/ff.c      **** 			sobj.fs = fs;						/* New object id to create a new chain */
 9878              		.loc 1 5007 3 view .LVU3368
5007:Src/ff.c      **** 			sobj.fs = fs;						/* New object id to create a new chain */
 9879              		.loc 1 5007 6 is_stmt 0 view .LVU3369
 9880 002a 0428     		cmp	r0, #4
 9881 002c 01D0     		beq	.L759
5002:Src/ff.c      **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 9882              		.loc 1 5002 9 view .LVU3370
 9883 002e 0446     		mov	r4, r0
 9884 0030 F0E7     		b	.L747
 9885              	.L759:
5008:Src/ff.c      **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 9886              		.loc 1 5008 4 is_stmt 1 view .LVU3371
5008:Src/ff.c      **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 9887              		.loc 1 5008 12 is_stmt 0 view .LVU3372
 9888 0032 039B     		ldr	r3, [sp, #12]
 9889 0034 0493     		str	r3, [sp, #16]
5009:Src/ff.c      **** 			res = FR_OK;
 9890              		.loc 1 5009 4 is_stmt 1 view .LVU3373
5009:Src/ff.c      **** 			res = FR_OK;
 9891              		.loc 1 5009 10 is_stmt 0 view .LVU3374
 9892 0036 0021     		movs	r1, #0
 9893 0038 04A8     		add	r0, sp, #16
 9894              	.LVL1167:
5009:Src/ff.c      **** 			res = FR_OK;
 9895              		.loc 1 5009 10 view .LVU3375
 9896 003a FFF7FEFF 		bl	create_chain
 9897              	.LVL1168:
5010:Src/ff.c      **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 9898              		.loc 1 5010 4 is_stmt 1 view .LVU3376
5011:Src/ff.c      **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 9899              		.loc 1 5011 4 view .LVU3377
5011:Src/ff.c      **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 9900              		.loc 1 5011 7 is_stmt 0 view .LVU3378
 9901 003e 0546     		mov	r5, r0
 9902 0040 00B9     		cbnz	r0, .L748
5011:Src/ff.c      **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 9903              		.loc 1 5011 22 view .LVU3379
 9904 0042 0724     		movs	r4, #7
 9905              	.L748:
 9906              	.LVL1169:
5012:Src/ff.c      **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 9907              		.loc 1 5012 4 is_stmt 1 view .LVU3380
5012:Src/ff.c      **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 9908              		.loc 1 5012 7 is_stmt 0 view .LVU3381
 9909 0044 012D     		cmp	r5, #1
 9910 0046 1AD0     		beq	.L760
 9911              	.LVL1170:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 309


 9912              	.L749:
5013:Src/ff.c      **** 			tm = GET_FATTIME();
 9913              		.loc 1 5013 4 is_stmt 1 view .LVU3382
5013:Src/ff.c      **** 			tm = GET_FATTIME();
 9914              		.loc 1 5013 7 is_stmt 0 view .LVU3383
 9915 0048 B5F1FF3F 		cmp	r5, #-1
 9916 004c 57D0     		beq	.L756
5014:Src/ff.c      **** 			if (res == FR_OK) {
 9917              		.loc 1 5014 4 is_stmt 1 view .LVU3384
 9918              	.LVL1171:
5015:Src/ff.c      **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 9919              		.loc 1 5015 4 view .LVU3385
5015:Src/ff.c      **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 9920              		.loc 1 5015 7 is_stmt 0 view .LVU3386
 9921 004e C4B1     		cbz	r4, .L761
 9922              	.LVL1172:
 9923              	.L750:
5032:Src/ff.c      **** #if FF_FS_EXFAT
 9924              		.loc 1 5032 4 is_stmt 1 view .LVU3387
5032:Src/ff.c      **** #if FF_FS_EXFAT
 9925              		.loc 1 5032 7 is_stmt 0 view .LVU3388
 9926 0050 002C     		cmp	r4, #0
 9927 0052 56D1     		bne	.L751
5045:Src/ff.c      **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 9928              		.loc 1 5045 6 is_stmt 1 view .LVU3389
 9929 0054 2F49     		ldr	r1, .L762
 9930 0056 0F98     		ldr	r0, [sp, #60]
 9931 0058 1630     		adds	r0, r0, #22
 9932 005a FFF7FEFF 		bl	st_dword
 9933              	.LVL1173:
5046:Src/ff.c      **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 9934              		.loc 1 5046 6 view .LVU3390
 9935 005e 2A46     		mov	r2, r5
 9936 0060 0F99     		ldr	r1, [sp, #60]
 9937 0062 0398     		ldr	r0, [sp, #12]
 9938 0064 FFF7FEFF 		bl	st_clust
 9939              	.LVL1174:
5047:Src/ff.c      **** 					fs->wflag = 1;
 9940              		.loc 1 5047 6 view .LVU3391
5047:Src/ff.c      **** 					fs->wflag = 1;
 9941              		.loc 1 5047 23 is_stmt 0 view .LVU3392
 9942 0068 0F9B     		ldr	r3, [sp, #60]
 9943 006a 1022     		movs	r2, #16
 9944 006c DA72     		strb	r2, [r3, #11]
5048:Src/ff.c      **** 				}
 9945              		.loc 1 5048 6 is_stmt 1 view .LVU3393
5048:Src/ff.c      **** 				}
 9946              		.loc 1 5048 16 is_stmt 0 view .LVU3394
 9947 006e 039B     		ldr	r3, [sp, #12]
 9948 0070 0122     		movs	r2, #1
 9949 0072 DA70     		strb	r2, [r3, #3]
5050:Src/ff.c      **** 					res = sync_fs(fs);
 9950              		.loc 1 5050 5 is_stmt 1 view .LVU3395
5051:Src/ff.c      **** 				}
 9951              		.loc 1 5051 6 view .LVU3396
5051:Src/ff.c      **** 				}
 9952              		.loc 1 5051 12 is_stmt 0 view .LVU3397
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 310


 9953 0074 0398     		ldr	r0, [sp, #12]
 9954 0076 FFF7FEFF 		bl	sync_fs
 9955              	.LVL1175:
 9956 007a 0446     		mov	r4, r0
 9957              	.LVL1176:
5051:Src/ff.c      **** 				}
 9958              		.loc 1 5051 12 view .LVU3398
 9959 007c CAE7     		b	.L747
 9960              	.LVL1177:
 9961              	.L760:
5012:Src/ff.c      **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 9962              		.loc 1 5012 22 view .LVU3399
 9963 007e 0224     		movs	r4, #2
 9964              	.LVL1178:
5012:Src/ff.c      **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 9965              		.loc 1 5012 22 view .LVU3400
 9966 0080 E2E7     		b	.L749
 9967              	.LVL1179:
 9968              	.L761:
5016:Src/ff.c      **** 				if (res == FR_OK) {
 9969              		.loc 1 5016 5 is_stmt 1 view .LVU3401
5016:Src/ff.c      **** 				if (res == FR_OK) {
 9970              		.loc 1 5016 11 is_stmt 0 view .LVU3402
 9971 0082 2946     		mov	r1, r5
 9972 0084 0398     		ldr	r0, [sp, #12]
 9973              	.LVL1180:
5016:Src/ff.c      **** 				if (res == FR_OK) {
 9974              		.loc 1 5016 11 view .LVU3403
 9975 0086 FFF7FEFF 		bl	dir_clear
 9976              	.LVL1181:
5017:Src/ff.c      **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 9977              		.loc 1 5017 5 is_stmt 1 view .LVU3404
5017:Src/ff.c      **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 9978              		.loc 1 5017 8 is_stmt 0 view .LVU3405
 9979 008a 0446     		mov	r4, r0
 9980 008c 0028     		cmp	r0, #0
 9981 008e DFD1     		bne	.L750
5018:Src/ff.c      **** 						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 9982              		.loc 1 5018 6 is_stmt 1 view .LVU3406
5019:Src/ff.c      **** 						fs->win[DIR_Name] = '.';
 9983              		.loc 1 5019 7 view .LVU3407
5019:Src/ff.c      **** 						fs->win[DIR_Name] = '.';
 9984              		.loc 1 5019 16 is_stmt 0 view .LVU3408
 9985 0090 0398     		ldr	r0, [sp, #12]
 9986              	.LVL1182:
5019:Src/ff.c      **** 						fs->win[DIR_Name] = '.';
 9987              		.loc 1 5019 7 view .LVU3409
 9988 0092 4FF02033 		mov	r3, #538976288
 9989 0096 4363     		str	r3, [r0, #52]	@ unaligned
 9990 0098 8363     		str	r3, [r0, #56]	@ unaligned
 9991 009a C0F83B30 		str	r3, [r0, #59]	@ unaligned
5020:Src/ff.c      **** 						fs->win[DIR_Attr] = AM_DIR;
 9992              		.loc 1 5020 7 is_stmt 1 view .LVU3410
5020:Src/ff.c      **** 						fs->win[DIR_Attr] = AM_DIR;
 9993              		.loc 1 5020 25 is_stmt 0 view .LVU3411
 9994 009e 2E26     		movs	r6, #46
 9995 00a0 80F83460 		strb	r6, [r0, #52]
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 311


5021:Src/ff.c      **** 						st_dword(fs->win + DIR_ModTime, tm);
 9996              		.loc 1 5021 7 is_stmt 1 view .LVU3412
5021:Src/ff.c      **** 						st_dword(fs->win + DIR_ModTime, tm);
 9997              		.loc 1 5021 25 is_stmt 0 view .LVU3413
 9998 00a4 1023     		movs	r3, #16
 9999 00a6 80F83F30 		strb	r3, [r0, #63]
5022:Src/ff.c      **** 						st_clust(fs, fs->win, dcl);
 10000              		.loc 1 5022 7 is_stmt 1 view .LVU3414
 10001 00aa 1A49     		ldr	r1, .L762
 10002 00ac 4A30     		adds	r0, r0, #74
 10003 00ae FFF7FEFF 		bl	st_dword
 10004              	.LVL1183:
5023:Src/ff.c      **** 						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 10005              		.loc 1 5023 7 view .LVU3415
 10006 00b2 0398     		ldr	r0, [sp, #12]
 10007 00b4 2A46     		mov	r2, r5
 10008 00b6 00F13401 		add	r1, r0, #52
 10009 00ba FFF7FEFF 		bl	st_clust
 10010              	.LVL1184:
5024:Src/ff.c      **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 10011              		.loc 1 5024 7 view .LVU3416
5024:Src/ff.c      **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 10012              		.loc 1 5024 16 is_stmt 0 view .LVU3417
 10013 00be 0398     		ldr	r0, [sp, #12]
5024:Src/ff.c      **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 10014              		.loc 1 5024 7 view .LVU3418
 10015 00c0 446B     		ldr	r4, [r0, #52]	@ unaligned
 10016 00c2 816B     		ldr	r1, [r0, #56]	@ unaligned
 10017 00c4 C26B     		ldr	r2, [r0, #60]	@ unaligned
 10018 00c6 036C     		ldr	r3, [r0, #64]	@ unaligned
 10019 00c8 4465     		str	r4, [r0, #84]	@ unaligned
 10020 00ca 8165     		str	r1, [r0, #88]	@ unaligned
 10021 00cc C265     		str	r2, [r0, #92]	@ unaligned
 10022 00ce 0366     		str	r3, [r0, #96]	@ unaligned
 10023 00d0 446C     		ldr	r4, [r0, #68]	@ unaligned
 10024 00d2 816C     		ldr	r1, [r0, #72]	@ unaligned
 10025 00d4 C26C     		ldr	r2, [r0, #76]	@ unaligned
 10026 00d6 036D     		ldr	r3, [r0, #80]	@ unaligned
 10027 00d8 4466     		str	r4, [r0, #100]	@ unaligned
 10028 00da 8166     		str	r1, [r0, #104]	@ unaligned
 10029 00dc C266     		str	r2, [r0, #108]	@ unaligned
 10030 00de 0367     		str	r3, [r0, #112]	@ unaligned
5025:Src/ff.c      **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 10031              		.loc 1 5025 7 is_stmt 1 view .LVU3419
5025:Src/ff.c      **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 10032              		.loc 1 5025 27 is_stmt 0 view .LVU3420
 10033 00e0 80F85560 		strb	r6, [r0, #85]
5025:Src/ff.c      **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 10034              		.loc 1 5025 34 is_stmt 1 view .LVU3421
 10035              	.LVL1185:
5026:Src/ff.c      **** 						fs->wflag = 1;
 10036              		.loc 1 5026 7 view .LVU3422
 10037 00e4 0A9A     		ldr	r2, [sp, #40]
 10038 00e6 00F15401 		add	r1, r0, #84
 10039 00ea FFF7FEFF 		bl	st_clust
 10040              	.LVL1186:
5027:Src/ff.c      **** 					}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 312


 10041              		.loc 1 5027 7 view .LVU3423
5027:Src/ff.c      **** 					}
 10042              		.loc 1 5027 17 is_stmt 0 view .LVU3424
 10043 00ee 039B     		ldr	r3, [sp, #12]
 10044 00f0 0122     		movs	r2, #1
 10045 00f2 DA70     		strb	r2, [r3, #3]
5029:Src/ff.c      **** 				}
 10046              		.loc 1 5029 6 is_stmt 1 view .LVU3425
5029:Src/ff.c      **** 				}
 10047              		.loc 1 5029 12 is_stmt 0 view .LVU3426
 10048 00f4 08A8     		add	r0, sp, #32
 10049 00f6 FFF7FEFF 		bl	dir_register
 10050              	.LVL1187:
 10051 00fa 0446     		mov	r4, r0
 10052              	.LVL1188:
5029:Src/ff.c      **** 				}
 10053              		.loc 1 5029 12 view .LVU3427
 10054 00fc A8E7     		b	.L750
 10055              	.LVL1189:
 10056              	.L756:
5013:Src/ff.c      **** 			tm = GET_FATTIME();
 10057              		.loc 1 5013 31 view .LVU3428
 10058 00fe 0124     		movs	r4, #1
 10059              	.LVL1190:
5013:Src/ff.c      **** 			tm = GET_FATTIME();
 10060              		.loc 1 5013 31 view .LVU3429
 10061 0100 A6E7     		b	.L750
 10062              	.LVL1191:
 10063              	.L751:
5054:Src/ff.c      **** 			}
 10064              		.loc 1 5054 5 is_stmt 1 view .LVU3430
 10065 0102 0022     		movs	r2, #0
 10066 0104 2946     		mov	r1, r5
 10067 0106 04A8     		add	r0, sp, #16
 10068 0108 FFF7FEFF 		bl	remove_chain
 10069              	.LVL1192:
 10070 010c 82E7     		b	.L747
 10071              	.LVL1193:
 10072              	.L752:
5003:Src/ff.c      **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 10073              		.loc 1 5003 25 is_stmt 0 view .LVU3431
 10074 010e 0824     		movs	r4, #8
 10075 0110 80E7     		b	.L747
 10076              	.L763:
 10077 0112 00BF     		.align	2
 10078              	.L762:
 10079 0114 00002150 		.word	1344339968
 10080              		.cfi_endproc
 10081              	.LFE53:
 10083              		.section	.text.f_rename,"ax",%progbits
 10084              		.align	1
 10085              		.global	f_rename
 10086              		.syntax unified
 10087              		.thumb
 10088              		.thumb_func
 10089              		.fpu softvfp
 10091              	f_rename:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 313


 10092              	.LVL1194:
 10093              	.LFB54:
5062:Src/ff.c      **** 
5063:Src/ff.c      **** 
5064:Src/ff.c      **** 
5065:Src/ff.c      **** 
5066:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5067:Src/ff.c      **** /* Rename a File/Directory                                               */
5068:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5069:Src/ff.c      **** 
5070:Src/ff.c      **** FRESULT f_rename (
5071:Src/ff.c      **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
5072:Src/ff.c      **** 	const TCHAR* path_new	/* Pointer to the new name */
5073:Src/ff.c      **** )
5074:Src/ff.c      **** {
 10094              		.loc 1 5074 1 is_stmt 1 view -0
 10095              		.cfi_startproc
 10096              		@ args = 0, pretend = 0, frame = 144
 10097              		@ frame_needed = 0, uses_anonymous_args = 0
 10098              		.loc 1 5074 1 is_stmt 0 view .LVU3433
 10099 0000 30B5     		push	{r4, r5, lr}
 10100              	.LCFI102:
 10101              		.cfi_def_cfa_offset 12
 10102              		.cfi_offset 4, -12
 10103              		.cfi_offset 5, -8
 10104              		.cfi_offset 14, -4
 10105 0002 A5B0     		sub	sp, sp, #148
 10106              	.LCFI103:
 10107              		.cfi_def_cfa_offset 160
 10108 0004 0190     		str	r0, [sp, #4]
 10109 0006 0091     		str	r1, [sp]
5075:Src/ff.c      **** 	FRESULT res;
 10110              		.loc 1 5075 2 is_stmt 1 view .LVU3434
5076:Src/ff.c      **** 	DIR djo, djn;
 10111              		.loc 1 5076 2 view .LVU3435
5077:Src/ff.c      **** 	FATFS *fs;
 10112              		.loc 1 5077 2 view .LVU3436
5078:Src/ff.c      **** 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
 10113              		.loc 1 5078 2 view .LVU3437
5079:Src/ff.c      **** 	LBA_t sect;
 10114              		.loc 1 5079 2 view .LVU3438
5080:Src/ff.c      **** 	DEF_NAMBUF
5081:Src/ff.c      **** 
5082:Src/ff.c      **** 
5083:Src/ff.c      **** 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 10115              		.loc 1 5083 2 view .LVU3439
 10116 0008 6846     		mov	r0, sp
 10117              	.LVL1195:
 10118              		.loc 1 5083 2 is_stmt 0 view .LVU3440
 10119 000a FFF7FEFF 		bl	get_ldnumber
 10120              	.LVL1196:
5084:Src/ff.c      **** 	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 10121              		.loc 1 5084 2 is_stmt 1 view .LVU3441
 10122              		.loc 1 5084 8 is_stmt 0 view .LVU3442
 10123 000e 0222     		movs	r2, #2
 10124 0010 0BA9     		add	r1, sp, #44
 10125 0012 01A8     		add	r0, sp, #4
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 314


 10126 0014 FFF7FEFF 		bl	mount_volume
 10127              	.LVL1197:
5085:Src/ff.c      **** 	if (res == FR_OK) {
 10128              		.loc 1 5085 2 is_stmt 1 view .LVU3443
 10129              		.loc 1 5085 5 is_stmt 0 view .LVU3444
 10130 0018 0446     		mov	r4, r0
 10131 001a 10B1     		cbz	r0, .L775
 10132              	.LVL1198:
 10133              	.L765:
5086:Src/ff.c      **** 		djo.obj.fs = fs;
5087:Src/ff.c      **** 		INIT_NAMBUF(fs);
5088:Src/ff.c      **** 		res = follow_path(&djo, path_old);			/* Check old object */
5089:Src/ff.c      **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
5090:Src/ff.c      **** #if FF_FS_LOCK != 0
5091:Src/ff.c      **** 		if (res == FR_OK) {
5092:Src/ff.c      **** 			res = chk_lock(&djo, 2);
5093:Src/ff.c      **** 		}
5094:Src/ff.c      **** #endif
5095:Src/ff.c      **** 		if (res == FR_OK) {					/* Object to be renamed is found */
5096:Src/ff.c      **** #if FF_FS_EXFAT
5097:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
5098:Src/ff.c      **** 				BYTE nf, nn;
5099:Src/ff.c      **** 				WORD nh;
5100:Src/ff.c      **** 
5101:Src/ff.c      **** 				memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
5102:Src/ff.c      **** 				memcpy(&djn, &djo, sizeof djo);
5103:Src/ff.c      **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
5104:Src/ff.c      **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
5105:Src/ff.c      **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
5106:Src/ff.c      **** 				}
5107:Src/ff.c      **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
5108:Src/ff.c      **** 					res = dir_register(&djn);			/* Register the new entry */
5109:Src/ff.c      **** 					if (res == FR_OK) {
5110:Src/ff.c      **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
5111:Src/ff.c      **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
5112:Src/ff.c      **** 						memcpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
5113:Src/ff.c      **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
5114:Src/ff.c      **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
5115:Src/ff.c      **** 						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attrib
5116:Src/ff.c      **** /* Start of critical section where an interruption can cause a cross-link */
5117:Src/ff.c      **** 						res = store_xdir(&djn);
5118:Src/ff.c      **** 					}
5119:Src/ff.c      **** 				}
5120:Src/ff.c      **** 			} else
5121:Src/ff.c      **** #endif
5122:Src/ff.c      **** 			{	/* At FAT/FAT32 volume */
5123:Src/ff.c      **** 				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
5124:Src/ff.c      **** 				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
5125:Src/ff.c      **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
5126:Src/ff.c      **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
5127:Src/ff.c      **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
5128:Src/ff.c      **** 				}
5129:Src/ff.c      **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
5130:Src/ff.c      **** 					res = dir_register(&djn);			/* Register the new entry */
5131:Src/ff.c      **** 					if (res == FR_OK) {
5132:Src/ff.c      **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
5133:Src/ff.c      **** 						memcpy(dir + 13, buf + 13, SZDIRE - 13);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 315


5134:Src/ff.c      **** 						dir[DIR_Attr] = buf[DIR_Attr];
5135:Src/ff.c      **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
5136:Src/ff.c      **** 						fs->wflag = 1;
5137:Src/ff.c      **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
5138:Src/ff.c      **** 							sect = clst2sect(fs, ld_clust(fs, dir));
5139:Src/ff.c      **** 							if (sect == 0) {
5140:Src/ff.c      **** 								res = FR_INT_ERR;
5141:Src/ff.c      **** 							} else {
5142:Src/ff.c      **** /* Start of critical section where an interruption can cause a cross-link */
5143:Src/ff.c      **** 								res = move_window(fs, sect);
5144:Src/ff.c      **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
5145:Src/ff.c      **** 								if (res == FR_OK && dir[1] == '.') {
5146:Src/ff.c      **** 									st_clust(fs, dir, djn.obj.sclust);
5147:Src/ff.c      **** 									fs->wflag = 1;
5148:Src/ff.c      **** 								}
5149:Src/ff.c      **** 							}
5150:Src/ff.c      **** 						}
5151:Src/ff.c      **** 					}
5152:Src/ff.c      **** 				}
5153:Src/ff.c      **** 			}
5154:Src/ff.c      **** 			if (res == FR_OK) {
5155:Src/ff.c      **** 				res = dir_remove(&djo);		/* Remove old entry */
5156:Src/ff.c      **** 				if (res == FR_OK) {
5157:Src/ff.c      **** 					res = sync_fs(fs);
5158:Src/ff.c      **** 				}
5159:Src/ff.c      **** 			}
5160:Src/ff.c      **** /* End of the critical section */
5161:Src/ff.c      **** 		}
5162:Src/ff.c      **** 		FREE_NAMBUF();
 10134              		.loc 1 5162 16 is_stmt 1 view .LVU3445
5163:Src/ff.c      **** 	}
5164:Src/ff.c      **** 
5165:Src/ff.c      **** 	LEAVE_FF(fs, res);
 10135              		.loc 1 5165 2 view .LVU3446
5166:Src/ff.c      **** }
 10136              		.loc 1 5166 1 is_stmt 0 view .LVU3447
 10137 001c 2046     		mov	r0, r4
 10138 001e 25B0     		add	sp, sp, #148
 10139              	.LCFI104:
 10140              		.cfi_remember_state
 10141              		.cfi_def_cfa_offset 12
 10142              		@ sp needed
 10143 0020 30BD     		pop	{r4, r5, pc}
 10144              	.LVL1199:
 10145              	.L775:
 10146              	.LCFI105:
 10147              		.cfi_restore_state
5086:Src/ff.c      **** 		djo.obj.fs = fs;
 10148              		.loc 1 5086 3 is_stmt 1 view .LVU3448
5086:Src/ff.c      **** 		djo.obj.fs = fs;
 10149              		.loc 1 5086 14 is_stmt 0 view .LVU3449
 10150 0022 0B9B     		ldr	r3, [sp, #44]
 10151 0024 1893     		str	r3, [sp, #96]
5087:Src/ff.c      **** 		res = follow_path(&djo, path_old);			/* Check old object */
 10152              		.loc 1 5087 18 is_stmt 1 view .LVU3450
5088:Src/ff.c      **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 10153              		.loc 1 5088 3 view .LVU3451
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 316


5088:Src/ff.c      **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 10154              		.loc 1 5088 9 is_stmt 0 view .LVU3452
 10155 0026 0199     		ldr	r1, [sp, #4]
 10156 0028 18A8     		add	r0, sp, #96
 10157              	.LVL1200:
5088:Src/ff.c      **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 10158              		.loc 1 5088 9 view .LVU3453
 10159 002a FFF7FEFF 		bl	follow_path
 10160              	.LVL1201:
5089:Src/ff.c      **** #if FF_FS_LOCK != 0
 10161              		.loc 1 5089 3 is_stmt 1 view .LVU3454
5089:Src/ff.c      **** #if FF_FS_LOCK != 0
 10162              		.loc 1 5089 6 is_stmt 0 view .LVU3455
 10163 002e 0446     		mov	r4, r0
 10164 0030 28B9     		cbnz	r0, .L766
5089:Src/ff.c      **** #if FF_FS_LOCK != 0
 10165              		.loc 1 5089 30 discriminator 1 view .LVU3456
 10166 0032 9DF88B30 		ldrb	r3, [sp, #139]	@ zero_extendqisi2
5089:Src/ff.c      **** #if FF_FS_LOCK != 0
 10167              		.loc 1 5089 20 discriminator 1 view .LVU3457
 10168 0036 13F0A00F 		tst	r3, #160
 10169 003a 40F08F80 		bne	.L771
 10170              	.L766:
 10171              	.LVL1202:
5095:Src/ff.c      **** #if FF_FS_EXFAT
 10172              		.loc 1 5095 3 is_stmt 1 view .LVU3458
5095:Src/ff.c      **** #if FF_FS_EXFAT
 10173              		.loc 1 5095 6 is_stmt 0 view .LVU3459
 10174 003e 002C     		cmp	r4, #0
 10175 0040 ECD1     		bne	.L765
5123:Src/ff.c      **** 				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 10176              		.loc 1 5123 5 is_stmt 1 view .LVU3460
5123:Src/ff.c      **** 				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 10177              		.loc 1 5123 20 is_stmt 0 view .LVU3461
 10178 0042 1F9D     		ldr	r5, [sp, #124]
5123:Src/ff.c      **** 				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 10179              		.loc 1 5123 5 view .LVU3462
 10180 0044 03AC     		add	r4, sp, #12
 10181              	.LVL1203:
5123:Src/ff.c      **** 				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 10182              		.loc 1 5123 5 view .LVU3463
 10183 0046 2868     		ldr	r0, [r5]	@ unaligned
 10184 0048 6968     		ldr	r1, [r5, #4]	@ unaligned
 10185 004a AA68     		ldr	r2, [r5, #8]	@ unaligned
 10186 004c EB68     		ldr	r3, [r5, #12]	@ unaligned
 10187 004e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 10188 0050 2869     		ldr	r0, [r5, #16]	@ unaligned
 10189 0052 6969     		ldr	r1, [r5, #20]	@ unaligned
 10190 0054 AA69     		ldr	r2, [r5, #24]	@ unaligned
 10191 0056 EB69     		ldr	r3, [r5, #28]	@ unaligned
 10192 0058 0FC4     		stmia	r4!, {r0, r1, r2, r3}
5124:Src/ff.c      **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 10193              		.loc 1 5124 5 is_stmt 1 view .LVU3464
 10194 005a 0CAC     		add	r4, sp, #48
 10195 005c 0DF1600C 		add	ip, sp, #96
 10196 0060 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 10197 0064 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 317


 10198 0066 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 10199 006a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 10200 006c 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 10201 0070 84E80F00 		stm	r4, {r0, r1, r2, r3}
5125:Src/ff.c      **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 10202              		.loc 1 5125 5 view .LVU3465
5125:Src/ff.c      **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 10203              		.loc 1 5125 11 is_stmt 0 view .LVU3466
 10204 0074 0099     		ldr	r1, [sp]
 10205 0076 0CA8     		add	r0, sp, #48
 10206 0078 FFF7FEFF 		bl	follow_path
 10207              	.LVL1204:
5126:Src/ff.c      **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 10208              		.loc 1 5126 5 is_stmt 1 view .LVU3467
5126:Src/ff.c      **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 10209              		.loc 1 5126 8 is_stmt 0 view .LVU3468
 10210 007c 0446     		mov	r4, r0
 10211 007e 58B9     		cbnz	r0, .L767
5127:Src/ff.c      **** 				}
 10212              		.loc 1 5127 6 is_stmt 1 view .LVU3469
5127:Src/ff.c      **** 				}
 10213              		.loc 1 5127 84 is_stmt 0 view .LVU3470
 10214 0080 0E9A     		ldr	r2, [sp, #56]
 10215 0082 1A9B     		ldr	r3, [sp, #104]
 10216 0084 9A42     		cmp	r2, r3
 10217 0086 01D0     		beq	.L776
 10218 0088 0824     		movs	r4, #8
 10219 008a 07E0     		b	.L768
 10220              	.L776:
5127:Src/ff.c      **** 				}
 10221              		.loc 1 5127 46 discriminator 1 view .LVU3471
 10222 008c 109A     		ldr	r2, [sp, #64]
 10223 008e 1C9B     		ldr	r3, [sp, #112]
 10224 0090 9A42     		cmp	r2, r3
 10225 0092 10D0     		beq	.L769
5127:Src/ff.c      **** 				}
 10226              		.loc 1 5127 84 view .LVU3472
 10227 0094 0824     		movs	r4, #8
 10228 0096 01E0     		b	.L768
 10229              	.L767:
5129:Src/ff.c      **** 					res = dir_register(&djn);			/* Register the new entry */
 10230              		.loc 1 5129 5 is_stmt 1 view .LVU3473
5129:Src/ff.c      **** 					res = dir_register(&djn);			/* Register the new entry */
 10231              		.loc 1 5129 8 is_stmt 0 view .LVU3474
 10232 0098 0428     		cmp	r0, #4
 10233 009a 0CD0     		beq	.L769
 10234              	.LVL1205:
 10235              	.L768:
5154:Src/ff.c      **** 				res = dir_remove(&djo);		/* Remove old entry */
 10236              		.loc 1 5154 4 is_stmt 1 view .LVU3475
5154:Src/ff.c      **** 				res = dir_remove(&djo);		/* Remove old entry */
 10237              		.loc 1 5154 7 is_stmt 0 view .LVU3476
 10238 009c 002C     		cmp	r4, #0
 10239 009e BDD1     		bne	.L765
5155:Src/ff.c      **** 				if (res == FR_OK) {
 10240              		.loc 1 5155 5 is_stmt 1 view .LVU3477
5155:Src/ff.c      **** 				if (res == FR_OK) {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 318


 10241              		.loc 1 5155 11 is_stmt 0 view .LVU3478
 10242 00a0 18A8     		add	r0, sp, #96
 10243 00a2 FFF7FEFF 		bl	dir_remove
 10244              	.LVL1206:
5156:Src/ff.c      **** 					res = sync_fs(fs);
 10245              		.loc 1 5156 5 is_stmt 1 view .LVU3479
5156:Src/ff.c      **** 					res = sync_fs(fs);
 10246              		.loc 1 5156 8 is_stmt 0 view .LVU3480
 10247 00a6 0446     		mov	r4, r0
 10248 00a8 0028     		cmp	r0, #0
 10249 00aa B7D1     		bne	.L765
5157:Src/ff.c      **** 				}
 10250              		.loc 1 5157 6 is_stmt 1 view .LVU3481
5157:Src/ff.c      **** 				}
 10251              		.loc 1 5157 12 is_stmt 0 view .LVU3482
 10252 00ac 0B98     		ldr	r0, [sp, #44]
 10253              	.LVL1207:
5157:Src/ff.c      **** 				}
 10254              		.loc 1 5157 12 view .LVU3483
 10255 00ae FFF7FEFF 		bl	sync_fs
 10256              	.LVL1208:
 10257 00b2 0446     		mov	r4, r0
 10258              	.LVL1209:
5157:Src/ff.c      **** 				}
 10259              		.loc 1 5157 12 view .LVU3484
 10260 00b4 B2E7     		b	.L765
 10261              	.LVL1210:
 10262              	.L769:
5130:Src/ff.c      **** 					if (res == FR_OK) {
 10263              		.loc 1 5130 6 is_stmt 1 view .LVU3485
5130:Src/ff.c      **** 					if (res == FR_OK) {
 10264              		.loc 1 5130 12 is_stmt 0 view .LVU3486
 10265 00b6 0CA8     		add	r0, sp, #48
 10266 00b8 FFF7FEFF 		bl	dir_register
 10267              	.LVL1211:
5131:Src/ff.c      **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 10268              		.loc 1 5131 6 is_stmt 1 view .LVU3487
5131:Src/ff.c      **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 10269              		.loc 1 5131 9 is_stmt 0 view .LVU3488
 10270 00bc 0446     		mov	r4, r0
 10271 00be 0028     		cmp	r0, #0
 10272 00c0 ECD1     		bne	.L768
5132:Src/ff.c      **** 						memcpy(dir + 13, buf + 13, SZDIRE - 13);
 10273              		.loc 1 5132 7 is_stmt 1 view .LVU3489
5132:Src/ff.c      **** 						memcpy(dir + 13, buf + 13, SZDIRE - 13);
 10274              		.loc 1 5132 11 is_stmt 0 view .LVU3490
 10275 00c2 1399     		ldr	r1, [sp, #76]
 10276              	.LVL1212:
5133:Src/ff.c      **** 						dir[DIR_Attr] = buf[DIR_Attr];
 10277              		.loc 1 5133 7 is_stmt 1 view .LVU3491
 10278 00c4 DDF81950 		ldr	r5, [sp, #25]	@ unaligned
 10279 00c8 DDF81D00 		ldr	r0, [sp, #29]	@ unaligned
 10280              	.LVL1213:
5133:Src/ff.c      **** 						dir[DIR_Attr] = buf[DIR_Attr];
 10281              		.loc 1 5133 7 is_stmt 0 view .LVU3492
 10282 00cc DDF82120 		ldr	r2, [sp, #33]	@ unaligned
 10283 00d0 DDF82530 		ldr	r3, [sp, #37]	@ unaligned
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 319


 10284 00d4 C1F80D50 		str	r5, [r1, #13]	@ unaligned
 10285 00d8 C1F81100 		str	r0, [r1, #17]	@ unaligned
 10286 00dc C1F81520 		str	r2, [r1, #21]	@ unaligned
 10287 00e0 C1F81930 		str	r3, [r1, #25]	@ unaligned
 10288 00e4 BDF82920 		ldrh	r2, [sp, #41]	@ unaligned
 10289 00e8 9DF82B30 		ldrb	r3, [sp, #43]	@ zero_extendqisi2
 10290 00ec A1F81D20 		strh	r2, [r1, #29]	@ unaligned
 10291 00f0 CB77     		strb	r3, [r1, #31]
5134:Src/ff.c      **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 10292              		.loc 1 5134 7 is_stmt 1 view .LVU3493
5134:Src/ff.c      **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 10293              		.loc 1 5134 26 is_stmt 0 view .LVU3494
 10294 00f2 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
5134:Src/ff.c      **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 10295              		.loc 1 5134 21 view .LVU3495
 10296 00f6 CB72     		strb	r3, [r1, #11]
5135:Src/ff.c      **** 						fs->wflag = 1;
 10297              		.loc 1 5135 7 is_stmt 1 view .LVU3496
5135:Src/ff.c      **** 						fs->wflag = 1;
 10298              		.loc 1 5135 10 is_stmt 0 view .LVU3497
 10299 00f8 13F0100F 		tst	r3, #16
 10300 00fc 02D1     		bne	.L770
5135:Src/ff.c      **** 						fs->wflag = 1;
 10301              		.loc 1 5135 38 is_stmt 1 discriminator 1 view .LVU3498
5135:Src/ff.c      **** 						fs->wflag = 1;
 10302              		.loc 1 5135 52 is_stmt 0 discriminator 1 view .LVU3499
 10303 00fe 43F02003 		orr	r3, r3, #32
 10304 0102 CB72     		strb	r3, [r1, #11]
 10305              	.L770:
5136:Src/ff.c      **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 10306              		.loc 1 5136 7 is_stmt 1 view .LVU3500
5136:Src/ff.c      **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 10307              		.loc 1 5136 17 is_stmt 0 view .LVU3501
 10308 0104 0B9B     		ldr	r3, [sp, #44]
 10309 0106 0122     		movs	r2, #1
 10310 0108 DA70     		strb	r2, [r3, #3]
5137:Src/ff.c      **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 10311              		.loc 1 5137 7 is_stmt 1 view .LVU3502
5137:Src/ff.c      **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 10312              		.loc 1 5137 15 is_stmt 0 view .LVU3503
 10313 010a CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
5137:Src/ff.c      **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 10314              		.loc 1 5137 10 view .LVU3504
 10315 010c 13F0100F 		tst	r3, #16
 10316 0110 C4D0     		beq	.L768
5137:Src/ff.c      **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 10317              		.loc 1 5137 36 discriminator 1 view .LVU3505
 10318 0112 1A9A     		ldr	r2, [sp, #104]
 10319 0114 0E9B     		ldr	r3, [sp, #56]
 10320 0116 9A42     		cmp	r2, r3
 10321 0118 C0D0     		beq	.L768
5138:Src/ff.c      **** 							if (sect == 0) {
 10322              		.loc 1 5138 8 is_stmt 1 view .LVU3506
5138:Src/ff.c      **** 							if (sect == 0) {
 10323              		.loc 1 5138 15 is_stmt 0 view .LVU3507
 10324 011a 0B9C     		ldr	r4, [sp, #44]
 10325 011c 2046     		mov	r0, r4
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 320


 10326 011e FFF7FEFF 		bl	ld_clust
 10327              	.LVL1214:
5138:Src/ff.c      **** 							if (sect == 0) {
 10328              		.loc 1 5138 15 view .LVU3508
 10329 0122 0146     		mov	r1, r0
 10330 0124 2046     		mov	r0, r4
 10331 0126 FFF7FEFF 		bl	clst2sect
 10332              	.LVL1215:
5139:Src/ff.c      **** 								res = FR_INT_ERR;
 10333              		.loc 1 5139 8 is_stmt 1 view .LVU3509
5139:Src/ff.c      **** 								res = FR_INT_ERR;
 10334              		.loc 1 5139 11 is_stmt 0 view .LVU3510
 10335 012a 0146     		mov	r1, r0
 10336 012c 08B9     		cbnz	r0, .L777
5140:Src/ff.c      **** 							} else {
 10337              		.loc 1 5140 13 view .LVU3511
 10338 012e 0224     		movs	r4, #2
 10339 0130 74E7     		b	.L765
 10340              	.L777:
5143:Src/ff.c      **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 10341              		.loc 1 5143 9 is_stmt 1 view .LVU3512
5143:Src/ff.c      **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 10342              		.loc 1 5143 15 is_stmt 0 view .LVU3513
 10343 0132 2046     		mov	r0, r4
 10344              	.LVL1216:
5143:Src/ff.c      **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 10345              		.loc 1 5143 15 view .LVU3514
 10346 0134 FFF7FEFF 		bl	move_window
 10347              	.LVL1217:
5144:Src/ff.c      **** 								if (res == FR_OK && dir[1] == '.') {
 10348              		.loc 1 5144 9 is_stmt 1 view .LVU3515
5144:Src/ff.c      **** 								if (res == FR_OK && dir[1] == '.') {
 10349              		.loc 1 5144 17 is_stmt 0 view .LVU3516
 10350 0138 0B9B     		ldr	r3, [sp, #44]
5144:Src/ff.c      **** 								if (res == FR_OK && dir[1] == '.') {
 10351              		.loc 1 5144 13 view .LVU3517
 10352 013a 03F15401 		add	r1, r3, #84
 10353              	.LVL1218:
5145:Src/ff.c      **** 									st_clust(fs, dir, djn.obj.sclust);
 10354              		.loc 1 5145 9 is_stmt 1 view .LVU3518
5145:Src/ff.c      **** 									st_clust(fs, dir, djn.obj.sclust);
 10355              		.loc 1 5145 12 is_stmt 0 view .LVU3519
 10356 013e 0446     		mov	r4, r0
 10357 0140 0028     		cmp	r0, #0
 10358 0142 ABD1     		bne	.L768
5145:Src/ff.c      **** 									st_clust(fs, dir, djn.obj.sclust);
 10359              		.loc 1 5145 32 discriminator 1 view .LVU3520
 10360 0144 93F85520 		ldrb	r2, [r3, #85]	@ zero_extendqisi2
5145:Src/ff.c      **** 									st_clust(fs, dir, djn.obj.sclust);
 10361              		.loc 1 5145 26 discriminator 1 view .LVU3521
 10362 0148 2E2A     		cmp	r2, #46
 10363 014a A7D1     		bne	.L768
5146:Src/ff.c      **** 									fs->wflag = 1;
 10364              		.loc 1 5146 10 is_stmt 1 view .LVU3522
 10365 014c 0E9A     		ldr	r2, [sp, #56]
 10366 014e 1846     		mov	r0, r3
 10367              	.LVL1219:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 321


5146:Src/ff.c      **** 									fs->wflag = 1;
 10368              		.loc 1 5146 10 is_stmt 0 view .LVU3523
 10369 0150 FFF7FEFF 		bl	st_clust
 10370              	.LVL1220:
5147:Src/ff.c      **** 								}
 10371              		.loc 1 5147 10 is_stmt 1 view .LVU3524
5147:Src/ff.c      **** 								}
 10372              		.loc 1 5147 20 is_stmt 0 view .LVU3525
 10373 0154 0B9B     		ldr	r3, [sp, #44]
 10374 0156 0122     		movs	r2, #1
 10375 0158 DA70     		strb	r2, [r3, #3]
 10376 015a 9FE7     		b	.L768
 10377              	.LVL1221:
 10378              	.L771:
5089:Src/ff.c      **** #if FF_FS_LOCK != 0
 10379              		.loc 1 5089 68 view .LVU3526
 10380 015c 0624     		movs	r4, #6
 10381 015e 5DE7     		b	.L765
 10382              		.cfi_endproc
 10383              	.LFE54:
 10385              		.section	.text.f_chmod,"ax",%progbits
 10386              		.align	1
 10387              		.global	f_chmod
 10388              		.syntax unified
 10389              		.thumb
 10390              		.thumb_func
 10391              		.fpu softvfp
 10393              	f_chmod:
 10394              	.LVL1222:
 10395              	.LFB55:
5167:Src/ff.c      **** 
5168:Src/ff.c      **** #endif /* !FF_FS_READONLY */
5169:Src/ff.c      **** #endif /* FF_FS_MINIMIZE == 0 */
5170:Src/ff.c      **** #endif /* FF_FS_MINIMIZE <= 1 */
5171:Src/ff.c      **** #endif /* FF_FS_MINIMIZE <= 2 */
5172:Src/ff.c      **** 
5173:Src/ff.c      **** 
5174:Src/ff.c      **** 
5175:Src/ff.c      **** #if FF_USE_CHMOD && !FF_FS_READONLY
5176:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5177:Src/ff.c      **** /* Change Attribute                                                      */
5178:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5179:Src/ff.c      **** 
5180:Src/ff.c      **** FRESULT f_chmod (
5181:Src/ff.c      **** 	const TCHAR* path,	/* Pointer to the file path */
5182:Src/ff.c      **** 	BYTE attr,			/* Attribute bits */
5183:Src/ff.c      **** 	BYTE mask			/* Attribute mask to change */
5184:Src/ff.c      **** )
5185:Src/ff.c      **** {
 10396              		.loc 1 5185 1 is_stmt 1 view -0
 10397              		.cfi_startproc
 10398              		@ args = 0, pretend = 0, frame = 64
 10399              		@ frame_needed = 0, uses_anonymous_args = 0
 10400              		.loc 1 5185 1 is_stmt 0 view .LVU3528
 10401 0000 30B5     		push	{r4, r5, lr}
 10402              	.LCFI106:
 10403              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 322


 10404              		.cfi_offset 4, -12
 10405              		.cfi_offset 5, -8
 10406              		.cfi_offset 14, -4
 10407 0002 91B0     		sub	sp, sp, #68
 10408              	.LCFI107:
 10409              		.cfi_def_cfa_offset 80
 10410 0004 0190     		str	r0, [sp, #4]
 10411 0006 0D46     		mov	r5, r1
 10412 0008 1446     		mov	r4, r2
5186:Src/ff.c      **** 	FRESULT res;
 10413              		.loc 1 5186 2 is_stmt 1 view .LVU3529
5187:Src/ff.c      **** 	DIR dj;
 10414              		.loc 1 5187 2 view .LVU3530
5188:Src/ff.c      **** 	FATFS *fs;
 10415              		.loc 1 5188 2 view .LVU3531
5189:Src/ff.c      **** 	DEF_NAMBUF
5190:Src/ff.c      **** 
5191:Src/ff.c      **** 
5192:Src/ff.c      **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 10416              		.loc 1 5192 2 view .LVU3532
 10417              		.loc 1 5192 8 is_stmt 0 view .LVU3533
 10418 000a 0222     		movs	r2, #2
 10419              	.LVL1223:
 10420              		.loc 1 5192 8 view .LVU3534
 10421 000c 03A9     		add	r1, sp, #12
 10422              	.LVL1224:
 10423              		.loc 1 5192 8 view .LVU3535
 10424 000e 01A8     		add	r0, sp, #4
 10425              	.LVL1225:
 10426              		.loc 1 5192 8 view .LVU3536
 10427 0010 FFF7FEFF 		bl	mount_volume
 10428              	.LVL1226:
5193:Src/ff.c      **** 	if (res == FR_OK) {
 10429              		.loc 1 5193 2 is_stmt 1 view .LVU3537
 10430              		.loc 1 5193 5 is_stmt 0 view .LVU3538
 10431 0014 08B1     		cbz	r0, .L783
 10432              	.LVL1227:
 10433              	.L779:
5194:Src/ff.c      **** 		dj.obj.fs = fs;
5195:Src/ff.c      **** 		INIT_NAMBUF(fs);
5196:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
5197:Src/ff.c      **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5198:Src/ff.c      **** 		if (res == FR_OK) {
5199:Src/ff.c      **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
5200:Src/ff.c      **** #if FF_FS_EXFAT
5201:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {
5202:Src/ff.c      **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
5203:Src/ff.c      **** 				res = store_xdir(&dj);
5204:Src/ff.c      **** 			} else
5205:Src/ff.c      **** #endif
5206:Src/ff.c      **** 			{
5207:Src/ff.c      **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
5208:Src/ff.c      **** 				fs->wflag = 1;
5209:Src/ff.c      **** 			}
5210:Src/ff.c      **** 			if (res == FR_OK) {
5211:Src/ff.c      **** 				res = sync_fs(fs);
5212:Src/ff.c      **** 			}
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 323


5213:Src/ff.c      **** 		}
5214:Src/ff.c      **** 		FREE_NAMBUF();
 10434              		.loc 1 5214 16 is_stmt 1 view .LVU3539
5215:Src/ff.c      **** 	}
5216:Src/ff.c      **** 
5217:Src/ff.c      **** 	LEAVE_FF(fs, res);
 10435              		.loc 1 5217 2 view .LVU3540
5218:Src/ff.c      **** }
 10436              		.loc 1 5218 1 is_stmt 0 view .LVU3541
 10437 0016 11B0     		add	sp, sp, #68
 10438              	.LCFI108:
 10439              		.cfi_remember_state
 10440              		.cfi_def_cfa_offset 12
 10441              		@ sp needed
 10442 0018 30BD     		pop	{r4, r5, pc}
 10443              	.LVL1228:
 10444              	.L783:
 10445              	.LCFI109:
 10446              		.cfi_restore_state
5194:Src/ff.c      **** 		dj.obj.fs = fs;
 10447              		.loc 1 5194 3 is_stmt 1 view .LVU3542
5194:Src/ff.c      **** 		dj.obj.fs = fs;
 10448              		.loc 1 5194 13 is_stmt 0 view .LVU3543
 10449 001a 039B     		ldr	r3, [sp, #12]
 10450 001c 0493     		str	r3, [sp, #16]
5195:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10451              		.loc 1 5195 18 is_stmt 1 view .LVU3544
5196:Src/ff.c      **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
 10452              		.loc 1 5196 3 view .LVU3545
5196:Src/ff.c      **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
 10453              		.loc 1 5196 9 is_stmt 0 view .LVU3546
 10454 001e 0199     		ldr	r1, [sp, #4]
 10455 0020 04A8     		add	r0, sp, #16
 10456 0022 FFF7FEFF 		bl	follow_path
 10457              	.LVL1229:
5197:Src/ff.c      **** 		if (res == FR_OK) {
 10458              		.loc 1 5197 3 is_stmt 1 view .LVU3547
5197:Src/ff.c      **** 		if (res == FR_OK) {
 10459              		.loc 1 5197 6 is_stmt 0 view .LVU3548
 10460 0026 20B9     		cbnz	r0, .L780
5197:Src/ff.c      **** 		if (res == FR_OK) {
 10461              		.loc 1 5197 29 discriminator 1 view .LVU3549
 10462 0028 9DF83B30 		ldrb	r3, [sp, #59]	@ zero_extendqisi2
5197:Src/ff.c      **** 		if (res == FR_OK) {
 10463              		.loc 1 5197 20 discriminator 1 view .LVU3550
 10464 002c 13F0A00F 		tst	r3, #160
 10465 0030 11D1     		bne	.L781
 10466              	.L780:
5198:Src/ff.c      **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 10467              		.loc 1 5198 3 is_stmt 1 view .LVU3551
5198:Src/ff.c      **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 10468              		.loc 1 5198 6 is_stmt 0 view .LVU3552
 10469 0032 0028     		cmp	r0, #0
 10470 0034 EFD1     		bne	.L779
5199:Src/ff.c      **** #if FF_FS_EXFAT
 10471              		.loc 1 5199 4 is_stmt 1 view .LVU3553
5199:Src/ff.c      **** #if FF_FS_EXFAT
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 324


 10472              		.loc 1 5199 9 is_stmt 0 view .LVU3554
 10473 0036 04F02702 		and	r2, r4, #39
 10474              	.LVL1230:
5207:Src/ff.c      **** 				fs->wflag = 1;
 10475              		.loc 1 5207 5 is_stmt 1 view .LVU3555
5207:Src/ff.c      **** 				fs->wflag = 1;
 10476              		.loc 1 5207 43 is_stmt 0 view .LVU3556
 10477 003a 0B98     		ldr	r0, [sp, #44]
 10478              	.LVL1231:
5207:Src/ff.c      **** 				fs->wflag = 1;
 10479              		.loc 1 5207 47 view .LVU3557
 10480 003c C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
5207:Src/ff.c      **** 				fs->wflag = 1;
 10481              		.loc 1 5207 22 view .LVU3558
 10482 003e 83EA0501 		eor	r1, r3, r5
 10483 0042 0A40     		ands	r2, r2, r1
 10484              	.LVL1232:
5207:Src/ff.c      **** 				fs->wflag = 1;
 10485              		.loc 1 5207 22 view .LVU3559
 10486 0044 5A40     		eors	r2, r2, r3
 10487 0046 C272     		strb	r2, [r0, #11]
5208:Src/ff.c      **** 			}
 10488              		.loc 1 5208 5 is_stmt 1 view .LVU3560
5208:Src/ff.c      **** 			}
 10489              		.loc 1 5208 15 is_stmt 0 view .LVU3561
 10490 0048 039B     		ldr	r3, [sp, #12]
 10491 004a 0122     		movs	r2, #1
 10492 004c DA70     		strb	r2, [r3, #3]
5210:Src/ff.c      **** 				res = sync_fs(fs);
 10493              		.loc 1 5210 4 is_stmt 1 view .LVU3562
5211:Src/ff.c      **** 			}
 10494              		.loc 1 5211 5 view .LVU3563
5211:Src/ff.c      **** 			}
 10495              		.loc 1 5211 11 is_stmt 0 view .LVU3564
 10496 004e 0398     		ldr	r0, [sp, #12]
 10497 0050 FFF7FEFF 		bl	sync_fs
 10498              	.LVL1233:
5211:Src/ff.c      **** 			}
 10499              		.loc 1 5211 11 view .LVU3565
 10500 0054 DFE7     		b	.L779
 10501              	.LVL1234:
 10502              	.L781:
5197:Src/ff.c      **** 		if (res == FR_OK) {
 10503              		.loc 1 5197 67 view .LVU3566
 10504 0056 0620     		movs	r0, #6
 10505              	.LVL1235:
5197:Src/ff.c      **** 		if (res == FR_OK) {
 10506              		.loc 1 5197 67 view .LVU3567
 10507 0058 DDE7     		b	.L779
 10508              		.cfi_endproc
 10509              	.LFE55:
 10511              		.section	.text.f_utime,"ax",%progbits
 10512              		.align	1
 10513              		.global	f_utime
 10514              		.syntax unified
 10515              		.thumb
 10516              		.thumb_func
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 325


 10517              		.fpu softvfp
 10519              	f_utime:
 10520              	.LVL1236:
 10521              	.LFB56:
5219:Src/ff.c      **** 
5220:Src/ff.c      **** 
5221:Src/ff.c      **** 
5222:Src/ff.c      **** 
5223:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5224:Src/ff.c      **** /* Change Timestamp                                                      */
5225:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5226:Src/ff.c      **** 
5227:Src/ff.c      **** FRESULT f_utime (
5228:Src/ff.c      **** 	const TCHAR* path,	/* Pointer to the file/directory name */
5229:Src/ff.c      **** 	const FILINFO* fno	/* Pointer to the timestamp to be set */
5230:Src/ff.c      **** )
5231:Src/ff.c      **** {
 10522              		.loc 1 5231 1 is_stmt 1 view -0
 10523              		.cfi_startproc
 10524              		@ args = 0, pretend = 0, frame = 64
 10525              		@ frame_needed = 0, uses_anonymous_args = 0
 10526              		.loc 1 5231 1 is_stmt 0 view .LVU3569
 10527 0000 10B5     		push	{r4, lr}
 10528              	.LCFI110:
 10529              		.cfi_def_cfa_offset 8
 10530              		.cfi_offset 4, -8
 10531              		.cfi_offset 14, -4
 10532 0002 90B0     		sub	sp, sp, #64
 10533              	.LCFI111:
 10534              		.cfi_def_cfa_offset 72
 10535 0004 0190     		str	r0, [sp, #4]
 10536 0006 0C46     		mov	r4, r1
5232:Src/ff.c      **** 	FRESULT res;
 10537              		.loc 1 5232 2 is_stmt 1 view .LVU3570
5233:Src/ff.c      **** 	DIR dj;
 10538              		.loc 1 5233 2 view .LVU3571
5234:Src/ff.c      **** 	FATFS *fs;
 10539              		.loc 1 5234 2 view .LVU3572
5235:Src/ff.c      **** 	DEF_NAMBUF
5236:Src/ff.c      **** 
5237:Src/ff.c      **** 
5238:Src/ff.c      **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 10540              		.loc 1 5238 2 view .LVU3573
 10541              		.loc 1 5238 8 is_stmt 0 view .LVU3574
 10542 0008 0222     		movs	r2, #2
 10543 000a 03A9     		add	r1, sp, #12
 10544              	.LVL1237:
 10545              		.loc 1 5238 8 view .LVU3575
 10546 000c 01A8     		add	r0, sp, #4
 10547              	.LVL1238:
 10548              		.loc 1 5238 8 view .LVU3576
 10549 000e FFF7FEFF 		bl	mount_volume
 10550              	.LVL1239:
5239:Src/ff.c      **** 	if (res == FR_OK) {
 10551              		.loc 1 5239 2 is_stmt 1 view .LVU3577
 10552              		.loc 1 5239 5 is_stmt 0 view .LVU3578
 10553 0012 08B1     		cbz	r0, .L789
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 326


 10554              	.L785:
 10555              	.LVL1240:
5240:Src/ff.c      **** 		dj.obj.fs = fs;
5241:Src/ff.c      **** 		INIT_NAMBUF(fs);
5242:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
5243:Src/ff.c      **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5244:Src/ff.c      **** 		if (res == FR_OK) {
5245:Src/ff.c      **** #if FF_FS_EXFAT
5246:Src/ff.c      **** 			if (fs->fs_type == FS_EXFAT) {
5247:Src/ff.c      **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5248:Src/ff.c      **** 				res = store_xdir(&dj);
5249:Src/ff.c      **** 			} else
5250:Src/ff.c      **** #endif
5251:Src/ff.c      **** 			{
5252:Src/ff.c      **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5253:Src/ff.c      **** 				fs->wflag = 1;
5254:Src/ff.c      **** 			}
5255:Src/ff.c      **** 			if (res == FR_OK) {
5256:Src/ff.c      **** 				res = sync_fs(fs);
5257:Src/ff.c      **** 			}
5258:Src/ff.c      **** 		}
5259:Src/ff.c      **** 		FREE_NAMBUF();
 10556              		.loc 1 5259 16 is_stmt 1 view .LVU3579
5260:Src/ff.c      **** 	}
5261:Src/ff.c      **** 
5262:Src/ff.c      **** 	LEAVE_FF(fs, res);
 10557              		.loc 1 5262 2 view .LVU3580
5263:Src/ff.c      **** }
 10558              		.loc 1 5263 1 is_stmt 0 view .LVU3581
 10559 0014 10B0     		add	sp, sp, #64
 10560              	.LCFI112:
 10561              		.cfi_remember_state
 10562              		.cfi_def_cfa_offset 8
 10563              		@ sp needed
 10564 0016 10BD     		pop	{r4, pc}
 10565              	.LVL1241:
 10566              	.L789:
 10567              	.LCFI113:
 10568              		.cfi_restore_state
5240:Src/ff.c      **** 		dj.obj.fs = fs;
 10569              		.loc 1 5240 3 is_stmt 1 view .LVU3582
5240:Src/ff.c      **** 		dj.obj.fs = fs;
 10570              		.loc 1 5240 13 is_stmt 0 view .LVU3583
 10571 0018 039B     		ldr	r3, [sp, #12]
 10572 001a 0493     		str	r3, [sp, #16]
5241:Src/ff.c      **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10573              		.loc 1 5241 18 is_stmt 1 view .LVU3584
5242:Src/ff.c      **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
 10574              		.loc 1 5242 3 view .LVU3585
5242:Src/ff.c      **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
 10575              		.loc 1 5242 9 is_stmt 0 view .LVU3586
 10576 001c 0199     		ldr	r1, [sp, #4]
 10577 001e 04A8     		add	r0, sp, #16
 10578 0020 FFF7FEFF 		bl	follow_path
 10579              	.LVL1242:
5243:Src/ff.c      **** 		if (res == FR_OK) {
 10580              		.loc 1 5243 3 is_stmt 1 view .LVU3587
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 327


5243:Src/ff.c      **** 		if (res == FR_OK) {
 10581              		.loc 1 5243 6 is_stmt 0 view .LVU3588
 10582 0024 20B9     		cbnz	r0, .L786
5243:Src/ff.c      **** 		if (res == FR_OK) {
 10583              		.loc 1 5243 29 discriminator 1 view .LVU3589
 10584 0026 9DF83B30 		ldrb	r3, [sp, #59]	@ zero_extendqisi2
5243:Src/ff.c      **** 		if (res == FR_OK) {
 10585              		.loc 1 5243 20 discriminator 1 view .LVU3590
 10586 002a 13F0A00F 		tst	r3, #160
 10587 002e 10D1     		bne	.L787
 10588              	.L786:
5244:Src/ff.c      **** #if FF_FS_EXFAT
 10589              		.loc 1 5244 3 is_stmt 1 view .LVU3591
5244:Src/ff.c      **** #if FF_FS_EXFAT
 10590              		.loc 1 5244 6 is_stmt 0 view .LVU3592
 10591 0030 0028     		cmp	r0, #0
 10592 0032 EFD1     		bne	.L785
5252:Src/ff.c      **** 				fs->wflag = 1;
 10593              		.loc 1 5252 5 is_stmt 1 view .LVU3593
5252:Src/ff.c      **** 				fs->wflag = 1;
 10594              		.loc 1 5252 46 is_stmt 0 view .LVU3594
 10595 0034 A188     		ldrh	r1, [r4, #4]
5252:Src/ff.c      **** 				fs->wflag = 1;
 10596              		.loc 1 5252 65 view .LVU3595
 10597 0036 E388     		ldrh	r3, [r4, #6]
5252:Src/ff.c      **** 				fs->wflag = 1;
 10598              		.loc 1 5252 5 view .LVU3596
 10599 0038 43EA0141 		orr	r1, r3, r1, lsl #16
 10600 003c 0B98     		ldr	r0, [sp, #44]
 10601              	.LVL1243:
5252:Src/ff.c      **** 				fs->wflag = 1;
 10602              		.loc 1 5252 5 view .LVU3597
 10603 003e 1630     		adds	r0, r0, #22
 10604 0040 FFF7FEFF 		bl	st_dword
 10605              	.LVL1244:
5253:Src/ff.c      **** 			}
 10606              		.loc 1 5253 5 is_stmt 1 view .LVU3598
5253:Src/ff.c      **** 			}
 10607              		.loc 1 5253 15 is_stmt 0 view .LVU3599
 10608 0044 039B     		ldr	r3, [sp, #12]
 10609 0046 0122     		movs	r2, #1
 10610 0048 DA70     		strb	r2, [r3, #3]
5255:Src/ff.c      **** 				res = sync_fs(fs);
 10611              		.loc 1 5255 4 is_stmt 1 view .LVU3600
5256:Src/ff.c      **** 			}
 10612              		.loc 1 5256 5 view .LVU3601
5256:Src/ff.c      **** 			}
 10613              		.loc 1 5256 11 is_stmt 0 view .LVU3602
 10614 004a 0398     		ldr	r0, [sp, #12]
 10615 004c FFF7FEFF 		bl	sync_fs
 10616              	.LVL1245:
5256:Src/ff.c      **** 			}
 10617              		.loc 1 5256 11 view .LVU3603
 10618 0050 E0E7     		b	.L785
 10619              	.L787:
5243:Src/ff.c      **** 		if (res == FR_OK) {
 10620              		.loc 1 5243 67 view .LVU3604
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 328


 10621 0052 0620     		movs	r0, #6
 10622              	.LVL1246:
5243:Src/ff.c      **** 		if (res == FR_OK) {
 10623              		.loc 1 5243 67 view .LVU3605
 10624 0054 DEE7     		b	.L785
 10625              		.cfi_endproc
 10626              	.LFE56:
 10628              		.section	.text.f_getlabel,"ax",%progbits
 10629              		.align	1
 10630              		.global	f_getlabel
 10631              		.syntax unified
 10632              		.thumb
 10633              		.thumb_func
 10634              		.fpu softvfp
 10636              	f_getlabel:
 10637              	.LVL1247:
 10638              	.LFB57:
5264:Src/ff.c      **** 
5265:Src/ff.c      **** #endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
5266:Src/ff.c      **** 
5267:Src/ff.c      **** 
5268:Src/ff.c      **** 
5269:Src/ff.c      **** #if FF_USE_LABEL
5270:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5271:Src/ff.c      **** /* Get Volume Label                                                      */
5272:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5273:Src/ff.c      **** 
5274:Src/ff.c      **** FRESULT f_getlabel (
5275:Src/ff.c      **** 	const TCHAR* path,	/* Logical drive number */
5276:Src/ff.c      **** 	TCHAR* label,		/* Buffer to store the volume label */
5277:Src/ff.c      **** 	DWORD* vsn			/* Variable to store the volume serial number */
5278:Src/ff.c      **** )
5279:Src/ff.c      **** {
 10639              		.loc 1 5279 1 is_stmt 1 view -0
 10640              		.cfi_startproc
 10641              		@ args = 0, pretend = 0, frame = 64
 10642              		@ frame_needed = 0, uses_anonymous_args = 0
 10643              		.loc 1 5279 1 is_stmt 0 view .LVU3607
 10644 0000 70B5     		push	{r4, r5, r6, lr}
 10645              	.LCFI114:
 10646              		.cfi_def_cfa_offset 16
 10647              		.cfi_offset 4, -16
 10648              		.cfi_offset 5, -12
 10649              		.cfi_offset 6, -8
 10650              		.cfi_offset 14, -4
 10651 0002 90B0     		sub	sp, sp, #64
 10652              	.LCFI115:
 10653              		.cfi_def_cfa_offset 80
 10654 0004 0190     		str	r0, [sp, #4]
 10655 0006 0C46     		mov	r4, r1
 10656 0008 1646     		mov	r6, r2
5280:Src/ff.c      **** 	FRESULT res;
 10657              		.loc 1 5280 2 is_stmt 1 view .LVU3608
5281:Src/ff.c      **** 	DIR dj;
 10658              		.loc 1 5281 2 view .LVU3609
5282:Src/ff.c      **** 	FATFS *fs;
 10659              		.loc 1 5282 2 view .LVU3610
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 329


5283:Src/ff.c      **** 	UINT si, di;
 10660              		.loc 1 5283 2 view .LVU3611
5284:Src/ff.c      **** 	WCHAR wc;
 10661              		.loc 1 5284 2 view .LVU3612
5285:Src/ff.c      **** 
5286:Src/ff.c      **** 	/* Get logical drive */
5287:Src/ff.c      **** 	res = mount_volume(&path, &fs, 0);
 10662              		.loc 1 5287 2 view .LVU3613
 10663              		.loc 1 5287 8 is_stmt 0 view .LVU3614
 10664 000a 0022     		movs	r2, #0
 10665              	.LVL1248:
 10666              		.loc 1 5287 8 view .LVU3615
 10667 000c 03A9     		add	r1, sp, #12
 10668              	.LVL1249:
 10669              		.loc 1 5287 8 view .LVU3616
 10670 000e 01A8     		add	r0, sp, #4
 10671              	.LVL1250:
 10672              		.loc 1 5287 8 view .LVU3617
 10673 0010 FFF7FEFF 		bl	mount_volume
 10674              	.LVL1251:
5288:Src/ff.c      **** 
5289:Src/ff.c      **** 	/* Get volume label */
5290:Src/ff.c      **** 	if (res == FR_OK && label) {
 10675              		.loc 1 5290 2 is_stmt 1 view .LVU3618
 10676              		.loc 1 5290 5 is_stmt 0 view .LVU3619
 10677 0014 0546     		mov	r5, r0
 10678 0016 68B9     		cbnz	r0, .L791
 10679              		.loc 1 5290 19 discriminator 1 view .LVU3620
 10680 0018 64B1     		cbz	r4, .L791
5291:Src/ff.c      **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 10681              		.loc 1 5291 3 is_stmt 1 view .LVU3621
 10682              		.loc 1 5291 13 is_stmt 0 view .LVU3622
 10683 001a 039B     		ldr	r3, [sp, #12]
 10684 001c 0493     		str	r3, [sp, #16]
 10685              		.loc 1 5291 19 is_stmt 1 view .LVU3623
 10686              		.loc 1 5291 33 is_stmt 0 view .LVU3624
 10687 001e 0021     		movs	r1, #0
 10688 0020 0691     		str	r1, [sp, #24]
5292:Src/ff.c      **** 		res = dir_sdi(&dj, 0);
 10689              		.loc 1 5292 3 is_stmt 1 view .LVU3625
 10690              		.loc 1 5292 9 is_stmt 0 view .LVU3626
 10691 0022 04A8     		add	r0, sp, #16
 10692              	.LVL1252:
 10693              		.loc 1 5292 9 view .LVU3627
 10694 0024 FFF7FEFF 		bl	dir_sdi
 10695              	.LVL1253:
5293:Src/ff.c      **** 		if (res == FR_OK) {
 10696              		.loc 1 5293 3 is_stmt 1 view .LVU3628
 10697              		.loc 1 5293 6 is_stmt 0 view .LVU3629
 10698 0028 8446     		mov	ip, r0
 10699 002a D0B1     		cbz	r0, .L804
 10700              	.L792:
 10701              	.LVL1254:
5294:Src/ff.c      **** 		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
5295:Src/ff.c      **** 		 	if (res == FR_OK) {
5296:Src/ff.c      **** #if FF_FS_EXFAT
5297:Src/ff.c      **** 				if (fs->fs_type == FS_EXFAT) {
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 330


5298:Src/ff.c      **** 					WCHAR hs;
5299:Src/ff.c      **** 					UINT nw;
5300:Src/ff.c      **** 
5301:Src/ff.c      **** 					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 ent
5302:Src/ff.c      **** 						wc = ld_word(dj.dir + XDIR_Label + si * 2);
5303:Src/ff.c      **** 						if (hs == 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
5304:Src/ff.c      **** 							hs = wc; continue;
5305:Src/ff.c      **** 						}
5306:Src/ff.c      **** 						nw = put_utf((DWORD)hs << 16 | wc, &label[di], 4);	/* Store it in API encoding */
5307:Src/ff.c      **** 						if (nw == 0) { di = 0; break; }		/* Encode error? */
5308:Src/ff.c      **** 						di += nw;
5309:Src/ff.c      **** 						hs = 0;
5310:Src/ff.c      **** 					}
5311:Src/ff.c      **** 					if (hs != 0) di = 0;	/* Broken surrogate pair? */
5312:Src/ff.c      **** 					label[di] = 0;
5313:Src/ff.c      **** 				} else
5314:Src/ff.c      **** #endif
5315:Src/ff.c      **** 				{
5316:Src/ff.c      **** 					si = di = 0;		/* Extract volume label from AM_VOL entry */
5317:Src/ff.c      **** 					while (si < 11) {
5318:Src/ff.c      **** 						wc = dj.dir[si++];
5319:Src/ff.c      **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
5320:Src/ff.c      **** 						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
5321:Src/ff.c      **** 						wc = ff_oem2uni(wc, CODEPAGE);		/* Convert it into Unicode */
5322:Src/ff.c      **** 						if (wc == 0) { di = 0; break; }		/* Invalid char in current code page? */
5323:Src/ff.c      **** 						di += put_utf(wc, &label[di], 4);	/* Store it in Unicode */
5324:Src/ff.c      **** #else									/* ANSI/OEM output */
5325:Src/ff.c      **** 						label[di++] = (TCHAR)wc;
5326:Src/ff.c      **** #endif
5327:Src/ff.c      **** 					}
5328:Src/ff.c      **** 					do {				/* Truncate trailing spaces */
5329:Src/ff.c      **** 						label[di] = 0;
5330:Src/ff.c      **** 						if (di == 0) break;
5331:Src/ff.c      **** 					} while (label[--di] == ' ');
5332:Src/ff.c      **** 				}
5333:Src/ff.c      **** 			}
5334:Src/ff.c      **** 		}
5335:Src/ff.c      **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
 10702              		.loc 1 5335 3 is_stmt 1 view .LVU3630
 10703              		.loc 1 5335 6 is_stmt 0 view .LVU3631
 10704 002c BCF1040F 		cmp	ip, #4
 10705 0030 31D0     		beq	.L805
 10706 0032 6546     		mov	r5, ip
 10707              	.LVL1255:
 10708              	.L791:
5336:Src/ff.c      **** 			label[0] = 0;
5337:Src/ff.c      **** 			res = FR_OK;
5338:Src/ff.c      **** 		}
5339:Src/ff.c      **** 	}
5340:Src/ff.c      **** 
5341:Src/ff.c      **** 	/* Get volume serial number */
5342:Src/ff.c      **** 	if (res == FR_OK && vsn) {
 10709              		.loc 1 5342 2 is_stmt 1 view .LVU3632
 10710              		.loc 1 5342 5 is_stmt 0 view .LVU3633
 10711 0034 95B9     		cbnz	r5, .L797
 10712              	.LVL1256:
 10713              	.L796:
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 331


 10714              		.loc 1 5342 19 discriminator 1 view .LVU3634
 10715 0036 8EB1     		cbz	r6, .L797
5343:Src/ff.c      **** 		res = move_window(fs, fs->volbase);
 10716              		.loc 1 5343 3 is_stmt 1 view .LVU3635
 10717              		.loc 1 5343 9 is_stmt 0 view .LVU3636
 10718 0038 0398     		ldr	r0, [sp, #12]
 10719 003a 016A     		ldr	r1, [r0, #32]
 10720 003c FFF7FEFF 		bl	move_window
 10721              	.LVL1257:
5344:Src/ff.c      **** 		if (res == FR_OK) {
 10722              		.loc 1 5344 3 is_stmt 1 view .LVU3637
 10723              		.loc 1 5344 6 is_stmt 0 view .LVU3638
 10724 0040 0546     		mov	r5, r0
 10725 0042 58B9     		cbnz	r0, .L797
5345:Src/ff.c      **** 			switch (fs->fs_type) {
 10726              		.loc 1 5345 4 is_stmt 1 view .LVU3639
 10727              		.loc 1 5345 14 is_stmt 0 view .LVU3640
 10728 0044 039B     		ldr	r3, [sp, #12]
 10729 0046 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 10730              		.loc 1 5345 4 view .LVU3641
 10731 0048 032A     		cmp	r2, #3
 10732 004a 27D0     		beq	.L801
 10733 004c 042A     		cmp	r2, #4
 10734 004e 27D1     		bne	.L802
 10735 0050 6420     		movs	r0, #100
 10736              	.LVL1258:
 10737              	.L798:
5346:Src/ff.c      **** 			case FS_EXFAT:
5347:Src/ff.c      **** 				di = BPB_VolIDEx;
5348:Src/ff.c      **** 				break;
5349:Src/ff.c      **** 
5350:Src/ff.c      **** 			case FS_FAT32:
5351:Src/ff.c      **** 				di = BS_VolID32;
5352:Src/ff.c      **** 				break;
5353:Src/ff.c      **** 
5354:Src/ff.c      **** 			default:
5355:Src/ff.c      **** 				di = BS_VolID;
5356:Src/ff.c      **** 			}
5357:Src/ff.c      **** 			*vsn = ld_dword(fs->win + di);
 10738              		.loc 1 5357 4 is_stmt 1 view .LVU3642
 10739              		.loc 1 5357 20 is_stmt 0 view .LVU3643
 10740 0052 3433     		adds	r3, r3, #52
 10741              		.loc 1 5357 11 view .LVU3644
 10742 0054 1844     		add	r0, r0, r3
 10743              	.LVL1259:
 10744              		.loc 1 5357 11 view .LVU3645
 10745 0056 FFF7FEFF 		bl	ld_dword
 10746              	.LVL1260:
 10747              		.loc 1 5357 9 view .LVU3646
 10748 005a 3060     		str	r0, [r6]
 10749              	.L797:
 10750              	.LVL1261:
5358:Src/ff.c      **** 		}
5359:Src/ff.c      **** 	}
5360:Src/ff.c      **** 
5361:Src/ff.c      **** 	LEAVE_FF(fs, res);
 10751              		.loc 1 5361 2 is_stmt 1 view .LVU3647
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 332


5362:Src/ff.c      **** }
 10752              		.loc 1 5362 1 is_stmt 0 view .LVU3648
 10753 005c 2846     		mov	r0, r5
 10754 005e 10B0     		add	sp, sp, #64
 10755              	.LCFI116:
 10756              		.cfi_remember_state
 10757              		.cfi_def_cfa_offset 16
 10758              		@ sp needed
 10759 0060 70BD     		pop	{r4, r5, r6, pc}
 10760              	.LVL1262:
 10761              	.L804:
 10762              	.LCFI117:
 10763              		.cfi_restore_state
5294:Src/ff.c      **** 		 	if (res == FR_OK) {
 10764              		.loc 1 5294 5 is_stmt 1 view .LVU3649
5294:Src/ff.c      **** 		 	if (res == FR_OK) {
 10765              		.loc 1 5294 11 is_stmt 0 view .LVU3650
 10766 0062 0121     		movs	r1, #1
 10767 0064 04A8     		add	r0, sp, #16
 10768              	.LVL1263:
5294:Src/ff.c      **** 		 	if (res == FR_OK) {
 10769              		.loc 1 5294 11 view .LVU3651
 10770 0066 FFF7FEFF 		bl	dir_read
 10771              	.LVL1264:
5295:Src/ff.c      **** #if FF_FS_EXFAT
 10772              		.loc 1 5295 5 is_stmt 1 view .LVU3652
5295:Src/ff.c      **** #if FF_FS_EXFAT
 10773              		.loc 1 5295 8 is_stmt 0 view .LVU3653
 10774 006a 8446     		mov	ip, r0
 10775 006c 0028     		cmp	r0, #0
 10776 006e DDD1     		bne	.L792
5316:Src/ff.c      **** 					while (si < 11) {
 10777              		.loc 1 5316 14 view .LVU3654
 10778 0070 0023     		movs	r3, #0
5316:Src/ff.c      **** 					while (si < 11) {
 10779              		.loc 1 5316 9 view .LVU3655
 10780 0072 1946     		mov	r1, r3
 10781              	.L793:
 10782              	.LVL1265:
5317:Src/ff.c      **** 						wc = dj.dir[si++];
 10783              		.loc 1 5317 12 is_stmt 1 view .LVU3656
 10784 0074 0A29     		cmp	r1, #10
 10785 0076 05D8     		bhi	.L795
5318:Src/ff.c      **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
 10786              		.loc 1 5318 7 view .LVU3657
 10787              	.LVL1266:
5318:Src/ff.c      **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
 10788              		.loc 1 5318 18 is_stmt 0 view .LVU3658
 10789 0078 0B9A     		ldr	r2, [sp, #44]
 10790 007a 525C     		ldrb	r2, [r2, r1]	@ zero_extendqisi2
 10791              	.LVL1267:
5325:Src/ff.c      **** #endif
 10792              		.loc 1 5325 7 is_stmt 1 view .LVU3659
5325:Src/ff.c      **** #endif
 10793              		.loc 1 5325 19 is_stmt 0 view .LVU3660
 10794 007c E254     		strb	r2, [r4, r3]
5325:Src/ff.c      **** #endif
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 333


 10795              		.loc 1 5325 15 view .LVU3661
 10796 007e 0133     		adds	r3, r3, #1
 10797              	.LVL1268:
5318:Src/ff.c      **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
 10798              		.loc 1 5318 21 view .LVU3662
 10799 0080 0131     		adds	r1, r1, #1
 10800              	.LVL1269:
5318:Src/ff.c      **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
 10801              		.loc 1 5318 21 view .LVU3663
 10802 0082 F7E7     		b	.L793
 10803              	.LVL1270:
 10804              	.L795:
5328:Src/ff.c      **** 						label[di] = 0;
 10805              		.loc 1 5328 6 is_stmt 1 view .LVU3664
5329:Src/ff.c      **** 						if (di == 0) break;
 10806              		.loc 1 5329 7 view .LVU3665
5329:Src/ff.c      **** 						if (di == 0) break;
 10807              		.loc 1 5329 17 is_stmt 0 view .LVU3666
 10808 0084 0022     		movs	r2, #0
 10809 0086 E254     		strb	r2, [r4, r3]
5330:Src/ff.c      **** 					} while (label[--di] == ' ');
 10810              		.loc 1 5330 7 is_stmt 1 view .LVU3667
5330:Src/ff.c      **** 					} while (label[--di] == ' ');
 10811              		.loc 1 5330 10 is_stmt 0 view .LVU3668
 10812 0088 002B     		cmp	r3, #0
 10813 008a CFD0     		beq	.L792
5331:Src/ff.c      **** 				}
 10814              		.loc 1 5331 14 is_stmt 1 view .LVU3669
5331:Src/ff.c      **** 				}
 10815              		.loc 1 5331 6 is_stmt 0 view .LVU3670
 10816 008c 013B     		subs	r3, r3, #1
 10817              	.LVL1271:
5331:Src/ff.c      **** 				}
 10818              		.loc 1 5331 20 view .LVU3671
 10819 008e E25C     		ldrb	r2, [r4, r3]	@ zero_extendqisi2
5331:Src/ff.c      **** 				}
 10820              		.loc 1 5331 6 view .LVU3672
 10821 0090 202A     		cmp	r2, #32
 10822 0092 F7D0     		beq	.L795
 10823 0094 CAE7     		b	.L792
 10824              	.LVL1272:
 10825              	.L805:
5336:Src/ff.c      **** 			res = FR_OK;
 10826              		.loc 1 5336 4 is_stmt 1 view .LVU3673
5336:Src/ff.c      **** 			res = FR_OK;
 10827              		.loc 1 5336 13 is_stmt 0 view .LVU3674
 10828 0096 0023     		movs	r3, #0
 10829 0098 2370     		strb	r3, [r4]
5337:Src/ff.c      **** 		}
 10830              		.loc 1 5337 4 is_stmt 1 view .LVU3675
 10831              	.LVL1273:
5342:Src/ff.c      **** 		res = move_window(fs, fs->volbase);
 10832              		.loc 1 5342 2 view .LVU3676
 10833 009a CCE7     		b	.L796
 10834              	.LVL1274:
 10835              	.L801:
5351:Src/ff.c      **** 				break;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 334


 10836              		.loc 1 5351 8 is_stmt 0 view .LVU3677
 10837 009c 4320     		movs	r0, #67
 10838              	.LVL1275:
5351:Src/ff.c      **** 				break;
 10839              		.loc 1 5351 8 view .LVU3678
 10840 009e D8E7     		b	.L798
 10841              	.LVL1276:
 10842              	.L802:
5355:Src/ff.c      **** 			}
 10843              		.loc 1 5355 8 view .LVU3679
 10844 00a0 2720     		movs	r0, #39
 10845              	.LVL1277:
5355:Src/ff.c      **** 			}
 10846              		.loc 1 5355 8 view .LVU3680
 10847 00a2 D6E7     		b	.L798
 10848              		.cfi_endproc
 10849              	.LFE57:
 10851              		.section	.text.f_setlabel,"ax",%progbits
 10852              		.align	1
 10853              		.global	f_setlabel
 10854              		.syntax unified
 10855              		.thumb
 10856              		.thumb_func
 10857              		.fpu softvfp
 10859              	f_setlabel:
 10860              	.LVL1278:
 10861              	.LFB58:
5363:Src/ff.c      **** 
5364:Src/ff.c      **** 
5365:Src/ff.c      **** 
5366:Src/ff.c      **** #if !FF_FS_READONLY
5367:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5368:Src/ff.c      **** /* Set Volume Label                                                      */
5369:Src/ff.c      **** /*-----------------------------------------------------------------------*/
5370:Src/ff.c      **** 
5371:Src/ff.c      **** FRESULT f_setlabel (
5372:Src/ff.c      **** 	const TCHAR* label	/* Volume label to set with heading logical drive number */
5373:Src/ff.c      **** )
5374:Src/ff.c      **** {
 10862              		.loc 1 5374 1 is_stmt 1 view -0
 10863              		.cfi_startproc
 10864              		@ args = 0, pretend = 0, frame = 88
 10865              		@ frame_needed = 0, uses_anonymous_args = 0
 10866              		.loc 1 5374 1 is_stmt 0 view .LVU3682
 10867 0000 30B5     		push	{r4, r5, lr}
 10868              	.LCFI118:
 10869              		.cfi_def_cfa_offset 12
 10870              		.cfi_offset 4, -12
 10871              		.cfi_offset 5, -8
 10872              		.cfi_offset 14, -4
 10873 0002 97B0     		sub	sp, sp, #92
 10874              	.LCFI119:
 10875              		.cfi_def_cfa_offset 104
 10876 0004 0190     		str	r0, [sp, #4]
5375:Src/ff.c      **** 	FRESULT res;
 10877              		.loc 1 5375 2 is_stmt 1 view .LVU3683
5376:Src/ff.c      **** 	DIR dj;
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 335


 10878              		.loc 1 5376 2 view .LVU3684
5377:Src/ff.c      **** 	FATFS *fs;
 10879              		.loc 1 5377 2 view .LVU3685
5378:Src/ff.c      **** 	BYTE dirvn[22];
 10880              		.loc 1 5378 2 view .LVU3686
5379:Src/ff.c      **** 	UINT di;
 10881              		.loc 1 5379 2 view .LVU3687
5380:Src/ff.c      **** 	WCHAR wc;
 10882              		.loc 1 5380 2 view .LVU3688
5381:Src/ff.c      **** 	static const char badchr[18] = "+.,;=[]" "/*:<>|\\\"\?\x7F";	/* [0..16] for FAT, [7..16] for exFAT
 10883              		.loc 1 5381 2 view .LVU3689
5382:Src/ff.c      **** #if FF_USE_LFN
5383:Src/ff.c      **** 	DWORD dc;
 10884              		.loc 1 5383 2 view .LVU3690
5384:Src/ff.c      **** #endif
5385:Src/ff.c      **** 
5386:Src/ff.c      **** 	/* Get logical drive */
5387:Src/ff.c      **** 	res = mount_volume(&label, &fs, FA_WRITE);
 10885              		.loc 1 5387 2 view .LVU3691
 10886              		.loc 1 5387 8 is_stmt 0 view .LVU3692
 10887 0006 0222     		movs	r2, #2
 10888 0008 09A9     		add	r1, sp, #36
 10889 000a 01A8     		add	r0, sp, #4
 10890              	.LVL1279:
 10891              		.loc 1 5387 8 view .LVU3693
 10892 000c FFF7FEFF 		bl	mount_volume
 10893              	.LVL1280:
5388:Src/ff.c      **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 10894              		.loc 1 5388 2 is_stmt 1 view .LVU3694
 10895              		.loc 1 5388 5 is_stmt 0 view .LVU3695
 10896 0010 0546     		mov	r5, r0
 10897 0012 10B1     		cbz	r0, .L824
 10898              	.LVL1281:
 10899              	.L807:
5389:Src/ff.c      **** 
5390:Src/ff.c      **** #if FF_FS_EXFAT
5391:Src/ff.c      **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5392:Src/ff.c      **** 		memset(dirvn, 0, 22);
5393:Src/ff.c      **** 		di = 0;
5394:Src/ff.c      **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5395:Src/ff.c      **** 			dc = tchar2uni(&label);	/* Get a Unicode character */
5396:Src/ff.c      **** 			if (dc >= 0x10000) {
5397:Src/ff.c      **** 				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
5398:Src/ff.c      **** 					dc = 0;
5399:Src/ff.c      **** 				} else {
5400:Src/ff.c      **** 					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
5401:Src/ff.c      **** 				}
5402:Src/ff.c      **** 			}
5403:Src/ff.c      **** 			if (dc == 0 || strchr(&badchr[7], (int)dc) || di >= 11) {	/* Check validity of the volume label 
5404:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5405:Src/ff.c      **** 			}
5406:Src/ff.c      **** 			st_word(dirvn + di * 2, (WCHAR)dc); di++;
5407:Src/ff.c      **** 		}
5408:Src/ff.c      **** 	} else
5409:Src/ff.c      **** #endif
5410:Src/ff.c      **** 	{	/* On the FAT/FAT32 volume */
5411:Src/ff.c      **** 		memset(dirvn, ' ', 11);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 336


5412:Src/ff.c      **** 		di = 0;
5413:Src/ff.c      **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5414:Src/ff.c      **** #if FF_USE_LFN
5415:Src/ff.c      **** 			dc = tchar2uni(&label);
5416:Src/ff.c      **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
5417:Src/ff.c      **** #else									/* ANSI/OEM input */
5418:Src/ff.c      **** 			wc = (BYTE)*label++;
5419:Src/ff.c      **** 			if (dbc_1st((BYTE)wc)) wc = dbc_2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
5420:Src/ff.c      **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
5421:Src/ff.c      **** #if FF_CODE_PAGE == 0
5422:Src/ff.c      **** 			if (ExCvt && wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5423:Src/ff.c      **** #elif FF_CODE_PAGE < 900
5424:Src/ff.c      **** 			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5425:Src/ff.c      **** #endif
5426:Src/ff.c      **** #endif
5427:Src/ff.c      **** 			if (wc == 0 || strchr(&badchr[0], (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject
5428:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5429:Src/ff.c      **** 			}
5430:Src/ff.c      **** 			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
5431:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
5432:Src/ff.c      **** 		}
5433:Src/ff.c      **** 		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5434:Src/ff.c      **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
5435:Src/ff.c      **** 	}
5436:Src/ff.c      **** 
5437:Src/ff.c      **** 	/* Set volume label */
5438:Src/ff.c      **** 	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5439:Src/ff.c      **** 	res = dir_sdi(&dj, 0);
5440:Src/ff.c      **** 	if (res == FR_OK) {
5441:Src/ff.c      **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
5442:Src/ff.c      **** 		if (res == FR_OK) {
5443:Src/ff.c      **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5444:Src/ff.c      **** 				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
5445:Src/ff.c      **** 				memcpy(dj.dir + XDIR_Label, dirvn, 22);
5446:Src/ff.c      **** 			} else {
5447:Src/ff.c      **** 				if (di != 0) {
5448:Src/ff.c      **** 					memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
5449:Src/ff.c      **** 				} else {
5450:Src/ff.c      **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5451:Src/ff.c      **** 				}
5452:Src/ff.c      **** 			}
5453:Src/ff.c      **** 			fs->wflag = 1;
5454:Src/ff.c      **** 			res = sync_fs(fs);
5455:Src/ff.c      **** 		} else {			/* No volume label entry or an error */
5456:Src/ff.c      **** 			if (res == FR_NO_FILE) {
5457:Src/ff.c      **** 				res = FR_OK;
5458:Src/ff.c      **** 				if (di != 0) {	/* Create a volume label entry */
5459:Src/ff.c      **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5460:Src/ff.c      **** 					if (res == FR_OK) {
5461:Src/ff.c      **** 						memset(dj.dir, 0, SZDIRE);	/* Clean the entry */
5462:Src/ff.c      **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5463:Src/ff.c      **** 							dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label entry */
5464:Src/ff.c      **** 							dj.dir[XDIR_NumLabel] = (BYTE)di;
5465:Src/ff.c      **** 							memcpy(dj.dir + XDIR_Label, dirvn, 22);
5466:Src/ff.c      **** 						} else {
5467:Src/ff.c      **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5468:Src/ff.c      **** 							memcpy(dj.dir, dirvn, 11);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 337


5469:Src/ff.c      **** 						}
5470:Src/ff.c      **** 						fs->wflag = 1;
5471:Src/ff.c      **** 						res = sync_fs(fs);
5472:Src/ff.c      **** 					}
5473:Src/ff.c      **** 				}
5474:Src/ff.c      **** 			}
5475:Src/ff.c      **** 		}
5476:Src/ff.c      **** 	}
5477:Src/ff.c      **** 
5478:Src/ff.c      **** 	LEAVE_FF(fs, res);
5479:Src/ff.c      **** }
 10900              		.loc 1 5479 1 view .LVU3696
 10901 0014 2846     		mov	r0, r5
 10902 0016 17B0     		add	sp, sp, #92
 10903              	.LCFI120:
 10904              		.cfi_remember_state
 10905              		.cfi_def_cfa_offset 12
 10906              		@ sp needed
 10907 0018 30BD     		pop	{r4, r5, pc}
 10908              	.LVL1282:
 10909              	.L824:
 10910              	.LCFI121:
 10911              		.cfi_restore_state
5411:Src/ff.c      **** 		di = 0;
 10912              		.loc 1 5411 3 is_stmt 1 view .LVU3697
 10913 001a 4FF02033 		mov	r3, #538976288
 10914 001e 0393     		str	r3, [sp, #12]
 10915 0020 0493     		str	r3, [sp, #16]
 10916 0022 CDF81330 		str	r3, [sp, #19]	@ unaligned
5412:Src/ff.c      **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
 10917              		.loc 1 5412 3 view .LVU3698
 10918              	.LVL1283:
5413:Src/ff.c      **** #if FF_USE_LFN
 10919              		.loc 1 5413 3 view .LVU3699
5412:Src/ff.c      **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
 10920              		.loc 1 5412 6 is_stmt 0 view .LVU3700
 10921 0026 0024     		movs	r4, #0
5413:Src/ff.c      **** #if FF_USE_LFN
 10922              		.loc 1 5413 9 view .LVU3701
 10923 0028 09E0     		b	.L808
 10924              	.LVL1284:
 10925              	.L819:
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10926              		.loc 1 5427 56 view .LVU3702
 10927 002a 0B23     		movs	r3, #11
 10928 002c 23E0     		b	.L810
 10929              	.L809:
5428:Src/ff.c      **** 			}
 10930              		.loc 1 5428 5 is_stmt 1 view .LVU3703
 10931 002e 0625     		movs	r5, #6
 10932 0030 F0E7     		b	.L807
 10933              	.L812:
5431:Src/ff.c      **** 		}
 10934              		.loc 1 5431 4 view .LVU3704
 10935              	.LVL1285:
5431:Src/ff.c      **** 		}
 10936              		.loc 1 5431 16 is_stmt 0 view .LVU3705
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 338


 10937 0032 04F15803 		add	r3, r4, #88
 10938 0036 6B44     		add	r3, sp, r3
 10939 0038 03F84C5C 		strb	r5, [r3, #-76]
5431:Src/ff.c      **** 		}
 10940              		.loc 1 5431 12 view .LVU3706
 10941 003c 0134     		adds	r4, r4, #1
 10942              	.LVL1286:
 10943              	.L808:
5413:Src/ff.c      **** #if FF_USE_LFN
 10944              		.loc 1 5413 9 is_stmt 1 view .LVU3707
5413:Src/ff.c      **** #if FF_USE_LFN
 10945              		.loc 1 5413 16 is_stmt 0 view .LVU3708
 10946 003e 019B     		ldr	r3, [sp, #4]
 10947 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
5413:Src/ff.c      **** #if FF_USE_LFN
 10948              		.loc 1 5413 9 view .LVU3709
 10949 0042 1F2B     		cmp	r3, #31
 10950 0044 24D9     		bls	.L825
5415:Src/ff.c      **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
 10951              		.loc 1 5415 4 is_stmt 1 view .LVU3710
5415:Src/ff.c      **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
 10952              		.loc 1 5415 9 is_stmt 0 view .LVU3711
 10953 0046 01A8     		add	r0, sp, #4
 10954 0048 FFF7FEFF 		bl	tchar2uni
 10955              	.LVL1287:
5416:Src/ff.c      **** #else									/* ANSI/OEM input */
 10956              		.loc 1 5416 4 is_stmt 1 view .LVU3712
5416:Src/ff.c      **** #else									/* ANSI/OEM input */
 10957              		.loc 1 5416 7 is_stmt 0 view .LVU3713
 10958 004c B0F5803F 		cmp	r0, #65536
 10959 0050 EDD2     		bcs	.L809
5416:Src/ff.c      **** #else									/* ANSI/OEM input */
 10960              		.loc 1 5416 26 discriminator 1 view .LVU3714
 10961 0052 FFF7FEFF 		bl	ff_wtoupper
 10962              	.LVL1288:
5416:Src/ff.c      **** #else									/* ANSI/OEM input */
 10963              		.loc 1 5416 26 discriminator 1 view .LVU3715
 10964 0056 4FF46971 		mov	r1, #932
 10965 005a FFF7FEFF 		bl	ff_uni2oem
 10966              	.LVL1289:
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10967              		.loc 1 5427 4 is_stmt 1 discriminator 1 view .LVU3716
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10968              		.loc 1 5427 7 is_stmt 0 discriminator 1 view .LVU3717
 10969 005e 0546     		mov	r5, r0
 10970 0060 0028     		cmp	r0, #0
 10971 0062 E4D0     		beq	.L809
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10972              		.loc 1 5427 19 discriminator 1 view .LVU3718
 10973 0064 0146     		mov	r1, r0
 10974 0066 3848     		ldr	r0, .L828
 10975              	.LVL1290:
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10976              		.loc 1 5427 19 discriminator 1 view .LVU3719
 10977 0068 FFF7FEFF 		bl	strchr
 10978              	.LVL1291:
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 339


 10979              		.loc 1 5427 16 discriminator 1 view .LVU3720
 10980 006c 0028     		cmp	r0, #0
 10981 006e DED1     		bne	.L809
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10982              		.loc 1 5427 56 discriminator 2 view .LVU3721
 10983 0070 FF2D     		cmp	r5, #255
 10984 0072 DAD9     		bls	.L819
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10985              		.loc 1 5427 56 view .LVU3722
 10986 0074 0A23     		movs	r3, #10
 10987              	.L810:
5427:Src/ff.c      **** 				LEAVE_FF(fs, FR_INVALID_NAME);
 10988              		.loc 1 5427 47 discriminator 6 view .LVU3723
 10989 0076 A342     		cmp	r3, r4
 10990 0078 D9D9     		bls	.L809
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 10991              		.loc 1 5430 4 is_stmt 1 view .LVU3724
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 10992              		.loc 1 5430 7 is_stmt 0 view .LVU3725
 10993 007a FF2D     		cmp	r5, #255
 10994 007c D9D9     		bls	.L812
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 10995              		.loc 1 5430 21 is_stmt 1 discriminator 1 view .LVU3726
 10996              	.LVL1292:
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 10997              		.loc 1 5430 35 is_stmt 0 discriminator 1 view .LVU3727
 10998 007e C5F30723 		ubfx	r3, r5, #8, #8
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 10999              		.loc 1 5430 33 discriminator 1 view .LVU3728
 11000 0082 04F15802 		add	r2, r4, #88
 11001 0086 6A44     		add	r2, sp, r2
 11002 0088 02F84C3C 		strb	r3, [r2, #-76]
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 11003              		.loc 1 5430 29 discriminator 1 view .LVU3729
 11004 008c 0134     		adds	r4, r4, #1
 11005              	.LVL1293:
5430:Src/ff.c      **** 			dirvn[di++] = (BYTE)wc;
 11006              		.loc 1 5430 29 discriminator 1 view .LVU3730
 11007 008e D0E7     		b	.L812
 11008              	.L825:
5433:Src/ff.c      **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 11009              		.loc 1 5433 3 is_stmt 1 view .LVU3731
5433:Src/ff.c      **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 11010              		.loc 1 5433 12 is_stmt 0 view .LVU3732
 11011 0090 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
5433:Src/ff.c      **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 11012              		.loc 1 5433 6 view .LVU3733
 11013 0094 E52B     		cmp	r3, #229
 11014 0096 02D1     		bne	.L815
5433:Src/ff.c      **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 11015              		.loc 1 5433 25 view .LVU3734
 11016 0098 0625     		movs	r5, #6
 11017 009a BBE7     		b	.L807
 11018              	.L821:
5434:Src/ff.c      **** 	}
 11019              		.loc 1 5434 40 view .LVU3735
 11020 009c 1C46     		mov	r4, r3
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 340


 11021              	.LVL1294:
 11022              	.L815:
5434:Src/ff.c      **** 	}
 11023              		.loc 1 5434 9 is_stmt 1 discriminator 1 view .LVU3736
 11024 009e 3CB1     		cbz	r4, .L814
5434:Src/ff.c      **** 	}
 11025              		.loc 1 5434 25 is_stmt 0 discriminator 2 view .LVU3737
 11026 00a0 631E     		subs	r3, r4, #1
5434:Src/ff.c      **** 	}
 11027              		.loc 1 5434 21 discriminator 2 view .LVU3738
 11028 00a2 03F15802 		add	r2, r3, #88
 11029 00a6 6A44     		add	r2, sp, r2
 11030 00a8 12F84C2C 		ldrb	r2, [r2, #-76]	@ zero_extendqisi2
5434:Src/ff.c      **** 	}
 11031              		.loc 1 5434 13 discriminator 2 view .LVU3739
 11032 00ac 202A     		cmp	r2, #32
 11033 00ae F5D0     		beq	.L821
 11034              	.L814:
5438:Src/ff.c      **** 	res = dir_sdi(&dj, 0);
 11035              		.loc 1 5438 2 is_stmt 1 view .LVU3740
5438:Src/ff.c      **** 	res = dir_sdi(&dj, 0);
 11036              		.loc 1 5438 12 is_stmt 0 view .LVU3741
 11037 00b0 099B     		ldr	r3, [sp, #36]
 11038 00b2 0A93     		str	r3, [sp, #40]
5438:Src/ff.c      **** 	res = dir_sdi(&dj, 0);
 11039              		.loc 1 5438 18 is_stmt 1 view .LVU3742
5438:Src/ff.c      **** 	res = dir_sdi(&dj, 0);
 11040              		.loc 1 5438 32 is_stmt 0 view .LVU3743
 11041 00b4 0021     		movs	r1, #0
 11042 00b6 0C91     		str	r1, [sp, #48]
5439:Src/ff.c      **** 	if (res == FR_OK) {
 11043              		.loc 1 5439 2 is_stmt 1 view .LVU3744
5439:Src/ff.c      **** 	if (res == FR_OK) {
 11044              		.loc 1 5439 8 is_stmt 0 view .LVU3745
 11045 00b8 0AA8     		add	r0, sp, #40
 11046 00ba FFF7FEFF 		bl	dir_sdi
 11047              	.LVL1295:
5440:Src/ff.c      **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 11048              		.loc 1 5440 2 is_stmt 1 view .LVU3746
5440:Src/ff.c      **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 11049              		.loc 1 5440 5 is_stmt 0 view .LVU3747
 11050 00be 0546     		mov	r5, r0
 11051 00c0 0028     		cmp	r0, #0
 11052 00c2 A7D1     		bne	.L807
5441:Src/ff.c      **** 		if (res == FR_OK) {
 11053              		.loc 1 5441 3 is_stmt 1 view .LVU3748
5441:Src/ff.c      **** 		if (res == FR_OK) {
 11054              		.loc 1 5441 9 is_stmt 0 view .LVU3749
 11055 00c4 0121     		movs	r1, #1
 11056 00c6 0AA8     		add	r0, sp, #40
 11057              	.LVL1296:
5441:Src/ff.c      **** 		if (res == FR_OK) {
 11058              		.loc 1 5441 9 view .LVU3750
 11059 00c8 FFF7FEFF 		bl	dir_read
 11060              	.LVL1297:
5442:Src/ff.c      **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
 11061              		.loc 1 5442 3 is_stmt 1 view .LVU3751
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 341


5442:Src/ff.c      **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
 11062              		.loc 1 5442 6 is_stmt 0 view .LVU3752
 11063 00cc A8B9     		cbnz	r0, .L816
5443:Src/ff.c      **** 				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
 11064              		.loc 1 5443 4 is_stmt 1 view .LVU3753
5447:Src/ff.c      **** 					memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
 11065              		.loc 1 5447 5 view .LVU3754
5447:Src/ff.c      **** 					memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
 11066              		.loc 1 5447 8 is_stmt 0 view .LVU3755
 11067 00ce 54B9     		cbnz	r4, .L826
5450:Src/ff.c      **** 				}
 11068              		.loc 1 5450 6 is_stmt 1 view .LVU3756
5450:Src/ff.c      **** 				}
 11069              		.loc 1 5450 23 is_stmt 0 view .LVU3757
 11070 00d0 119B     		ldr	r3, [sp, #68]
 11071 00d2 E522     		movs	r2, #229
 11072 00d4 1A70     		strb	r2, [r3]
 11073              	.LVL1298:
 11074              	.L818:
5453:Src/ff.c      **** 			res = sync_fs(fs);
 11075              		.loc 1 5453 4 is_stmt 1 view .LVU3758
5453:Src/ff.c      **** 			res = sync_fs(fs);
 11076              		.loc 1 5453 14 is_stmt 0 view .LVU3759
 11077 00d6 099B     		ldr	r3, [sp, #36]
 11078 00d8 0122     		movs	r2, #1
 11079 00da DA70     		strb	r2, [r3, #3]
5454:Src/ff.c      **** 		} else {			/* No volume label entry or an error */
 11080              		.loc 1 5454 4 is_stmt 1 view .LVU3760
5454:Src/ff.c      **** 		} else {			/* No volume label entry or an error */
 11081              		.loc 1 5454 10 is_stmt 0 view .LVU3761
 11082 00dc 0998     		ldr	r0, [sp, #36]
 11083 00de FFF7FEFF 		bl	sync_fs
 11084              	.LVL1299:
 11085 00e2 0546     		mov	r5, r0
 11086              	.LVL1300:
5454:Src/ff.c      **** 		} else {			/* No volume label entry or an error */
 11087              		.loc 1 5454 10 view .LVU3762
 11088 00e4 96E7     		b	.L807
 11089              	.LVL1301:
 11090              	.L826:
5448:Src/ff.c      **** 				} else {
 11091              		.loc 1 5448 6 is_stmt 1 view .LVU3763
5448:Src/ff.c      **** 				} else {
 11092              		.loc 1 5448 15 is_stmt 0 view .LVU3764
 11093 00e6 119A     		ldr	r2, [sp, #68]
5448:Src/ff.c      **** 				} else {
 11094              		.loc 1 5448 6 view .LVU3765
 11095 00e8 03AB     		add	r3, sp, #12
 11096 00ea 03CB     		ldmia	r3!, {r0, r1}
 11097              	.LVL1302:
5448:Src/ff.c      **** 				} else {
 11098              		.loc 1 5448 6 view .LVU3766
 11099 00ec 1060     		str	r0, [r2]	@ unaligned
 11100 00ee 5160     		str	r1, [r2, #4]	@ unaligned
 11101 00f0 1988     		ldrh	r1, [r3]	@ unaligned
 11102 00f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 11103 00f4 1181     		strh	r1, [r2, #8]	@ unaligned
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 342


 11104 00f6 9372     		strb	r3, [r2, #10]
 11105 00f8 EDE7     		b	.L818
 11106              	.LVL1303:
 11107              	.L816:
5456:Src/ff.c      **** 				res = FR_OK;
 11108              		.loc 1 5456 4 is_stmt 1 view .LVU3767
5456:Src/ff.c      **** 				res = FR_OK;
 11109              		.loc 1 5456 7 is_stmt 0 view .LVU3768
 11110 00fa 0428     		cmp	r0, #4
 11111 00fc 01D0     		beq	.L827
5441:Src/ff.c      **** 		if (res == FR_OK) {
 11112              		.loc 1 5441 9 view .LVU3769
 11113 00fe 0546     		mov	r5, r0
 11114 0100 88E7     		b	.L807
 11115              	.L827:
5457:Src/ff.c      **** 				if (di != 0) {	/* Create a volume label entry */
 11116              		.loc 1 5457 5 is_stmt 1 view .LVU3770
 11117              	.LVL1304:
5458:Src/ff.c      **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 11118              		.loc 1 5458 5 view .LVU3771
5458:Src/ff.c      **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 11119              		.loc 1 5458 8 is_stmt 0 view .LVU3772
 11120 0102 002C     		cmp	r4, #0
 11121 0104 86D0     		beq	.L807
5459:Src/ff.c      **** 					if (res == FR_OK) {
 11122              		.loc 1 5459 6 is_stmt 1 view .LVU3773
5459:Src/ff.c      **** 					if (res == FR_OK) {
 11123              		.loc 1 5459 12 is_stmt 0 view .LVU3774
 11124 0106 0121     		movs	r1, #1
 11125 0108 0AA8     		add	r0, sp, #40
 11126 010a FFF7FEFF 		bl	dir_alloc
 11127              	.LVL1305:
5460:Src/ff.c      **** 						memset(dj.dir, 0, SZDIRE);	/* Clean the entry */
 11128              		.loc 1 5460 6 is_stmt 1 view .LVU3775
5460:Src/ff.c      **** 						memset(dj.dir, 0, SZDIRE);	/* Clean the entry */
 11129              		.loc 1 5460 9 is_stmt 0 view .LVU3776
 11130 010e 0546     		mov	r5, r0
 11131 0110 0028     		cmp	r0, #0
 11132 0112 7FF47FAF 		bne	.L807
5461:Src/ff.c      **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
 11133              		.loc 1 5461 7 is_stmt 1 view .LVU3777
 11134 0116 2022     		movs	r2, #32
 11135 0118 0021     		movs	r1, #0
 11136 011a 1198     		ldr	r0, [sp, #68]
 11137              	.LVL1306:
5461:Src/ff.c      **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
 11138              		.loc 1 5461 7 is_stmt 0 view .LVU3778
 11139 011c FFF7FEFF 		bl	memset
 11140              	.LVL1307:
5462:Src/ff.c      **** 							dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label entry */
 11141              		.loc 1 5462 7 is_stmt 1 view .LVU3779
5467:Src/ff.c      **** 							memcpy(dj.dir, dirvn, 11);
 11142              		.loc 1 5467 8 view .LVU3780
5467:Src/ff.c      **** 							memcpy(dj.dir, dirvn, 11);
 11143              		.loc 1 5467 25 is_stmt 0 view .LVU3781
 11144 0120 119B     		ldr	r3, [sp, #68]
 11145 0122 0822     		movs	r2, #8
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 343


 11146 0124 DA72     		strb	r2, [r3, #11]
5468:Src/ff.c      **** 						}
 11147              		.loc 1 5468 8 is_stmt 1 view .LVU3782
5468:Src/ff.c      **** 						}
 11148              		.loc 1 5468 17 is_stmt 0 view .LVU3783
 11149 0126 119A     		ldr	r2, [sp, #68]
5468:Src/ff.c      **** 						}
 11150              		.loc 1 5468 8 view .LVU3784
 11151 0128 03AB     		add	r3, sp, #12
 11152 012a 03CB     		ldmia	r3!, {r0, r1}
 11153 012c 1060     		str	r0, [r2]	@ unaligned
 11154 012e 5160     		str	r1, [r2, #4]	@ unaligned
 11155 0130 1988     		ldrh	r1, [r3]	@ unaligned
 11156 0132 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 11157 0134 1181     		strh	r1, [r2, #8]	@ unaligned
 11158 0136 9372     		strb	r3, [r2, #10]
5470:Src/ff.c      **** 						res = sync_fs(fs);
 11159              		.loc 1 5470 7 is_stmt 1 view .LVU3785
5470:Src/ff.c      **** 						res = sync_fs(fs);
 11160              		.loc 1 5470 17 is_stmt 0 view .LVU3786
 11161 0138 099B     		ldr	r3, [sp, #36]
 11162 013a 0122     		movs	r2, #1
 11163 013c DA70     		strb	r2, [r3, #3]
5471:Src/ff.c      **** 					}
 11164              		.loc 1 5471 7 is_stmt 1 view .LVU3787
5471:Src/ff.c      **** 					}
 11165              		.loc 1 5471 13 is_stmt 0 view .LVU3788
 11166 013e 0998     		ldr	r0, [sp, #36]
 11167 0140 FFF7FEFF 		bl	sync_fs
 11168              	.LVL1308:
 11169 0144 0546     		mov	r5, r0
 11170              	.LVL1309:
5471:Src/ff.c      **** 					}
 11171              		.loc 1 5471 13 view .LVU3789
 11172 0146 65E7     		b	.L807
 11173              	.L829:
 11174              		.align	2
 11175              	.L828:
 11176 0148 00000000 		.word	.LANCHOR4
 11177              		.cfi_endproc
 11178              	.LFE58:
 11180              		.section	.bss.FatFs,"aw",%nobits
 11181              		.align	2
 11182              		.set	.LANCHOR1,. + 0
 11185              	FatFs:
 11186 0000 00000000 		.space	4
 11187              		.section	.bss.Fsid,"aw",%nobits
 11188              		.align	1
 11189              		.set	.LANCHOR2,. + 0
 11192              	Fsid:
 11193 0000 0000     		.space	2
 11194              		.section	.bss.LfnBuf,"aw",%nobits
 11195              		.align	2
 11196              		.set	.LANCHOR3,. + 0
 11199              	LfnBuf:
 11200 0000 00000000 		.space	258
 11200      00000000 
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 344


 11200      00000000 
 11200      00000000 
 11200      00000000 
 11201              		.section	.rodata.LfnOfs,"a"
 11202              		.align	2
 11203              		.set	.LANCHOR0,. + 0
 11206              	LfnOfs:
 11207 0000 01030507 		.ascii	"\001\003\005\007\011\016\020\022\024\026\030\034\036"
 11207      090E1012 
 11207      1416181C 
 11207      1E
 11208              		.section	.rodata.badchr.0,"a"
 11209              		.align	2
 11210              		.set	.LANCHOR4,. + 0
 11213              	badchr.0:
 11214 0000 2B2E2C3B 		.ascii	"+.,;=[]/*:<>|\\\"?\177\000"
 11214      3D5B5D2F 
 11214      2A3A3C3E 
 11214      7C5C223F 
 11214      7F00
 11215              		.text
 11216              	.Letext0:
 11217              		.file 2 "d:\\tools\\gcc-arm-none-eabi-10.3-2021.07\\arm-none-eabi\\include\\machine\\_default_type
 11218              		.file 3 "d:\\tools\\gcc-arm-none-eabi-10.3-2021.07\\arm-none-eabi\\include\\sys\\_stdint.h"
 11219              		.file 4 "Inc/ff.h"
 11220              		.file 5 "Inc/diskio.h"
 11221              		.file 6 "d:\\tools\\gcc-arm-none-eabi-10.3-2021.07\\arm-none-eabi\\include\\string.h"
 11222              		.file 7 "<built-in>"
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 345


DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:16     .text.ld_word:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:23     .text.ld_word:00000000 ld_word
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:51     .text.ld_dword:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:57     .text.ld_dword:00000000 ld_dword
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:96     .text.st_word:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:102    .text.st_word:00000000 st_word
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:127    .text.st_dword:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:133    .text.st_dword:00000000 st_dword
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:172    .text.dbc_1st:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:178    .text.dbc_1st:00000000 dbc_1st
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:238    .text.dbc_2nd:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:244    .text.dbc_2nd:00000000 dbc_2nd
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:308    .text.clst2sect:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:314    .text.clst2sect:00000000 clst2sect
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:354    .text.ld_clust:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:360    .text.ld_clust:00000000 ld_clust
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:416    .text.st_clust:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:422    .text.st_clust:00000000 st_clust
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:471    .text.pick_lfn:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:477    .text.pick_lfn:00000000 pick_lfn
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:627    .text.pick_lfn:00000084 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:632    .text.put_lfn:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:638    .text.put_lfn:00000000 put_lfn
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:767    .text.put_lfn:00000074 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:772    .text.sum_sfn:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:778    .text.sum_sfn:00000000 sum_sfn
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:826    .text.get_ldnumber:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:832    .text.get_ldnumber:00000000 get_ldnumber
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:945    .text.validate:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:951    .text.validate:00000000 validate
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1060   .text.sync_window:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1066   .text.sync_window:00000000 sync_window
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1151   .text.move_window:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1157   .text.move_window:00000000 move_window
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1228   .rodata.check_fs.str1.4:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1232   .text.check_fs:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1238   .text.check_fs:00000000 check_fs
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1417   .text.check_fs:000000d0 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1422   .text.find_volume:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1428   .text.find_volume:00000000 find_volume
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1557   .text.mount_volume:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:1563   .text.mount_volume:00000000 mount_volume
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2140   .text.mount_volume:00000298 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2150   .text.put_fat:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2156   .text.put_fat:00000000 put_fat
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2412   .text.get_fat:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2418   .text.get_fat:00000000 get_fat
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2635   .text.dir_sdi:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2641   .text.dir_sdi:00000000 dir_sdi
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2839   .text.create_chain:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:2845   .text.create_chain:00000000 create_chain
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3147   .text.remove_chain:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3153   .text.remove_chain:00000000 remove_chain
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3314   .text.dir_clear:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3320   .text.dir_clear:00000000 dir_clear
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 346


C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3423   .text.dir_next:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3429   .text.dir_next:00000000 dir_next
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3669   .text.dir_alloc:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3675   .text.dir_alloc:00000000 dir_alloc
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3791   .text.dir_read:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:3797   .text.dir_read:00000000 dir_read
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4026   .text.dir_remove:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4032   .text.dir_remove:00000000 dir_remove
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4140   .text.cmp_lfn:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4146   .text.cmp_lfn:00000000 cmp_lfn
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4306   .text.cmp_lfn:0000009c $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4311   .text.dir_find:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4317   .text.dir_find:00000000 dir_find
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4566   .text.put_utf:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4572   .text.put_utf:00000000 put_utf
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4663   .text.get_fileinfo:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:4669   .text.get_fileinfo:00000000 get_fileinfo
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5019   .text.tchar2uni:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5025   .text.tchar2uni:00000000 tchar2uni
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5132   .rodata.create_name.str1.4:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5139   .text.create_name:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5145   .text.create_name:00000000 create_name
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5724   .text.create_name:00000234 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5730   .text.follow_path:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5736   .text.follow_path:00000000 follow_path
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5899   .text.gen_numname:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:5905   .text.gen_numname:00000000 gen_numname
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6142   .text.dir_register:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6148   .text.dir_register:00000000 dir_register
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6458   .text.dir_register:00000144 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6463   .text.sync_fs:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6469   .text.sync_fs:00000000 sync_fs
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6583   .text.sync_fs:00000084 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6589   .text.f_mount:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6596   .text.f_mount:00000000 f_mount
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6701   .text.f_mount:0000004c $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6706   .text.f_open:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:6713   .text.f_open:00000000 f_open
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:7205   .text.f_open:000001fc $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:7210   .text.f_read:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:7217   .text.f_read:00000000 f_read
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:7617   .text.f_write:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:7624   .text.f_write:00000000 f_write
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8075   .text.f_sync:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8082   .text.f_sync:00000000 f_sync
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8222   .text.f_sync:00000094 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8227   .text.f_close:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8234   .text.f_close:00000000 f_close
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8292   .text.f_lseek:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8299   .text.f_lseek:00000000 f_lseek
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8704   .text.f_opendir:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8711   .text.f_opendir:00000000 f_opendir
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8846   .text.f_closedir:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8853   .text.f_closedir:00000000 f_closedir
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8896   .text.f_readdir:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:8903   .text.f_readdir:00000000 f_readdir
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9008   .text.f_stat:00000000 $t
ARM GAS  C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s 			page 347


C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9015   .text.f_stat:00000000 f_stat
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9108   .text.f_getfree:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9115   .text.f_getfree:00000000 f_getfree
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9387   .text.f_truncate:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9394   .text.f_truncate:00000000 f_truncate
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9587   .text.f_unlink:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9594   .text.f_unlink:00000000 f_unlink
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9800   .text.f_mkdir:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:9807   .text.f_mkdir:00000000 f_mkdir
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10079  .text.f_mkdir:00000114 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10084  .text.f_rename:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10091  .text.f_rename:00000000 f_rename
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10386  .text.f_chmod:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10393  .text.f_chmod:00000000 f_chmod
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10512  .text.f_utime:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10519  .text.f_utime:00000000 f_utime
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10629  .text.f_getlabel:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10636  .text.f_getlabel:00000000 f_getlabel
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10852  .text.f_setlabel:00000000 $t
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:10859  .text.f_setlabel:00000000 f_setlabel
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11176  .text.f_setlabel:00000148 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11181  .bss.FatFs:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11185  .bss.FatFs:00000000 FatFs
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11188  .bss.Fsid:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11192  .bss.Fsid:00000000 Fsid
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11195  .bss.LfnBuf:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11199  .bss.LfnBuf:00000000 LfnBuf
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11202  .rodata.LfnOfs:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11206  .rodata.LfnOfs:00000000 LfnOfs
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11209  .rodata.badchr.0:00000000 $d
C:\Users\Vento\AppData\Local\Temp\ccNh4OLi.s:11213  .rodata.badchr.0:00000000 badchr.0

UNDEFINED SYMBOLS
disk_status
disk_write
disk_read
memcmp
disk_initialize
memset
ff_wtoupper
ff_uni2oem
ff_oem2uni
strchr
disk_ioctl
memcpy
